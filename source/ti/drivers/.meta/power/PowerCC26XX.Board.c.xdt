%%{
/*
 * Copyright (c) 2018-2023, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== PowerCC26XX.Board.c.xdt ========
 */

    let POWER                     = args[0];
    let pow                       = POWER.$static;
    let enablePolicy              = pow.enablePolicy;
    let policyInitFxn             = pow.policyInitFunction;
    let policyFxn                 = pow.policyFunction;
    var ccfgModule                = system.modules['/ti/devices/CCFG'];
    var ccfgInst                  = ccfgModule.$static;

    if (policyInitFxn === 'Custom') {
        policyInitFxn = pow.policyInitCustomFunction;
    }

    if (policyInitFxn === 'Not Required') {
        policyInitFxn = 'NULL';
    }

    if (policyFxn === 'Custom') {
        policyFxn = pow.policyCustomFunction;
    }

    if (!enablePolicy) {
        policyInitFxn  = 'NULL';
        policyFxn      = 'NULL';
    }

    let enableTCXOFxn = pow.enableTCXOFunction;
    if (enableTCXOFxn == '') {
        enableTCXOFxn = 'NULL';
    }

    /* localize the object names with this device ID */
    let devId = system.deviceData.deviceId;

    let driver = "";  /* String to attach to "UART" for driver name */
    if (devId.match(/CC13.[124]/) || devId.match(/CC26.[1234]/)) {
        driver = 'CC26X2';
    }
    else {
        driver = 'CC26XX';
    }
%%}
/*
 *  =============================== Power ===============================
 */
#include <ti/drivers/Power.h>
#include <ti/drivers/power/Power`driver`.h>
#include "ti_drivers_config.h"

% if (policyInitFxn !== 'NULL') {
extern void `policyInitFxn`(void);
% }
% if (policyFxn !== 'NULL') {
extern void `policyFxn`(void);
% }
extern bool `pow.calibrateFunction`(unsigned int);
% if (enableTCXOFxn !== 'NULL') {
extern void `enableTCXOFxn`(bool enable);
% }

const Power`driver`_Config Power`driver`_config = {
    .enablePolicy             = `enablePolicy`,
    .policyInitFxn            = `policyInitFxn`,
    .policyFxn                = `policyFxn`,
    .calibrateFxn             = `pow.calibrateFunction`,
% if (driver == "CC26XX") {
    .vddrRechargeMargin       = `pow.vddrRechargeMargin`,
% }
    .calibrateRCOSC_LF        = `pow.calibrateRCOSC_LF`,
    .calibrateRCOSC_HF        = `pow.calibrateRCOSC_HF`,
% if (driver == "CC26X2") {
    .enableTCXOFxn            = `enableTCXOFxn`
% }
};

%%{
/* Function that returns the absolute value of the shifted ppm offset for a given temperature.
 * Used to establish what the maximum shift value can be for highest possible precision without overflowing
 */
function ppmAbs(x, shift) {
    return Math.abs((ccfgInst.rtcXOSCLFCoefficientA * Math.pow(2,shift)) * x * x + (ccfgInst.rtcXOSCLFCoefficientB * Math.pow(2,shift)) * x + (ccfgInst.rtcXOSCLFCoefficientC * Math.pow(2,shift)));
}

if (ccfgInst.enableXoscLfComp == true) {

    /* Default values for XOSC_LF temperature compensation polynomial.
     * Coefficients are scaled up by 2^22 for maximum precision
     */
    var rtcCoefficientA = -0.035;
    var rtcCoefficientB = 1.7;
    var rtcCoefficientC = -21.875;
    var maxShift = 22;

    if(ccfgInst.RTCCustomXOSCLFCoeff == true) {

        /* If custom coefficients are used, we dynamically find the maximum scale-factor for maximum precision */

        let maxShiftTemp = 1;

        for(; maxShiftTemp < 32; maxShiftTemp++)
        {
            if (ppmAbs(-40, maxShiftTemp) > 0xFFFFFFFF) break;
            if (ppmAbs(120, maxShiftTemp) > 0xFFFFFFFF) break;
            if (ppmAbs(-ccfgInst.rtcXOSCLFCoefficientB / (2*ccfgInst.rtcXOSCLFCoefficientA), maxShiftTemp) > 0xFFFFFFFF) break;
        }

        maxShift = maxShiftTemp - 2;
        rtcCoefficientA = ccfgInst.rtcXOSCLFCoefficientA;
        rtcCoefficientB = ccfgInst.rtcXOSCLFCoefficientB;
        rtcCoefficientC = ccfgInst.rtcXOSCLFCoefficientC;
    }
%%}

#include <ti/devices/DeviceFamily.h>
#include DeviceFamily_constructPath(driverlib/osc.h)
XoscLf_Params_t _lfXoscParams = {.coeffA = `Math.trunc(rtcCoefficientA * Math.pow(2,maxShift))`,        /* `rtcCoefficientA` * 2^`maxShift` */
                                 .coeffB = `Math.trunc(rtcCoefficientB * Math.pow(2,maxShift))`,        /* `rtcCoefficientB` * 2^`maxShift` */
                                 .coeffC = `Math.trunc(rtcCoefficientC * Math.pow(2,maxShift))`,        /* `rtcCoefficientC` * 2^`maxShift` */
                                 .coeffD = 0,
                                 .shift = `maxShift`};
% }
