/*
 * Copyright 2021 Amazon.com, Inc. or its affiliates. All rights reserved.
 *
 * AMAZON PROPRIETARY/CONFIDENTIAL
 *
 * You may not use this file except in compliance with the terms and
 * conditions set forth in the accompanying LICENSE.txt file.
 *
 * THESE MATERIALS ARE PROVIDED ON AN "AS IS" BASIS. AMAZON SPECIFICALLY
 * DISCLAIMS, WITH RESPECT TO THESE MATERIALS, ALL WARRANTIES, EXPRESS,
 * IMPLIED, OR STATUTORY, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
 */

#ifndef SID_API_EXP_H
#define SID_API_EXP_H

/** @file
 *
 * @defgroup SIDEWALK_API_EXP Sidewalk API
 * @brief API for communicating with the Sidewalk network
 * @{
 * @ingroup  SIDEWALK_API_EXP
 */

#include <sid_api.h>
#include <sid_network_address.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Describes the link types supported by the Sidewalk library.
 */
enum sid_exp_link_type {
    /** 900 MHz link for FSK PAN */
    SID_LINK_TYPE_4 = 1 << 3,

    /** Bluetooth Low Energy link LEGACY
     * will be removed after all 1P products will
     * q1   switch to Sidewalk BLE */
    SID_LINK_TYPE_5 = 0x80000000,
};

/**
 * A message descriptor given by the Sidewalk library to identify a message.
 */
struct sid_exp_msg_desc {
    /** The message type */
    enum sid_msg_type type;
    /** The id associated with a message, generated by the Sidewalk library */
    uint32_t id;
    /** Sidewalk address of remote - source for incoming messages, destination for outgoing */
    struct sid_address remote;

    /** Only for incoming messages, will be ignored for outgoing
     * Extends support of PAN Use-case - it is important to know weather
     * message was sent to specific device, group or PAN
     */
    struct sid_address *destination;
};

enum sid_exp_radio_tx_event {
    sid_radio_tx_event_start = 0,
    sid_radio_tx_event_end_success = 1,
    sid_radio_tx_event_end_failure = 2,
};

struct sid_exp_radio_tx_info {
    struct sid_timespec timestamp;
    enum sid_link_type link;
    enum sid_exp_radio_tx_event event;
};

/**
 * The set of callbacks a user can register through sid_init().
 */
struct sid_exp_event_callbacks {
    struct sid_event_callbacks event_callbacks;

    /**
     * Notification will be send right after Radio TX was done with additional information regarding link
     */
    void (*on_radio_tx)(const struct sid_exp_radio_tx_info *const info, void *context);
};

struct link_exp_configs {
    const void *sid_900radio_config;     //!< TBD
    const void *sid_ble_legacy_config;   //!< TBD
};

/**
 * Describes the configuration associated with the chosen link.
 */
struct sid_exp_config {
    struct sid_config config;
    /** The event callbacks associated with the chosen link. */
    struct sid_event_callbacks_exp *callbacks;
    /** Link specific configurations.
     *  specify required configurations based on selection in enable_links flags
     */
    const struct link_exp_configs *link_config;
};

/**
 * Initializes the Sidewalk library for the chosen link type.
 *
 * sid_init() can only be called once for the given sid_config.link_type unless sid_deinit() is
 * called first.
 *
 * @see sid_deinit
 *
 * @param[in] config  The required configuration in order to properly initialize sidewalk for the
 *                    chosen link type.
 * @param[out] handle A pointer where the the opaque handle type will be stored. `handle` is set to
 *                    NULL on error.
 *
 * @returns #SID_ERROR_NONE                on success.
 * @returns #SID_ERROR_ALREADY_INITIALIZED if Sidewalk was already initialized for the given link
 *                                         type.
 */
sid_error_t sid_exp_init(const struct sid_exp_config *const config, struct sid_handle **handle);

/**
 * De-initialize the portions of the Sidewalk library associated with the given handle.
 *
 * @see sid_init
 *
 * @param[in] handle A pointer to the handle returned by sid_init()
 *
 * @returns #SID_ERROR_NONE in case of success
 */
sid_error_t sid_exp_deinit(struct sid_handle *handle);

/**
 * Queues a message.
 *
 * @note msg_desc can be used to correlate this message with the sid_event_callbacks.on_msg_sent
 * and sid_event_callbacks.on_send_error callbacks.
 *
 * @note When sending #SID_MSG_TYPE_RESPONSE in response to #SID_MSG_TYPE_GET, the user is expected to fill
 * the id field of message descriptor with id from the corresponding #SID_MSG_TYPE_GET message descriptor.
 * This allows the sid_api to match each unique #SID_MSG_TYPE_RESPONSE with #SID_MSG_TYPE_GET.
 *
 * @param[in]  handle   A pointer to the handle returned by sid_init()
 * @param[in]  msg      The message data to send
 * @param[out] msg_desc The message descriptor this function fills which identifies this message.
 *                      Only valid when #SID_ERROR_NONE is returned.
 *
 * @returns #SID_ERROR_NONE when the message is successfully placed in the transmit queue.
 * @returns #SID_ERROR_TRY_AGAIN when there is no space in the transmit queue.
 */
sid_error_t sid_exp_put_msg(struct sid_handle *handle, const struct sid_msg *msg, struct sid_exp_msg_desc *msg_desc);

#ifdef __cplusplus
}
#endif

/** @} */

#endif /*SID_API_EXP_H*/
