/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All rights reserved.
 *
 * AMAZON PROPRIETARY/CONFIDENTIAL
 *
 * You may not use this file except in compliance with the terms and
 * conditions set forth in the accompanying LICENSE.TXT file. This file is a
 * Modifiable File, as defined in the accompanying LICENSE.TXT file.
 *
 * THESE MATERIALS ARE PROVIDED ON AN "AS IS" BASIS. AMAZON SPECIFICALLY
 * DISCLAIMS, WITH RESPECT TO THESE MATERIALS, ALL WARRANTIES, EXPRESS,
 * IMPLIED, OR STATUTORY, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
 */

/*-------------------------------------\
|                                      |
| this file is automatically generated |
|            do not modify             |
|                                      |
\_____________________________________*/

#include <stdint.h>
#include <ace/ace_config.h>
ace_status_t cli_demo_module_main(int32_t len, const char *param[]);
ace_status_t cli_override_demo_main(int32_t len, const char *param[]);
ace_status_t cli_tests_functional_main(int32_t len, const char *param[]);
ace_status_t cli_tests_check_args(int32_t len, const char *param[]);
ace_status_t acehal_battery_integration_tests_main(int32_t len, const char *param[]);
ace_status_t acehal_button_tests_main(int32_t len, const char *param[]);
ace_status_t acehal_button_v2_tests_main(int32_t len, const char *param[]);
ace_status_t device_info_cli_main(int32_t len, const char *param[]);
ace_status_t acehal_device_info_tests_main(int32_t len, const char *param[]);
ace_status_t acehal_dha_tests_main(int32_t len, const char *param[]);
ace_status_t kvs_cli_main(int32_t len, const char *param[]);
ace_status_t acehal_kv_storage_tests_main(int32_t len, const char *param[]);
ace_status_t acehal_led_tests_main(int32_t len, const char *param[]);
ace_status_t acehal_metric_tests_main(int32_t len, const char *param[]);
ace_status_t ace_log_cli_main(int32_t len, const char *param[]);
ace_status_t acelog_tests_main(int32_t len, const char *param[]);
ace_status_t osal_alloc_tests_main(int32_t len, const char *param[]);
ace_status_t osal_IpMutex_tests_main(int32_t len, const char *param[]);
ace_status_t osal_mp_tests_main(int32_t len, const char *param[]);
ace_status_t osal_mutex_tests_main(int32_t len, const char *param[]);
ace_status_t osal_message_queue_tests_main(int32_t len, const char *param[]);
ace_status_t aceRand_cli_main(int32_t len, const char *param[]);
ace_status_t osal_rand_tests_main(int32_t len, const char *param[]);
ace_status_t osal_semaphore_tests_main(int32_t len, const char *param[]);
ace_status_t aceShmem_cli_main(int32_t len, const char *param[]);
ace_status_t osal_shmem_tests_main(int32_t len, const char *param[]);
ace_status_t osal_thread_tests_main(int32_t len, const char *param[]);
ace_status_t osal_time_tests_main(int32_t len, const char *param[]);
ace_status_t aceTime_cli_main(int32_t len, const char *param[]);

#include "ace_cli_cmds_config.h"
#define ROUND_UP_TO_KB(bytes) ((bytes / 1024) + ((bytes % 1024) ? 1 : 0))
#define ACE_RTOS_CLI_CMDS ACE_CLI_ENTRY
#define ACE_CLI_ENTRY {"ace", "ACE Commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_cli},

const aceCli_moduleCmd_t ace_fw_cli_cli[] = {
#if( CLI_ace_fw_cli_demo == 1 ) 
	{"demo", "ACE CLI demo commands", ACE_CLI_SET_LEAF, .command.func=cli_demo_module_main},
#endif
#if( CLI_ace_fw_cli_gem == 1 ) 
	{"gem", "ACE CLI override demo commands", ACE_CLI_SET_LEAF, .command.func=cli_override_demo_main},
#endif
#if( CLI_ace_fw_cli_test == 1 ) 
	{"test", "ACE CLI test command", ACE_CLI_SET_LEAF, .command.func=cli_tests_functional_main},
#endif
#if( CLI_ace_fw_cli_test_arg == 1 ) 
	{"test_arg", "ACE CLI arg test command", ACE_CLI_SET_LEAF, .command.func=cli_tests_check_args},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_fw_cli[] = {
	{"cli", "ACE CLI module internal commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_fw_cli_cli},
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_battery_cli[] = {
#if( CLI_ace_hal_battery_test == 1 ) 
	{"test", "Battery Hal test", ACE_CLI_SET_LEAF, .command.func=acehal_battery_integration_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_button_cli[] = {
#if( CLI_ace_hal_button_test == 1 ) 
	{"test", "Button Hal test", ACE_CLI_SET_LEAF, .command.func=acehal_button_tests_main},
#endif
#if( CLI_ace_hal_button_test_v2 == 1 ) 
	{"test_v2", "Button HAL test", ACE_CLI_SET_LEAF, .command.func=acehal_button_v2_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_device_info_cli[] = {
#if( CLI_ace_hal_device_info_cli == 1 ) 
	{"cli", "Device Info Hal Cli", ACE_CLI_SET_LEAF, .command.func=device_info_cli_main},
#endif
#if( CLI_ace_hal_device_info_test == 1 ) 
	{"test", "Device Info Hal test", ACE_CLI_SET_LEAF, .command.func=acehal_device_info_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_dha_cli[] = {
#if( CLI_ace_hal_dha_test == 1 ) 
#ifndef ACE_HAL_DHA_TEST_STACK_SIZE
#define ACE_HAL_DHA_TEST_STACK_SIZE (12 * 1024)
#endif
	{"test", "DHA Hal test", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=acehal_dha_tests_main, .stack_size_kb = ROUND_UP_TO_KB(ACE_HAL_DHA_TEST_STACK_SIZE)},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_kvs_cli[] = {
#if( CLI_ace_hal_kvs_cli == 1 ) 
	{"cli", "KVS Hal Cli", ACE_CLI_SET_LEAF, .command.func=kvs_cli_main},
#endif
#if( CLI_ace_hal_kvs_test == 1 ) 
	{"test", "KVS Hal test", ACE_CLI_SET_LEAF, .command.func=acehal_kv_storage_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_led_cli[] = {
#if( CLI_ace_hal_led_test == 1 ) 
	{"test", "LED Hal test", ACE_CLI_SET_LEAF, .command.func=acehal_led_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_metric_cli[] = {
#if( CLI_ace_hal_metric_test == 1 ) 
	{"test", "Metric Hal test", ACE_CLI_SET_LEAF, .command.func=acehal_metric_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_cli[] = {
	{"battery", "Battery HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_battery_cli},
	{"button", "Button HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_button_cli},
	{"device_info", "Device Info HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_device_info_cli},
	{"dha", "DHA HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_dha_cli},
	{"kvs", "KVS HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_kvs_cli},
	{"led", "LED HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_led_cli},
	{"metric", "Metric HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_metric_cli},
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_mw_logging_cli[] = {
#if( CLI_ace_mw_logging_cli == 1 ) 
	{"cli", "cli cmds for logging", ACE_CLI_SET_LEAF, .command.func=ace_log_cli_main},
#endif
#if( CLI_ace_mw_logging_test == 1 ) 
	{"test", "Test Ace Logging", ACE_CLI_SET_LEAF, .command.func=acelog_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_mw_cli[] = {
	{"logging", "ACE Logging commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_mw_logging_cli},
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_alloc_cli[] = {
#if( CLI_ace_osal_alloc_test == 1 ) 
	{"test", "Test ACE OSAL Alloc", ACE_CLI_SET_LEAF, .command.func=osal_alloc_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_ipmutex_cli[] = {
#if( CLI_ace_osal_ipmutex_test == 1 ) 
	{"test", "Test ACE OSAL IpMutex", ACE_CLI_SET_LEAF, .command.func=osal_IpMutex_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_mp_cli[] = {
#if( CLI_ace_osal_mp_test == 1 ) 
	{"test", "Test ACE OSAL Memory pool", ACE_CLI_SET_LEAF, .command.func=osal_mp_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_mutex_cli[] = {
#if( CLI_ace_osal_mutex_test == 1 ) 
	{"test", "Test ACE OSAL Mutex", ACE_CLI_SET_LEAF, .command.func=osal_mutex_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_queue_cli[] = {
#if( CLI_ace_osal_queue_test == 1 ) 
	{"test", "Test ACE OSAL Message Queue", ACE_CLI_SET_LEAF, .command.func=osal_message_queue_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_rand_cli[] = {
#if( CLI_ace_osal_rand_get == 1 ) 
	{"get", "Get random data", ACE_CLI_SET_LEAF, .command.func=aceRand_cli_main},
#endif
#if( CLI_ace_osal_rand_test == 1 ) 
	{"test", "Test ACE OSAL Rand", ACE_CLI_SET_LEAF, .command.func=osal_rand_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_semaphore_cli[] = {
#if( CLI_ace_osal_semaphore_test == 1 ) 
	{"test", "Test ACE OSAL Semaphore", ACE_CLI_SET_LEAF, .command.func=osal_semaphore_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_shmem_cli[] = {
#if( CLI_ace_osal_shmem_cli == 1 ) 
	{"cli", "ACE OSAL Shared Memory Feature CLIs", ACE_CLI_SET_LEAF, .command.func=aceShmem_cli_main},
#endif
#if( CLI_ace_osal_shmem_test == 1 ) 
	{"test", "Test ACE OSAL Shared Memory", ACE_CLI_SET_LEAF, .command.func=osal_shmem_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_thread_cli[] = {
#if( CLI_ace_osal_thread_test == 1 ) 
	{"test", "Test ACE OSAL Thread", ACE_CLI_SET_LEAF, .command.func=osal_thread_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_time_cli[] = {
#if( CLI_ace_osal_time_test == 1 ) 
	{"test", "Test ACE OSAL Time", ACE_CLI_SET_LEAF, .command.func=osal_time_tests_main},
#endif
#if( CLI_ace_osal_time_timer_one_shot == 1 ) 
	{"timer_one_shot", "Start a one-shot alarm timer", ACE_CLI_SET_LEAF, .command.func=aceTime_cli_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_cli[] = {
	{"alloc", "ACE OSAL Alloc commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_alloc_cli},
	{"ipmutex", "ACE OSAL IpMutex commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_ipmutex_cli},
	{"mp", "ACE OSAL Memory Pool commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_mp_cli},
	{"mutex", "ACE OSAL Mutex commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_mutex_cli},
	{"queue", "ACE OSAL Message Queue commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_queue_cli},
	{"rand", "ACE OSAL Rand commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_rand_cli},
	{"semaphore", "ACE OSAL Semaphore commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_semaphore_cli},
	{"shmem", "ACE OSAL Shared Memory commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_shmem_cli},
	{"thread", "ACE OSAL Thread commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_thread_cli},
	{"time", "ACE OSAL Time commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_time_cli},
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_cli[] = {
	{"fw", "ACE framework commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_fw_cli},
	{"hal", "ACS HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_cli},
	{"mw", "", ACE_CLI_SET_FUNC, .command.subCommands=ace_mw_cli},
	{"osal", "ACE OSAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_cli},
	ACE_CLI_NULL_MODULE
};

