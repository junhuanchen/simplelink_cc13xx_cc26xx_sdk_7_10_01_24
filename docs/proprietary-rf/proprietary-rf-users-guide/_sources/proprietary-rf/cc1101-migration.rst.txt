=====================
Migrating from CC1101
=====================

Introduction
============
Welcome to the CC1101 migration guide. This guide is written for users that use
CC1101 today and want to migrate over to |PROPRFDEVICE|. This guide consists of 4 main
parts:

 - "How do I get a link between CC1101 and |PROPRFDEVICE|?"
 - "Where are my registers?": A short introduction to software on |PROPRFDEVICE|
 - "How do I make |PROPRFDEVICE| do anything": Drivers and software
 - "I use feature <> on CC1101, how do I do it on |PROPRFDEVICE|?"

This document refers to the following material:

 - The device datasheet: The datasheet for the device you are working with. 
 - The |TRM|

"How do I get a link between CC1101 and |PROPRFDEVICE|"
-------------------------------------------------------

.. note:: 38.4 kbps is used for these examples. Other data rates supported by :term:`genfsk` may be used.

For the following examples, `SmartRF Studio`_ is used.

CC1101 <-> |PROPRFDEVICE| Using Non Return to Zero (NRZ)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
On CC1101:

 - Select the predefined 38.4 kbps setting

.. _fig_CC1101_NRZ:

.. figure:: cc1101nrz.png
   :align: center

   CC1101 configuration NRZ

On |PROPRFDEVICE|:

 - Select the 50 kbps setting. Change the data rate and deviation to the same as CC1101 uses.
 - CC1101 uses a 16 bit sync word that is repeated to generate a 32 bit sync word. On
   |PROPRFDEVICE| the sync word then has to be set to 0xD391D391.

.. _fig_CC1310_NRZ:

.. figure:: cc1350nrz.png
   :align: center

   |PROPRFDEVICE| configuration NRZ

CC1101 <-> |PROPRFDEVICE| Using Manchester Coding
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
On CC1101:
 - Select the predefined 38.4 kbps setting
 - Tick the Manchester Enable box
 - Set MDMCFG2.SYNC_MODE = 2.

On |PROPRFDEVICE|:

 - Select the 50 kbps setting. Change the data rate and deviation to the same as CC1101 uses.
 - CC1101 does manchester coding on preamble and sync word, |PROPRFDEVICE| only does
   manchester coding on the payload. The CC1101 sync word manchester encoded is
   0xA65A9656. Set the |PROPRFDEVICE| sync word equal to this.
 - Enable manchester coding by setting PROP_RADIO_DIV_SETUP.formatConf.fecMode = 0xA
 
 .. only:: sdk_targets_cc13x0
  
  - Enable manchester coding by changing the MCE_RF_OVERRIDE to MCE_RFE_OVERRIDE(0,5,0,1,0,0)
  - The following override has to be added to get the bytes in the correct order: HW_REG_OVERRIDE(0x52B4,0x270C)
  
 .. only:: sdk_targets_cc13xx_cc26xx
 
  - The following override has to be added to get the bytes in the correct order: HW_REG_OVERRIDE(0x5328,0x2047)
  - The following override has to be added:  HW_REG_OVERRIDE(0x5320, 0x1000)
  
  Manchester coding has only been functionally verified on |PROPRFDEVICE|. 

.. _fig_CC1350-manchester1:

.. figure:: cc1350-man1.png
   :align: center

   |PROPRFDEVICE| configuration manchester

.. _fig_CC1350-manchester2:

.. only:: sdk_targets_cc13x0

   .. figure:: cc1350-man2.png
      :align: center
	  
      |PROPRFDEVICE| override editor manchester

The strict sync word check in |PROPRFDEVICE| is not in use when using manchester
coding. To reduce the number of false syncs the sync threshold could be
increased. See `sync_word_qualifier`_ for details.

General note: It is recommended to use manchester coding only for legacy systems.

How to use the override editor in SmartRF Studio is described in the built-in
help in the program.

"Where are my registers?"
=========================

CC1101 is a transceiver meaning that to make an application CC1101 has to be
used together with an MCU. This MCU communicates with CC1101 over an SPI
interface and hardware registers on CC1101 has to be written or strobe commands
have to be sent to make the radio do anything.

|PROPRFDEVICE| is a wireless MCU. This mean that |PROPRFDEVICE| is a powerful MCU with a
selection of peripheral modules where one of these is the RF core. |PROPRFDEVICE| still
has registers but most of them are hidden from users. One of the reasons for this
is that the meaning of a register on |PROPRFDEVICE| changes dependent on which firmware
that is running. Instead the communication with the different modules on |PROPRFDEVICE|
is done via APIs and overrides. All the available modules on |PROPRFDEVICE| have a
driver. The APIs for the drivers are described in the documentation.

 - |TI_DRIVERS_API|
 - |DRIVERLIB_API|

In addition all drivers are documented in the header files. The header files also
contain examples of usage. The driver header files are found in
TI Driver Source Files. Some drivers also have examples included in the SDK.

An override is a register write. Most of the overrides are provided by TI and
should not be changed. These are typically registers setting up one or more
internal modules and are the result of a lot of testing. The registers users can
change freely are typically documented :doc:`here </proprietary-rf-guide/rf-core-index>`. Required
overrides are given by `SmartRF Studio`_.

.. _Drivers_and_software:

"How Do I Make |PROPRFDEVICE| Do Anything?": Drivers and Software
=================================================================

To control CC1101 you can use anything from a simple 8 bits MCU to a multi core
Arm processor, all depending on the complexity of your application. |PROPRFDEVICE| is a
wireless MCU with more than one core hence programming |PROPRFDEVICE| is different from
using a simple 8 bit controller. |PROPRFDEVICE| has a number of internal voltage and
clock domains. To use (as an example) the RF core the clocks used by the RF core
have to be turned on and the voltage domain the RF core is powered from has to be
turned on. When the RF core is not in use the clocks and the voltage domain
should be turned off to save power. The power on and off needs to be done in a
given sequence to ensure that everything is in the correct state.

To simplify the use of |PROPRFDEVICE| drivers are available. The driver sets up the
clock and power domains and offer an API. The driver documentation can be found
here:

 - |TI_DRIVERS_API|
 - |DRIVERLIB_API|

The drivers are written in c and it is therefore possible to walk through the
code to get a better understanding of what a given driver does if this is wanted
and/ or required. In addition, this document describes the power driver
requirements: |POWER_MANAGEMENT_UG|.

Both the |TIRTOS| and the NoRTOS solution go to the IDLE state whenever possible.
In IDLE state the :tidrivers_api:`Power_idleFunc` is called which takes the chip
to the lowest power state possible.

For a comprehensive TI-RTOS course, see the `TI RTOS Workshop Series`_.

The NoRTOS solution is documented here: |NORTOS_DPL|.

For |PROPRFDEVICE| a Software Development Kit (SDK) is provided.

.. _ccfg-migration:

The Customer Configuration (CCFG)
---------------------------------

|PROPRFDEVICE| has a part of flash called Customer Configuration (CCFG). The CCFG
parameters are set at compile time in the ccfg.c file in the SDK. The ccfg.c
file contains settings for (not a complete list):

 - CCFG_FORCE_VDDR_HH: Sets it 12.5 dBm or 14 dBm is maximum output power.
 - SET_CCFG_MODE_CONF_DCDC_ACTIVE: Sets if the DCDC should be used in active or not.
 - SET_CCFG_MODE_CONF_SCLK_LF_OPTION: Sets the source for the low frequency clock.
 - SET_CCFG_MODE_CONF_XOSC_CAP_MOD: Sets if the internal crystal load capacitor array should be used. The default is that the internal array is in use.
 - SET_CCFG_EXT_LF_CLK_DIO: The DIO used if using an external clock source for the LF
 - SET_CCFG_BL_CONFIG_BL<>: Settings for the boot loader.

"I Use Feature <> on CC1101, How Do I Do it on |PROPRFDEVICE|?"
===============================================================

This part of the migration guide aims to describe how CC1101 features map to the
|PROPRFDEVICE|. The numbering of the sections follows the CC1101 datasheet. If you
wonder how to implement a given thing on |PROPRFDEVICE|, find which section in the
CC1101 datasheet this is covered and look up the section number in the guide.

4 Electrical Specifications
---------------------------
4.1 Current Consumption
~~~~~~~~~~~~~~~~~~~~~~~
The |PROPRFDEVICE| current consumption numbers are summarized in 5.4 and 6.7 in the
device datasheet.

+-------------------+----------+------------+----------+
| State             | CC1101   | CC1310     | CC1312   |
+===================+==========+============+==========+
| Tx (10 dBm)       | 30.0 mA  | 13.4 mA    | 14 mA    |
+-------------------+----------+------------+----------+
| Rx                | 14.7 mA  | 5.5 mA     | 5.7 mA   |
+-------------------+----------+------------+----------+
| Sleep             | 0.2 uA   | 0.185 uA   | 0.13 uA  |
+-------------------+----------+------------+----------+

4.2 Receive Section
~~~~~~~~~~~~~~~~~~~
The |PROPRFDEVICE| receive parameters are stated in 5.6 and 5.7 in the device datasheet.

4.3 RF Transmit Section
~~~~~~~~~~~~~~~~~~~~~~~
The |PROPRFDEVICE| transmit parameters are stated in 5.8 and 5.9 in the device datasheet.

4.4 Crystal Oscillator
~~~~~~~~~~~~~~~~~~~~~~~
.. only:: sdk_targets_cc13x0

   |PROPRFDEVICE| has 2 crystal oscillators, 24 MHz and 32.768 kHz. The internal 32.768
   kHz RC oscillator can be used instead of the 32.768 crystal. This is done in the
   ``ccfg.c`` file.
   
.. only:: sdk_targets_cc13xx_cc26xx

   |PROPRFDEVICE| has 2 crystal oscillators, 48 MHz and 32.768 kHz. The internal 32.768
   kHz RC oscillator can be used instead of the 32.768 crystal. This is done in the
   ``ccfg.c`` file.


4.5 Low Power RC Oscillator
~~~~~~~~~~~~~~~~~~~~~~~~~~~
The |PROPRFDEVICE| 32 kHz RC oscillator is covered in the "Clock Specifications" section in chapter 5 in the device datasheet.

4.6 Frequency Synthesizer Characteristics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The |PROPRFDEVICE| PLL parameters are covered in chapter 5 in the datasheet.

4.7 Analog Temperature Sensor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The |PROPRFDEVICE| has a build in temperature sensor and battery monitor. An API is
provided, see |AONBATMON|.

The "Battery Monitor and Temperature Sensor" chapter in the |TRM| describes how the module is implemented on |PROPRFDEVICE|.

4.8 DC Characteristics
~~~~~~~~~~~~~~~~~~~~~~
The |PROPRFDEVICE| DC characteristics are covered in chapter 5 in the datasheet.

.. _power_on_reset:

4.9 Power-On Reset
~~~~~~~~~~~~~~~~~~
|PROPRFDEVICE| has built in power supply supervision that ensures that the chip first
starts when the supply voltage to the chip has a valid level. When the voltage
drops below a given voltage the voltage supply supervision module take the chip
down in a controlled reset to ensure that the chip does not enter an undefined
state.

In the ``ccfg.c`` file it's possible to set the reset level to 1.78 V (1.65 V if
external regulator mode is used) or 2.0 V, see
``SET_CCFG_MODE_CONF_VDDS_BOD_LEVEL`` in :ref:`ccfg-migration`.

5 Pin Configuration
-------------------
See section 4 in the device datasheet for pin configurations.

.. note::

  CC13x0 comes in 3 different packet sizes (4x4, 5x5 and 7x7) where the main
  difference between the packet sizes is the number of available IOs.
	
  CC13x2 is only available in 7x7.

6 Circuit Description
---------------------
See the device datasheet and section 1 in the |TRM|.

7 Application Circuit
---------------------
This section will not cover the |PROPRFDEVICE| application circuit but some of the
differences between CC1101 and |PROPRFDEVICE|. For |PROPRFDEVICE| application circuits see
under Design files in "Technical Documents" on the device page.

7.1 Bias Resistor
~~~~~~~~~~~~~~~~~
|PROPRFDEVICE| doesn't use an external bias resistor

7.2 Balun and RF Matching
~~~~~~~~~~~~~~~~~~~~~~~~~
Similar to CC1101, |PROPRFDEVICE| has differential RF pins, RF_P and RF_N. In addition
the RXTX pin may be used. The LNA can be biased internally or externally. If the
latter is the case the RXTX pin is used. In addition, the RF_P and RF_N pins are
possible to use single ended. Possible use cases are two single ended paths on
two different frequencies or one path for TX and one for RX. The latter could
typically be the case when using a front-end module (FEM).

For 868 MHz, it is also possible to use an integrated passive component (IPC)
instead of discrete components. See `CC13xx/CC26xx Hardware Configuration and 
PCB Design Considerations`_ for a list of IPCs possible to use. 

7.3 Crystal
~~~~~~~~~~~
|PROPRFDEVICE| has an internal capacitor array used as load capacitors for the 
crystal. This cap-array is possible to adjust, see chapter 6 in `CC13xx/CC26xx 
Hardware Configuration and PCB Design Considerations`_.

.. only:: sdk_targets_cc13xx_cc26xx

  Some |PROPRFDEVICE| launchpads have load capacitors mounted and the internal 
  load capacitors turned off to improve performance.

7.4 Reference Signal
~~~~~~~~~~~~~~~~~~~~
.. only:: sdk_targets_cc13x0

  |PROPRFDEVICE| can only be used with a crystal. TCXO or an external reference signal is not supported.
  
.. only:: sdk_targets_cc13xx_cc26xx

  |PROPRFDEVICE| is designed to be able to use a (TCXO). Official support for TCXO and narrow band will be added, 
  check on E2E to get the up to date status.  
  

7.5 Additional Filtering
~~~~~~~~~~~~~~~~~~~~~~~~
Not applicable for |PROPRFDEVICE|. Please look for a reference design under the
"Technical Documents" tab on the |PROPRFDEVICE| page on ti.com.

7.6 Power Supply Decoupling
~~~~~~~~~~~~~~~~~~~~~~~~~~~
It is important that the power decoupling is done as in the reference design. In
addition the network connected to the DCDC_SW pin should be done as close as
possible to the reference design if the DCDC converter is used. Pay close
attention to the grounding and to have a short as possible return path from the
decoupling to the die paddle.

7.7 Antenna Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~~
Please take a look the `CC-Antenna-DK2 and Antenna Measurements Summary`_ for
the latest recommended PCB antennas.

7.8 PCB Layout Recommendations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The layout considerations for CC1101 are also valid for |PROPRFDEVICE|. See 
`CC13xx/CC26xx Hardware Configuration and PCB Design Considerations`_ for 
general hardware design guidelines. See the device datasheet, the reference 
designs and your manufacturer on solder paste coverage. See the |PROPRFDEVICE| 
reference designs for the number of vias under the chip.

8 Configuration Overview
------------------------
CC1101 is a transceiver where the transitions between the different states are
controlled by a hardware module.

|PROPRFDEVICE| is a wireless module where the radio is one of the peripherals. The
states on CC1101 can therefore not be compared directly. The Power Management section in the device datasheet
describe the main power modes.

The RF driver controls which state the RF core is in.

.. _codeexport:

9 Configuration Software
------------------------
It's highly recommended to use the code export feature in SmartRF Studio to get
the recommended settings.

For details, press help in SmartRF Studio and scroll down to "Command Code
Export" in the contents pan.

10 4-wire Serial Configuration and Data Interface
-------------------------------------------------
CC1101 is programmed and controlled over a SPI interface. This section of the
CC1101 datasheet covers how to use the SPI interface. The |PROPRFDEVICE| is a wireless
MCU and therefore is not directly controlled over an interface. Programming the
|PROPRFDEVICE| is done over the JTAG interface using XDS100V3, XDS110 or XDS200. The
|LP| has a built-in XDS110 that can be used to program the |PROPRFDEVICE| on the
Launchpad or on a custom board using either `Flash Programmer 2`_ or `Uniflash`_.

11 General Control and Status Pins
----------------------------------
The pins described in this section of the CC1101 datasheet are related to the
SPI interface controlling CC1101. Since |PROPRFDEVICE| is controlled differently than
CC1101, |PROPRFDEVICE| doesn't have the pin control described in this section of the
CC1101 datasheet.

12 Data Rate Programming
------------------------
On CC1101 the wanted data rate is set by writing to the MDMCFG3.DRATE_M and
MDMCFG4.DRATE_E registers. On |PROPRFDEVICE| the data rate is set via the
``CMD_PROP_RADIO_DIV_SETUP`` command. See 23-139 in the |TRM| for details. It is
recommended to use SmartRF Studio to calculate the required values and export
the code. SmartRF Studio also contains a set of characterized settings for data
rates used in CC1101 systems.

13 Receiver Channel Filter Bandwidth
------------------------------------
Receiver bandwidth is set via the ``CMD_PROP_RADIO_DIV_SETUP`` command.

On |DEVICE| the RX BW can't be set independently of the data rate, the actual RX
bandwidth is a function of the RF frequency.

.. note::

  For datarates below 20 kbps the frequency tolerance will be low and the system
  will be difficult to use with crystals as reference. For CC13x0, see `CC13x0 Low Data Rate Operation  <http://www.ti.com/lit/pdf/swra566>`_. CC13x2 has this patch built-in.

For a given RX bandwidth it's only possible to use data rates within a certain range. SmartRF Studio will give a warning if the combination you try to use is not possible.


14 Demodulator, Symbol Synchronizer and Data Decision
-----------------------------------------------------
14.1 Frequency Offset Compensation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When using (G)FSK and data rates under 500 kbps the frequency offset estimate is
available as 

.. math::

	\frac{\textrm{DEMMAFC0}[7:0]}{64} * \textrm{fdev}
	
fdev is the programmed deviation and
has unit Hz.

.. only:: sdk_targets_cc13x0

   DEMMAFC0[7:0] is on address 0x4004 5154 and should be read after a packet is
   received. The result is a signed value. The snippets below shows the required code:
   
   .. code-block:: c
    
		//frequency_dev is the deviation given in Hz.
		static int16_t offset  = 0;
	
		rfc_CMD_READ_RFREG_t RF_cmdReadRfregFreqOffset =
		{
			.commandNo  = 0x0601,
			.address = 0x5154,
			.value = 0,
		};
    
		// Place in the RX part of the code
		RF_runImmediateCmd(rfHandle, (uint32_t*)&RF_cmdReadRfregFreqOffset);
		offset = (RF_cmdReadRfregFreqOffset.value) * frequency_dev/ 64;

.. only:: sdk_targets_cc13xx_cc26xx
   
   DEMMAFC0[7:0] is on address 0x4004 51C0 and should be read after a packet is
   received. The result is a signed value. The snippets below shows the required code:
   
   .. code-block:: c
   
		//frequency_dev is the deviation given in Hz.
		static int16_t offset  = 0;

		rfc_CMD_READ_RFREG_t RF_cmdReadRfregFreqOffset =
		{
		.commandNo  = 0x0601,
		.address = 0x5154,
		.value = 0,
		};
		
		// Place in the RX part of the code.
		RF_runImmediateCmd(rfHandle, (uint32_t*)&RF_cmdReadRfregFreqOffset);
    
		offset = (RF_cmdReadRfregFreqOffset.value) * frequency_dev/ 64;

.. only:: sdk_targets_cc13xx_cc26xx

   On |PROPRFDEVICE| it's also possible to append the frequency offset to the received packet as extra status bytes.   

   .. _fig_extrastatusbytes:

   .. figure:: extrastatusbytes.png
      :align: center    
   
      Extra Status bytes format
    
   To append freq offset information to the packet buffer, add the following to the override list:: 
     
	 (uint32_t)0x000488E3 
   
   To append LQI information to the packet buffer, add to the override list:: 
     
	 (uint32_t)0x000288E3
	 
   If both LQI and freq offset are wanted, add::
     
	 (uint32_t)0x000688E3

14.2 Bit Synchronization
~~~~~~~~~~~~~~~~~~~~~~~~
From a user standpoint this is done in the same way on CC1101 and |PROPRFDEVICE|.

14.3 Byte Synchronization
~~~~~~~~~~~~~~~~~~~~~~~~~
From a user standpoint this is done in the same way on CC1101 and |PROPRFDEVICE|.

15 Packet Handling Hardware Support
-----------------------------------
15.1 Data Whitening
~~~~~~~~~~~~~~~~~~~
|PROPRFDEVICE| can be set up to use the same whitening as CC1101 by setting
``CMD_PROP_RADIO_DIV_SETUP.whitenMode`` = ``0x1``.

15.2 Packet Format
~~~~~~~~~~~~~~~~~~
The |PROPRFDEVICE| standard packet format shown in figure 23-9 in |TRM| is the same
packet format as used on CC1101, but the packet format on |PROPRFDEVICE| is made more
flexible.

 - The length of the preamble is possible to set in
   ``CMD_PROP_RADIO_DIV_SETUP.nPreamBytes`` with the possibility to set the
   length of the preamble to most values between 1 and 32 byte in addition to 1
   and 4 bit. See table 23-139 for details. On |PROPRFDEVICE| it's possible to use
   other preambles than 0xAA or 0x55.

   The preamble can be set using :ref:`rf_proprietary_overrides`::

       //Preamble: 0x33
       (uint32_t) 0x33330043

       //Preamble: 0xCC
       (uint32_t) 0xCCCC0043

 - The length of the sync word is possible to set in
   ``CMD_PROP_RADIO_DIV_SETUP.nSwBits`` with the possibility to set number of
   bits from 8 to 32.

Note that the CC1101 sync search is purely bit based (the bits in the received
data stream are compared one by one with the programmed sync word). |PROPRFDEVICE| on
the other hand uses a combination of correlator based sync search and a bit
based search (strict sync search). A correlator based sync search compares
patterns and does not limit sensitivity. This difference in how the CC1101 and
|PROPRFDEVICE| search for sync means that it's not possible to accept 1 bit error per
16 bits on |PROPRFDEVICE| as on CC1101 (MDMCFG2.SYNCMODE). Since the sync search on
|PROPRFDEVICE| doesn't limit sensitivity there is no need for a 15/16 or 30/32 sync
mode setting on |PROPRFDEVICE|.

Note that by using ``CMD_PROP_RX_ADV`` it is possible to search for two
different sync words at the same time.

 - ``CMD_PROP_RX`` supports up to 255 bytes payload, ``CMD_PROP_RX_ADV``
   supports unlimited length (``CMD_PROP_RX_ADV.maxPktLen`` = 0).
 - Fixed or variable packet length is set in ``CMD_PROP_TX.bVarLen``. When using
   variable packet length mode on CC1101, the length byte must be written to the
   TX FIFO. On the |PROPRFDEVICE|, the length byte is not part of the packet but is
   set through the API (``CMD_PROP_TX.pktLen``).


15.3 Packet Filtering in Receive Mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Address filtering can be enabled by setting ``CMD_PROP_RX.bChkAddress``. The
received address is compared against ``CMD_PROP_RX.address0`` and
``CMD_PROP_RX.address1``. CRC filtering can be enabled by setting ``CMD_PROP_RX.bUseCrc``.

16 Modulation Formats
---------------------
.. only:: sdk_targets_cc13x0

  As of today |PROPRFDEVICE| supports 2-(G)FSK and OOK. Contact TI if you need a different format.

.. only:: sdk_targets_cc13xx_cc26xx

  As of today |PROPRFDEVICE| supports 2-(G)FSK and 4-(G)FSK. Contact TI if you need a different format.

.. _sync_word_qualifier:

17.1 Sync Word Qualifier
~~~~~~~~~~~~~~~~~~~~~~~~
The sync word is selectable to have a length from 8 bits to 32 bits. This is set
in ``CMD_PROP_RADIO_DIV_SETUP.nSwBits``. 

.. only:: sdk_targets_cc13x0
     
  The sync word threshold could be set with the following override::
	 
       HW_REG_OVERRIDE(0x5104,0xYYZZ)

.. only:: sdk_targets_cc13xx_cc26xx

  The sync word threshold could be set with the following override:: 
	 
	   HW_REG_OVERRIDE(0x5114,0xYYZZ)
   
where YY and ZZ is the threshold for the two correlators. For simplicity the two
thresholds can be set equal. Higher value is stricter. The default sync
threshold is given by:

.. math::

 \textrm{Sync Threshold} = \frac{30*\textrm{nSwBits}}{32} + 9

If the received sync word has to be bit by bit equal to the programmed sync
word, the word search is qualified as a strict sync word search.

17.2 Preamble Quality Threshold (PQT)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The |CMD_PROP_CS| command can be used to monitor the RF activity in a channel
and return busy if a preamble is present.

If PQT gating of sync search is wanted ``CMD_PROP_RX_SNIFF`` has to be chained
(:ref:`condition_evaluation`) with ``CMD_PROP_RX``.

17.3 RSSI
~~~~~~~~~
If in Rx, the function :rflib_api:`RF_getRssi` returns the RSSI value. After
receiving a packet the radio will no longer be in RX mode unless ``bRepeatOk`` =
1. The RSSI of a received packet can be read from the ``rfc_propRxOutput_t``
structure.

In the code, add::

    static rfc_propRxOutput_t rxStatistics;
    int8_t RSSIout;

    // Under Modify CMD_PROP_RX command for application needs
    RF_cmdPropRx.pOutput = (uint8_t*)&rxStatistics;

    // Where you want to read out the RSSI in the code
    RSSIout = rxStatistics.lastRssi;

17.4 Carrier Sense (CS)
~~~~~~~~~~~~~~~~~~~~~~~
The |CMD_PROP_CS| command can be used to monitor the RF activity in a channel
and return busy if the RSSI is above a given threshold.

17.5 Clear Channel Assessment (CCA)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The rfListenBeforeTalk example in the |SDK| shows how listen before talk (LBT)
or CCA can be implemented.

17.6 Link Quality Indicator (LQI)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
It is not possible to output the LQI via the ``rfc_propRxOutput_t`` structure or
to append it to the packet meta data.

The LQI for the last received packet when using :term:`genfsk` can be read from a
register if the RF core is not in RX.::

    static uint8_t LQI  = 0;

    rfc_CMD_READ_RFREG_t RF_cmdReadLQI =
    {
      .commandNo  = 0x0601,
      .address = 0x5268,
      .value = 0,
    };

    RF_runImmediateCmd(rfHandle, (uint32_t*)&RF_cmdReadLQI);

    LQI = (RF_cmdReadLQI.value);


18.1 Forward Error Correction (FEC)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. only:: sdk_targets_cc13x0

   To enable the CC1101 compatible FEC:

   1.  Export GEN-FSK settings from SmartRF Studio.

   2.  In the ``smartrf_settings.c`` file, add the rf_patch_mce_genfsk_fec_cc1101
       :term:`MCE` patch to ``RF_prop``::

        #include <ti/devices/DEVICE/rf_patches/rf_patch_mce_genfsk_fec_cc1101.h>

        RF_Mode RF_prop =
        {
            .rfMode = RF_MODE_PROPRIETARY_SUB_1,
            .cpePatchFxn = &rf_patch_cpe_genfsk,
            .mcePatchFxn = &rf_patch_mce_genfsk_fec_cc1101,
            .rfePatchFxn = &rf_patch_rfe_genfsk,
        };

   3.  In the override list set the MCE to run from RAM::

        MCE_RFE_OVERRIDE(1,0,0,1,0,0),

   4.  In the override list, add the following line to set stricter sync word
       threshold. The FEC patch does not do bit-wise sync word check::

        HW_REG_OVERRIDE(0x5104,0x7F2C),

.. only:: sdk_targets_cc13xx_cc26xx

  The patch required for the CC1101 compatible FEC on |PROPRFDEVICE| is not tested. 
  Contact TI if you are interested in using a CC1101 compatible FEC on |PROPRFDEVICE|. 

19.1 Power-On Start-Up Sequence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The |PROPRFDEVICE| has a build in POR/ brown out detector (BOD) that ensures that the
chip does not boot up before VDDS is above the set minimum voltage (see
:ref:`power_on_reset`). The chip also has an external reset pin. Follow the
reference design for an external circuit that ensures a pin reset at power-up.

19.2 Crystal Control
~~~~~~~~~~~~~~~~~~~~
The high speed XOSC is controlled by the drivers. A user doesn't need to write code
that directly controls the high speed XOSC.

19.3 Voltage Regulator Control
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The voltage regulators are controlled by the chip.

19.4 Active Modes (RX and TX)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The RF core has two active states, RX and TX.

 - The ``CMD_PROP_TX`` and ``CMD_PROP_TX_ADV`` commands set the radio in TX
   sending a packet(s) placed in the packet (or TX) queue the command points to.
 - The ``CMD_TX_TEST`` sets the radio in TX and a carrier wave (CW) or a 16 bit
   Tx word is sent continuously until the ``endTrigger`` or an abort command is
   issued.
 - The ``CMD_PROP_RX`` and ``CMD_PROP_RX_ADV`` commands set the the radio in Rx
   to receive a packet. The command exits Rx when the ``endTrigger`` is reached
   or a packet is received (optional).
 - The |CMD_PROP_CS| command sets the radio in RX to check if the RSSI is above
   a threshold or if a preamble is detected (Preamble Quality Threshold, PQT).
 - The ``CMD_PROP_RX_SNIFF`` and ``CMD_PROP_RX_ADV_SNIFF`` set the radio in Rx
   and combines the |CMD_PROP_CS| with normal packet reception.
 - The ``CMD_RX_TEST`` sets the radio in RX for test purposes.

The ``CMD_PROP_RADIO_SETUP`` and ``CMD_FS`` commands have to be issued before
sending one of the commands above to start and calibrate the voltage controlled
oscillator (VCO)/ phase locked loop (PLL), turn on the needed clocks, do
patching and to configure the radio.

The radio commands are described in section 23 in the |TRM|. Some information
can also be found in the description of the :ref:`chapter_rf_core` .

19.5 Wake On Radio (WOR)
~~~~~~~~~~~~~~~~~~~~~~~~
Wake On Radio is shown in the example ``rfWakeOnRadioRx``. This example uses
the ``CMD_PROP_RX_SNIFF`` command.

19.6 Timing
~~~~~~~~~~~
The MCU timing is given in "Timing and Switching Characteristics" section in the device datasheet. The time to turn on the
radio code and go either to RX or TX or TX <-> RX is not fixed. Part of the time
is related to software and therefore the time will be dependent on how many and
which patches are used. To get an accurate number the timing should be measured
with the software intended to run on the device. The signal routing intended to
control an external LNA or PA could be used to measure the timing (see
:ref:`rf_signal_routing`).

19.7 RX Termination Timer
~~~~~~~~~~~~~~~~~~~~~~~~~
The ``CMD_PROP_RX`` and ``CMD_PROP_RX_ADV`` have ``endTime`` as a parameter.
:ref:`sec_rf_command_triggers` gives an overview over the possible triggers.

20 Data FIFO
------------
Data queues are used for transferring packets from the RF core to the main CPU
and vice versa. For documentation, see:

 - The software examples in the SDK
 - :doc:`Data Queues </rf-core/data-queues>`.
 - The "Data Queue Usage" in the Radio chapter in |TRM|.

21 Frequency Programming
------------------------
The RF frequency needs to be given as input to two commands:

``CMD_PROP_RADIO_DIV_SETUP``:

 - centerFreq: Center frequency of the band.

``CMD_FS``: Sets up the frequency synthesizer, described in the "Radio core HAL" sub chapter in |TRM|.

The frequency is given in two parts:
 - frequency: Given in MHz
 - fractFreq: Fractional part of the frequency

If the frequency given in the ``CMD_FS`` command is different from the frequency
given in the ``CMD_PROP_RADIO_DIV_SETUP`` command some parameters parameters
will have been calculated with a relative error of up to: (freq - centerFreq)/ centerFreq.
Deviation is one of the parameters that will be scaled with this factor. If this
error is acceptable it is possible to do frequency hopping in the 863 MHz - 870
MHz band by setting the center frequency in the middle of the band, 867 MHz,
using ``CMD_PROP_RADIO_DIV_SETUP`` once and the ``CMD_FS`` to set the frequencies
when hopping.

`SmartRF Studio`_ can be used to calculate the frequency word.

22 Voltage-Controlled Oscillator (VCO)
--------------------------------------
The ``CMD_FS`` command starts and calibrate the VCO. On |PROPRFDEVICE| a ``CMD_FS``
has to be run for every frequency. It is not possible to pre-calibrate each
channel.

23 Voltage Regulators
---------------------
As with the CC1101, the |PROPRFDEVICE| contains internal regulators that are invisible
for customers.

The battery voltage on |PROPRFDEVICE| is called VDDS (allowed level 1.8 V to 3.8 V).
The output of the global low-dropout regulator (LDO)/ internal DCDC converter is
called VDDR. When the DCDC is in use the VDDR net should not be connected to
anything else than the external components shown in the reference designs. The
Power Supply System is described in more detail in 1.3.13 in the |TRM|.

Note that on |PROPRFDEVICE| it is possible to run different DIO segments on different
voltages; see 11.10.2 Digital Input/ Output Power Domains in the |TRM|.

24 Output Power Programming
---------------------------
The wanted output power is set in ``CMD_PROP_RADIO_DIV_SETUP.txPower``. Max
output power is dependent on the setting in :ref:`ccfg-migration`.

Most PAs have temperature dependent output power. On |PROPRFDEVICE| it is possible to
compensate for the temperature dependency and get an output power that is close
to independent of temperature. The txPower settings found in SmartRF Studio
contain the temperature compensation. This compensation is only valid for boards
that follow our reference design closely. If a custom board does not follow the
reference design the output power will be different and the temperature
compensation coefficients have to be calculated for the custom board. See
the description under CMD_SET_TX_POWER in the |TRM| for equations.

.. only:: sdk_targets_cc13x0

	For OOK the output power is set by :ref:`rf_proprietary_overrides`.

	Example: To set 13.0 dBm::

		HW_REG_OVERRIDE(0x6098,0x7000)


	+-----------------+-----------------------------+
	| Override        | Output power @ 25 Degree C  |
	+=================+=============================+
	| 0x6098,0x7200   |    14.0                     |
	+-----------------+-----------------------------+
	| 0x6098,0x7100   |    13.4                     |
	+-----------------+-----------------------------+
	| 0x6098,0x7000   |    13.0                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6F00   |    11.5                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6E00   |     9.5                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6D00   |     7.5                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6C00   |     5.2                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6B00   |     3.6                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6A00   |     1.4                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6900   |    -1.8                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6800   |    -7.2                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6700   |    -8.9                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6600   |   -10.8                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6500   |   -13.0                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6400   |   -15.7                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6300   |   -19.0                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6200   |   -22.8                     |
	+-----------------+-----------------------------+
	| 0x6098,0x6100   |   -27.3                     |
	+-----------------+-----------------------------+

	The numbers are an indication of which output power to expect when
	CCFG_FORCE_VDDR_HH=1.

25 Shaping and PA Ramping
-------------------------
When using (G)FSK PA ramping is included in the examples.

26 General Purpose / Test Output Control Pins
---------------------------------------------
 - :doc:`Signal routing </rf-core/signal-routing>` describes how to get some
   internal signal available on external pins.
 - :doc:`Packet format </proprietary-rf/packet-format-debugging>` contains some
   more information on how to use of the internal signals to debug packet
   formats.

27 Asynchronous and Synchronous Serial Operation
------------------------------------------------
An asynchronous signal (MCE_GPO1) is available in RX, see
:ref:`rf_signal_routing`. This signal is the sign of the instantaneous
frequency. This signal is used as input to further data processing and therefore
measuring PER will give better sensitivity compared to looking at the
asynchronous output.

It is only possible to get one signal from the RF core. It is therefore not
possible to generate a clock at the same time as getting the data out.

For Tx it is not possible to apply an external bit stream to |PROPRFDEVICE| to be sent
on the air. By using the TX buffer and the ``CMD_PROP_TX``/ ``CMD_PROP_TX_ADV``
commands it is possible to generate the data wanted to send. It is not possible
to turn off preamble (minimum 1 bit) and sync (minimum 8 bit). If the protocol
is not using a sync word the sync word can be set equal to the first 8 bit of
the payload.

28.2 Frequency Hopping and Multi-Channel Systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The 15.4 Stack shows how frequency hopping can be implemented. On |PROPRFDEVICE| a
``CMD_FS`` has to be run for every frequency. It is not possible to
pre-calibrate each channel.

28.3 Wide-band Modulation when not Using Spread Spectrum
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
An application note will be released to cover this.

28.4 Wireless MBUS
~~~~~~~~~~~~~~~~~~
CC13x0 and CC13x2 have full support for C, T and S mode. Download and documentation is
available at `Wireless M-Bus Protocol Software <http://www.ti.com/tool/WMBUS>`_.

28.7 Battery Operated Systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
|PROPRFDEVICE| is designed to be used in battery operated system with very low standby
current and low active current. The drivers ensure that the chip is in the state
that gives lowest power consumption at any given time.

28.8 Increasing Range
~~~~~~~~~~~~~~~~~~~~~
For increased range (better sensitivity and higher output power), |PROPRFDEVICE| can
be used together with CC1190 (`CC1190 Datasheet`_). See `Using CC1190 Front End With CC13xx Under EN300220 <http://www.ti.com/lit/pdf/swra542>`_
and `Using CC1190 Front End With CC13xx Under FCC 15.247 <http://www.ti.com/lit/pdf/swra517>`_.

29 Configuration Registers
--------------------------
On CC1101 writing/ reading registers are required to operate the chip. On
|PROPRFDEVICE| the control of the radio core is done by using drivers and APIs.
Therefore no description is given of registers on |PROPRFDEVICE|.

