.. _create_vs_construct:

Creating vs. Constructing
-------------------------
Most TI-RTOS modules commonly have ``_create()`` and ``_construct()`` APIs to
initialize primitive instances. The main **runtime** differences between the
two APIs are memory allocation and error handling.

**Create** APIs perform a memory allocation from the default TI-RTOS heap
before initialization. As a result, the application *must* check the return
value for a valid handle before continuing.

.. _create-example-listing:
.. code-block:: c
    :linenos:
    :caption: Creating a Semaphore
    :emphasize-lines: 5, 7

    Semaphore_Handle sem;
    Semaphore_Params semParams;

    Semaphore_Params_init(&semParams);
    sem = Semaphore_create(0, &semParams, NULL); /* Memory allocated in here */

    if (sem == NULL) /* Check if the handle is valid */
    {
        System_abort("Semaphore could not be created");
    }

**Construct** APIs are given a data structure with which to store the
instance's variables. As the memory has been pre-allocated for the instance,
error checking may not be required after constructing.

.. _construct-example-listing:
.. code-block:: c
    :linenos:
    :caption: Constructing a Semaphore
    :emphasize-lines: 3, 6

    Semaphore_Handle sem;
    Semaphore_Params semParams;
    Semaphore_Struct structSem; /* Memory allocated at build time */

    Semaphore_Params_init(&semParams);
    Semaphore_construct(&structSem, 0, &semParams);

    /* It's optional to store the handle */
    sem = Semaphore_handle(&structSem);
