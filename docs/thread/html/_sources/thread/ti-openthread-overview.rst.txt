.. _sec-tiop-overview:

TI-OpenThread Overview
======================

This section describes the architecture of a TI-OpenThread application at a
high level and the architecture of the OpenThread stack itself. Also, the
different system configurations which are supported by TI-OpenThread are
described.


.. _sec-tiop-app-arch:

Application Architecture
------------------------

A TI-OpenThread application is split into two major contexts: the user
application and the OpenThread stack. Both the user application and the
OpenThread stack executes in separate :term:`RTOS` tasks, and the user
application consists of one or more tasks. :numref:`fig-tiop-app-arch`
provides an architectural overview of a generic TI-OpenThread application.

.. _fig-tiop-app-arch:
.. figure:: /thread/resources/img-tiop-application-architecture.svg
    :align: center
    :width: 60%

    Architecture overview of a TI-OpenThread application.

The OpenThread stack task instantiates an OpenThread stack instance and does
basic setup of the stack primitives. The OpenThread stack manages a queue of
tasks to be run called tasklets. The primary objective of the stack task is to
process these queued tasklets. The stack task also processes the TI-OpenThread
platform-specific drivers, which is the adaptation layer between the
OpenThread stack and |TI_DRIVERS_API|.

|TI_DRIVERS_API|

The OpenThread stack is designed and developed for a single-threaded
environment; this was done so by the OpenThread developers for the sake of
simplicity and ease of testing. Therefore, the OpenThread stack assumes there
is implicit mutually exclusive access to its data structures. However, in a
multi-threaded environment such as :ref:`TI-RTOS7 <sec-tirtos-overview>`, this
assumption doesn't hold anymore. That is why a recursive mutex has been put in
place in order to ensure coherent access to the OpenThread APIs by both the
user application tasks and the OpenThread stack task.


.. _sec-memory-management-openthread-system-stack:

System Stack
^^^^^^^^^^^^

Besides the user application and the OpenThread stack contexts, there is one
other context to consider. As described in :ref:`TI-RTOS7
<sec-tirtos-threading-modules>`, each task has its own runtime stack for
context switching. However, in |TIRTOS| a separate runtime stack, the system
stack, is used to run ``main()``, :term:`HWIs <HWI>`, and :term:`SWIs <SWI>`.

The system stack is allocated at the high end of the RAM memory region, and
the size of the stack is configured in the application's linker file.


.. _sec-tiop-stack-arch:

OpenThread Stack Architecture
-----------------------------

The OpenThread stack is an open-source implementation of the Thread
specification, and is implemented in C++ with C-bindings for the OpenThread
API. The implementation is written in portable C++03 and C99. OpenThread is a
platform-agnostic stack, and makes no assumptions on the underlying platform.
That means OpenThread can run in both bare-metal environments and on fully
fledged OSes.

OpenThread is a monolithic stack designed and developed for a single-threaded
environment. The stack dispatches work into lightweight tasks called tasklets,
which are segments of code written in a non-blocking fashion. The stack
manages a queue of pending tasklets to be run, which are processed by the
underlying stack task context.

Please refer to the `OpenThread Platforms`_ section for more information about
the OpenThread platform in general, or refer to the `OpenThread GitHub`_ for
the full source code.

.. _fig-openthread-architecture:
.. figure:: /thread/resources/fig-tiop-stack-architecture.png
    :align: center
    :alt: OpenThread stack architecture
    :width: 60%
    :target: https://openthread.io/platforms

    OpenThread stack architecture.
    Source: https://openthread.io/platforms


.. _sec-tiop-platform-config:

Platform Configurations
-----------------------

TI-OpenThread supports both system-on-chip (:term:`SoC`) and network
co-processor (:term:`NCP`) architectural configurations.


Single-Chip, Thread-Only (SoC)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Both the application and the OpenThread stack run on the |DEVICE| as a true
single-chip solution. This configuration is the most cost-effective solution
and provides the best low-power performance, and is therefore most commonly
used for end devices.

.. ditaa::
    :--no-shadows:
    :--no-separation:
    :align: center
    :width: 30%

    +-----------------------------+
    |   CC13xx/CC26xx SimpleLink  |
    |         Wireless MCU   cFFF |
    | +---------------------------+
    | |  User Application         |
    | |                      cC00 |
    | +---------------------------+
    | |  OpenThread Stack         |
    | |                      c0BC |
    | +---------------------------+
    | |  RTOS and Drivers         |
    | |                      cAAA |
    +-+---------------------------+


Network Co-Processor (NCP)
^^^^^^^^^^^^^^^^^^^^^^^^^^

The OpenThread stack runs on the |DEVICE| while the application is executed on
a separate external host processor. The host processor communicates with the
NCP device via a serial interface, such as UART or SPI, over the `Spinel
Protocol`_.

The NCP configuration is useful for applications that must add wireless
connectivity or peripheral applications, which execute on a host processor
without the requirement to implement the complexities associated with a
wireless networking protocol. In these cases, the application can be developed
externally on a host processor while running Thread on the NCP device, which
provides ease of development and quickly adds Thread support and wireless
connectivity to existing products.

For more information, refer to :ref:`sec-tiop-ncp-interface`.

.. ditaa::
    :--no-shadows:
    :--no-separation:
    :align: center
    :width: 30%

    +-----------------------------+
    |        Host Processor       |
    |                        cFFF |
    | +---------------------------+
    | |  User Application         |
    | |                      cC00 |
    | +---------------------------+
    | |  Third Party IPv6         |
    | |                      cC00 |
    | +---------------------------+
    | |  Spinel                   |
    | |                      c0BC |
    +-+---------------------------+
        ^
        | Serial Interface
        V
    +-----------------------------+
    |   CC13xx/CC26xx SimpleLink  |
    |         Wireless MCU   cFFF |
    | +---------------------------+
    | |  Spinel                   |
    | |                      c0BC |
    | +---------------------------+
    | |  OpenThread NCP           |
    | |                      c0BC |
    | +---------------------------+
    | |  RTOS and Drivers         |
    | |                      cAAA |
    +-+---------------------------+

