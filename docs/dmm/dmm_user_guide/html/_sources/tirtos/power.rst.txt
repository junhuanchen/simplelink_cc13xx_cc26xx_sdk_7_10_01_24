
.. _sec-rtos-power-management:

Power Management
----------------

All power-management functionality is handled by the TI power driver and
are used by the peripheral drivers (e.g. UART, SPI, I2C, etc..). Applications
can prevent, if they choose, the |DEVICE| from entering low power modes by
setting a power constraint.

By default, all the examples in |SDK| will put the |DEVICE| in standby mode if 
there is no task running.

.. ifconfig:: device == 'cc13xx_cc26xx'
   
   This is achieved by configuring the TI power driver and the kernel to do so,
   as shown in the following step.

   #. As configured via SysConfig, you can find the Idle functions defined inside
      ``TI-RTOS`` |rarr| ``Core Kernel`` |rarr| ``Idle``.

      By doing this, the |TIRTOS| kernel will call Power_idleFunc whenever no task
      is running.

   #. ``Power_idleFunc`` takes in policyFxn and policyFxn is defined using
      SysConfig tool :numref:`tirtos_sysconfig_power_policy`. By default, TI sets
      the ``PowerCCxxxx_standbyPolicy`` as policyFxn. 
      ``Power_idleFunc`` is defined in ``{SDK_INSTALL_DIR}\source\ti\drivers\power\PowerCCxxxx.c`` and
      ``PowerCCxxxx_standbyPolicy`` can be found in ``{SDK_INSTALL_DIR}\kernel\tirtos7\packages\ti\dpl\PowerCCxxxx_tirtos.c``

      .. _tirtos_sysconfig_power_policy:
      .. figure:: resources/tirtos_sysconfig_power_policy.png
         :align: center

         Configure Power Policy for Idle Function.

   #. In the SysConfig generated files, you will find the following example in 
      ``ti_drivers_config.c.``

      .. code-block:: c

         const PowerCC26X2_Config PowerCC26X2_config = {
            .enablePolicy             = true,
            .policyInitFxn            = NULL,
            .policyFxn                = PowerCC26XX_standbyPolicy,
            .calibrateFxn             = PowerCC26XX_calibrate,
            .calibrateRCOSC_LF        = true,
            .calibrateRCOSC_HF        = true,
            .enableTCXOFxn            = NULL
         };

More information on power-management functionality, see |POWER_MANAGEMENT_UG|.
These APIs are required only when using a custom driver.

.. ifconfig:: doctarget in ['ble2', 'ble3', 'ble5']

    With |STACK| applications, the power constraint is set in ``main()`` by
    defining the ``POWER_SAVING`` preprocessor symbol. When defined,
    enabled, the device enters and exits sleep as required for |STACK| events,
    peripheral events, application timers, and so forth. When undefined, the
    device stays awake.

    Also see `Measuring Bluetooth Smart Power Consumption <https://ti.com/lit/swra478>`_
    for steps to analyze the system power consumption and battery life.
