<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="dmm__scheduler_8h" kind="file" language="C++">
    <compoundname>dmm_scheduler.h</compoundname>
    <includes local="yes">stdint.h</includes>
    <includes local="no">ti/drivers/rf/RF.h</includes>
    <includes local="no">ti/sysbios/knl/Task.h</includes>
    <includes refid="dmm__policy_8h" local="yes">dmm_policy.h</includes>
    <includedby refid="dmm__rfmap_8h" local="no">source/ti/dmm/dmm_rfmap.h</includedby>
    <incdepgraph>
      <node id="20">
        <label>stdint.h</label>
      </node>
      <node id="19">
        <label>source/ti/dmm/dmm_scheduler.h</label>
        <link refid="dmm__scheduler_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>dmm_policy.h</label>
        <link refid="dmm__policy_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ti/drivers/rf/RF.h</label>
      </node>
      <node id="22">
        <label>ti/sysbios/knl/Task.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="24">
        <label>source/ti/dmm/dmm_scheduler.h</label>
        <link refid="dmm__scheduler_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>source/ti/dmm/dmm_rfmap.h</label>
        <link refid="dmm__rfmap_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structDMMSch__Params" prot="public">DMMSch_Params</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="define" id="dmm__scheduler_8h_1a1a251bb09ec11ba57b4ced3fd6cd0bc1" prot="public" static="no">
        <name>xDMM_DEBUG_LOGGING</name>
        <briefdescription>
<para>DMM Debug Logging. </para>        </briefdescription>
        <detaileddescription>
<para><anchor id="dmm__scheduler_8h_1DMM_dbgLog"/> Debugging for internal use only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="91" column="9" bodyfile="source/ti/dmm/dmm_scheduler.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmm__scheduler_8h_1ae5e1238304bd61d80432b7d160e6eb90" prot="public" static="no">
        <name>DMM_dbgLog0</name>
        <param><defname>str</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="102" column="10" bodyfile="source/ti/dmm/dmm_scheduler.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmm__scheduler_8h_1a95ded0b3ad348295a8e85a9e36ee2193" prot="public" static="no">
        <name>DMM_dbgLog1</name>
        <param><defname>str</defname></param>
        <param><defname>a0</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="103" column="9" bodyfile="source/ti/dmm/dmm_scheduler.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmm__scheduler_8h_1a994b236cc3817376e8cd7371b61f1501" prot="public" static="no">
        <name>DMM_dbgLog2</name>
        <param><defname>str</defname></param>
        <param><defname>a0</defname></param>
        <param><defname>a1</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="104" column="9" bodyfile="source/ti/dmm/dmm_scheduler.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmm__scheduler_8h_1a3e0d12ef7469eb92b4665b58caef435c" prot="public" static="no">
        <name>DMM_dbgLog3</name>
        <param><defname>str</defname></param>
        <param><defname>a0</defname></param>
        <param><defname>a1</defname></param>
        <param><defname>a2</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="105" column="9" bodyfile="source/ti/dmm/dmm_scheduler.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmm__scheduler_8h_1ae270217459856076d35f52e423f09dec" prot="public" static="no">
        <name>DMM_dbgLog4</name>
        <param><defname>str</defname></param>
        <param><defname>a0</defname></param>
        <param><defname>a1</defname></param>
        <param><defname>a2</defname></param>
        <param><defname>a3</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="106" column="9" bodyfile="source/ti/dmm/dmm_scheduler.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmm__scheduler_8h_1a8ee04d4aecbaffa2cad0e7f1f659e9bc" prot="public" static="no">
        <name>DMM_dbgLog5</name>
        <param><defname>str</defname></param>
        <param><defname>a0</defname></param>
        <param><defname>a1</defname></param>
        <param><defname>a2</defname></param>
        <param><defname>a3</defname></param>
        <param><defname>a4</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="107" column="9" bodyfile="source/ti/dmm/dmm_scheduler.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="dmm__scheduler_8h_1ab50c78b4424b3db43891281578d08ed1" prot="public" static="no">
        <name>CONFLICT_FLUSH_ALL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Define to flush all commands. </para>        </briefdescription>
        <detaileddescription>
<para>Default option to flush all commands for a specific client for a conflict </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="135" column="9" bodyfile="source/ti/dmm/dmm_scheduler.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebef" prot="public" static="no">
        <name>DMM_ConflictStatus</name>
        <enumvalue id="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebefafab3905862da9b5fc90e450e9067cfc6" prot="public">
          <name>DMM_NoConflict</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>No conflict in commands. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebefa6b4fb04650718cdc7cba61c745dd70aa" prot="public">
          <name>DMM_ConflictWithPrev</name>
          <briefdescription>
<para>There is a conflict with the previous command. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebefa4fb473b63e72792f0f5b73c52cf31964" prot="public">
          <name>DMM_ConflictWithNext</name>
          <briefdescription>
<para>There is a conflict with the next command. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebefae457e86e617743fe3cb40b6e7382511e" prot="public">
          <name>DMM_ConfictWithBoth</name>
          <briefdescription>
<para>There is a conflict with both previous and next commands. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>DMM Conflict struct DMM Conflict Status. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="123" column="1" bodyfile="source/ti/dmm/dmm_scheduler.h" bodystart="122" bodyend="128"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dmm__scheduler_8h_1ab859531c7cd71e8bdfca0bb07226d7a2" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DMMSch_PreemptionCb) (DMMPolicy_StackRole stackRolePreempted)</definition>
        <argsstring>)(DMMPolicy_StackRole stackRolePreempted)</argsstring>
        <name>DMMSch_PreemptionCb</name>
        <briefdescription>
<para>Defines the preemption callback. </para>        </briefdescription>
        <detaileddescription>
<para>The function is invoked when a preemption occurs in DMM Scheduler.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stackRolePreempted</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack role for command was preempted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="144" column="1" bodyfile="source/ti/dmm/dmm_scheduler.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dmm__scheduler_8h_1a8fb89967829d38ab19ffabcfc36eed8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMMSch_Params_init</definition>
        <argsstring>(DMMSch_Params *params)</argsstring>
        <name>DMMSch_Params_init</name>
        <param>
          <type><ref refid="structDMMSch__Params" kindref="compound">DMMSch_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the <ref refid="structDMMSch__Params" kindref="compound">DMMSch_Params</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structDMMSch__Params" kindref="compound">DMMSch_Params</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Any initialized struct fields with invalid values must be further initialized by the caller before calling <ref refid="dmm__scheduler_8h_1ad53b1679ba0e2557222075ceffa0c8ed" kindref="member">DMMSch_open()</ref>.</para></simplesect>
Defaults values are:<itemizedlist>
<listitem><para>invalid <ref refid="structDMMSch__Params_1a695b4f16387359e84063f6fc82e68ceb" kindref="member">DMMSch_Params::stackRoles</ref></para></listitem><listitem><para>NULL <ref refid="structDMMSch__Params_1a037365501869c63066d9f780ff82a3e5" kindref="member">DMMSch_Params::indexTable</ref> </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1a8b759869efad3b4428ba1cbd5a31a2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMMSch_init</definition>
        <argsstring>(void)</argsstring>
        <name>DMMSch_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function that initializes the DMMSch module. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1aa1a967bdc4b0a614834392971f21f530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMMSch_registerPreemptionCb</definition>
        <argsstring>(DMMSch_PreemptionCb dmmSchPreemptionCb)</argsstring>
        <name>DMMSch_registerPreemptionCb</name>
        <param>
          <type><ref refid="dmm__scheduler_8h_1ab859531c7cd71e8bdfca0bb07226d7a2" kindref="member">DMMSch_PreemptionCb</ref></type>
          <declname>dmmSchPreemptionCb</declname>
        </param>
        <briefdescription>
<para>allows policy manager to register a callback on command preemption </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dmmSchPreemptionCb</parametername>
</parameternamelist>
<parameterdescription>
<para>callback to register </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1ad53b1679ba0e2557222075ceffa0c8ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMMSch_open</definition>
        <argsstring>(DMMSch_Params *params)</argsstring>
        <name>DMMSch_open</name>
        <param>
          <type><ref refid="structDMMSch__Params" kindref="compound">DMMSch_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Open the DMMSch module. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to initialized <ref refid="structDMMSch__Params" kindref="compound">DMMSch_Params</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1a1628a99f53b1b2431cadfd83cd1b9823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMMSch_registerClient</definition>
        <argsstring>(Task_Handle *pTaskHndl, DMMPolicy_StackRole StackRole)</argsstring>
        <name>DMMSch_registerClient</name>
        <param>
          <type>Task_Handle *</type>
          <declname>pTaskHndl</declname>
        </param>
        <param>
          <type><ref refid="dmm__policy_8h_1a9b3ff96be7e4b8668995e1359f44789f" kindref="member">DMMPolicy_StackRole</ref></type>
          <declname>StackRole</declname>
        </param>
        <briefdescription>
<para>Register an DMM Scheduler client. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pTaskHndl</parametername>
</parameternamelist>
<parameterdescription>
<para>RTOS Thread handle that the stack is running in, used to map the RF Client handle to a stack role</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StackRole</parametername>
</parameternamelist>
<parameterdescription>
<para>stack role associated with Task handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1af9d12f9aa1b47a5a3fb396fd731e5a07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RF_Handle</type>
        <definition>RF_Handle DMMSch_rfOpen</definition>
        <argsstring>(RF_Object *pObj, RF_Mode *pRfMode, RF_RadioSetup *pOpSetup, RF_Params *params)</argsstring>
        <name>DMMSch_rfOpen</name>
        <param>
          <type>RF_Object *</type>
          <declname>pObj</declname>
        </param>
        <param>
          <type>RF_Mode *</type>
          <declname>pRfMode</declname>
        </param>
        <param>
          <type>RF_RadioSetup *</type>
          <declname>pOpSetup</declname>
        </param>
        <param>
          <type>RF_Params *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Intercepts calls from a stack to RF_postCmd (re-mapped to DMMSch_rfOpen), The DMMSch module uses this to tie. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pObj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to RF Object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pRfMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to RF Mode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pOpSetup</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Radio Setup </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to RF params</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle to DMMSch RF instance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1ab1a1402d5be04f038553f4b8971daaed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RF_CmdHandle</type>
        <definition>RF_CmdHandle DMMSch_rfPostCmd</definition>
        <argsstring>(RF_Handle h, RF_Op *pOp, RF_Priority ePri, RF_Callback pCb, RF_EventMask bmEvent)</argsstring>
        <name>DMMSch_rfPostCmd</name>
        <param>
          <type>RF_Handle</type>
          <declname>h</declname>
        </param>
        <param>
          <type>RF_Op *</type>
          <declname>pOp</declname>
        </param>
        <param>
          <type>RF_Priority</type>
          <declname>ePri</declname>
        </param>
        <param>
          <type>RF_Callback</type>
          <declname>pCb</declname>
        </param>
        <param>
          <type>RF_EventMask</type>
          <declname>bmEvent</declname>
        </param>
        <briefdescription>
<para>Handles calls from a stack to RF_postCmd (re-mapped to DMMSch_postCmd), adjusts timing as necessary and schedules then accordingly with RF_scheduleCmd. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>RF_pendCmd(), RF_runCmd(), RF_scheduleCmd(), RF_RF_cancelCmd(), RF_flushCmd(), RF_getCmdOp()</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver handle previously returned by RF_open() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RF operation command. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePri</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority of this RF command (used for arbitration in multi-client systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function called during command execution and upon completion. If RF_postCmd() fails, no callback is made. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of events that will trigger the callback or that can be pended on. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the RF command. Return value of RF_ALLOC_ERROR indicates error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1a4c9e8e73743fd34f577419b3ec20a56d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RF_CmdHandle</type>
        <definition>RF_CmdHandle DMMSch_rfScheduleCmd</definition>
        <argsstring>(RF_Handle h, RF_Op *pOp, RF_ScheduleCmdParams *pSchParams, RF_Callback pCb, RF_EventMask bmEvent)</argsstring>
        <name>DMMSch_rfScheduleCmd</name>
        <param>
          <type>RF_Handle</type>
          <declname>h</declname>
        </param>
        <param>
          <type>RF_Op *</type>
          <declname>pOp</declname>
        </param>
        <param>
          <type>RF_ScheduleCmdParams *</type>
          <declname>pSchParams</declname>
        </param>
        <param>
          <type>RF_Callback</type>
          <declname>pCb</declname>
        </param>
        <param>
          <type>RF_EventMask</type>
          <declname>bmEvent</declname>
        </param>
        <briefdescription>
<para>Handles calls from a stack to RF_scheduleCmd (re-mapped to DMMSch_scheduleCmd), adjusts timing as necessary and schedules then accordingly with RF_scheduleCmd. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by RF_open() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RF_Op. Must normally be in persistent and writeable memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pSchParams</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the schedule command parameter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function called upon command completion (and some other events). If RF_scheduleCmd() fails no callback is made </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of events that will trigger the callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the RF command. Return value of RF_ALLOC_ERROR indicates error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1a093aeaf3232d19ec4e204d24bb39c49d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RF_EventMask</type>
        <definition>RF_EventMask DMMSch_rfRunCmd</definition>
        <argsstring>(RF_Handle h, RF_Op *pOp, RF_Priority ePri, RF_Callback pCb, RF_EventMask bmEvent)</argsstring>
        <name>DMMSch_rfRunCmd</name>
        <param>
          <type>RF_Handle</type>
          <declname>h</declname>
        </param>
        <param>
          <type>RF_Op *</type>
          <declname>pOp</declname>
        </param>
        <param>
          <type>RF_Priority</type>
          <declname>ePri</declname>
        </param>
        <param>
          <type>RF_Callback</type>
          <declname>pCb</declname>
        </param>
        <param>
          <type>RF_EventMask</type>
          <declname>bmEvent</declname>
        </param>
        <briefdescription>
<para>Handles calls from a stack to RF_runCmd (re-mapped to DMMSch_runCmd), adjusts timing as necessary and schedules then accordingly with RF_scheduleCmd. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver handle previously returned by RF_open() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RF operation command. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePri</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority of this RF command (used for arbitration in multi-client systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function called during command execution and upon completion. If RF_runCmd() fails, no callback is made. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of events that will trigger the callback or that can be pended on. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The relevant termination event. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1a208b337e52fcc3a69e7c9123cc6b00a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RF_EventMask</type>
        <definition>RF_EventMask DMMSch_rfRunScheduleCmd</definition>
        <argsstring>(RF_Handle h, RF_Op *pOp, RF_ScheduleCmdParams *pSchParams, RF_Callback pCb, RF_EventMask bmEvent)</argsstring>
        <name>DMMSch_rfRunScheduleCmd</name>
        <param>
          <type>RF_Handle</type>
          <declname>h</declname>
        </param>
        <param>
          <type>RF_Op *</type>
          <declname>pOp</declname>
        </param>
        <param>
          <type>RF_ScheduleCmdParams *</type>
          <declname>pSchParams</declname>
        </param>
        <param>
          <type>RF_Callback</type>
          <declname>pCb</declname>
        </param>
        <param>
          <type>RF_EventMask</type>
          <declname>bmEvent</declname>
        </param>
        <briefdescription>
<para>Handles calls from a stack to RF_runScheduleCmd (re-mapped to DMMSch_runScheduleCmd), adjusts timing as necessary and schedules then accordingly with RF_scheduleCmd. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by RF_open() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RF_Op. Must normally be in persistent and writeable memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pSchParams</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the schedule command parameter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function called upon command completion (and some other events). If RF_runScheduleCmd() fails, no callback is made. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of events that will trigger the callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The relevant command completed event. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1abce9f0c869b26c108c182427346685ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RF_Stat</type>
        <definition>RF_Stat DMMSch_rfCancelCmd</definition>
        <argsstring>(RF_Handle h, RF_CmdHandle ch, uint8_t mode)</argsstring>
        <name>DMMSch_rfCancelCmd</name>
        <param>
          <type>RF_Handle</type>
          <declname>h</declname>
        </param>
        <param>
          <type>RF_CmdHandle</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Abort/stop/cancel single command in command queue. </para>        </briefdescription>
        <detaileddescription>
<para>If command is running, aborts/stops it and posts callback for the aborted/stopped command. <linebreak/>
 If command has not yet run, cancels it it and posts callback for the cancelled command. <linebreak/>
 If command has already run or been aborted/stopped/cancelled, has no effect.<linebreak/>
 If RF_cancelCmd is called from a Swi context with same or higher priority than RF Driver Swi, when the RF core is powered OFF -&gt; the cancel callback will be delayed until the next power-up cycle.<linebreak/>
</para><para><simplesect kind="note"><para>Calling context : Task/SWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by RF_open() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Command handle previously returned by RF_postCmd(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>1: Stop gracefully, 0: abort abruptly </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RF_Stat indicates if command was successfully completed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1a57e881f2a1d91452777e9a9597ab71f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RF_Stat</type>
        <definition>RF_Stat DMMSch_rfFlushCmd</definition>
        <argsstring>(RF_Handle h, RF_CmdHandle ch, uint8_t mode)</argsstring>
        <name>DMMSch_rfFlushCmd</name>
        <param>
          <type>RF_Handle</type>
          <declname>h</declname>
        </param>
        <param>
          <type>RF_CmdHandle</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Abort/stop/cancel command and any subsequent commands in command queue. </para>        </briefdescription>
        <detaileddescription>
<para>If command is running, aborts/stops it and then cancels all later commands in queue.<linebreak/>
 If command has not yet run, cancels it and all later commands in queue.<linebreak/>
 If command has already run or been aborted/stopped/cancelled, has no effect.<linebreak/>
 The callbacks for all cancelled commands are issued in chronological order.<linebreak/>
 If RF_flushCmd is called from a Swi context with same or higher priority than RF Driver Swi, when the RF core is powered OFF -&gt; the cancel callback will be delayed until the next power-up cycle.<linebreak/>
</para><para><simplesect kind="note"><para>Calling context : Task/SWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by RF_open() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Command handle previously returned by RF_postCmd(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>1: Stop gracefully, 0: abort abruptly </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RF_Stat indicates if command was successfully completed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1aec66d7055e1df822bc91e7dfc53d707f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RF_Stat</type>
        <definition>RF_Stat DMMSch_rfRunImmediateCmd</definition>
        <argsstring>(RF_Handle h, uint32_t *pCmdStruct)</argsstring>
        <name>DMMSch_rfRunImmediateCmd</name>
        <param>
          <type>RF_Handle</type>
          <declname>h</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pCmdStruct</declname>
        </param>
        <briefdescription>
<para>Send any Immediate command. <linebreak/>
 </para>        </briefdescription>
        <detaileddescription>
<para>Immediate Command is send to RDBELL, if radio is active and the RF_Handle points to the current client. <linebreak/>
 In other appropriate RF_Stat values are returned. <linebreak/>
</para><para><simplesect kind="note"><para>Calling context : Task/SWI/HWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by RF_open() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCmdStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the immediate command structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RF_Stat indicates if command was successfully completed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1a15e233ac5222b453b88585b3980e170c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RF_Stat</type>
        <definition>RF_Stat DMMSch_rfRunDirectCmd</definition>
        <argsstring>(RF_Handle h, uint32_t cmd)</argsstring>
        <name>DMMSch_rfRunDirectCmd</name>
        <param>
          <type>RF_Handle</type>
          <declname>h</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Send any Direct command. <linebreak/>
 </para>        </briefdescription>
        <detaileddescription>
<para>Direct Command value is send to RDBELL immediately, if radio is active and the RF_Handle point to the current client. <linebreak/>
 In other appropriate RF_Stat values are returned. <linebreak/>
</para><para><simplesect kind="note"><para>Calling context : Task/SWI/HWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by RF_open() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Direct command value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RF_Stat indicates if command was successfully completed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1abab3e42436dde7fa66bb1c36ee551b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DMMSch_setBlockModeOn</definition>
        <argsstring>(DMMPolicy_StackRole stackRole)</argsstring>
        <name>DMMSch_setBlockModeOn</name>
        <param>
          <type><ref refid="dmm__policy_8h_1a9b3ff96be7e4b8668995e1359f44789f" kindref="member">DMMPolicy_StackRole</ref></type>
          <declname>stackRole</declname>
        </param>
        <briefdescription>
<para>Turn on Block mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stackRole</parametername>
</parameternamelist>
<parameterdescription>
<para>stack role associated with Task handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true: success, false: the stack role cannot be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1a2ce84a1f78a8d694cf513b5381bfb67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DMMSch_setBlockModeOff</definition>
        <argsstring>(DMMPolicy_StackRole stackRole)</argsstring>
        <name>DMMSch_setBlockModeOff</name>
        <param>
          <type><ref refid="dmm__policy_8h_1a9b3ff96be7e4b8668995e1359f44789f" kindref="member">DMMPolicy_StackRole</ref></type>
          <declname>stackRole</declname>
        </param>
        <briefdescription>
<para>Turn off Block mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stackRole</parametername>
</parameternamelist>
<parameterdescription>
<para>stack role associated with Task handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true: success, false: the stack role cannot be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1a751843ed42028b4c2f95a67f06b073d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DMMSch_getBlockModeStatus</definition>
        <argsstring>(DMMPolicy_StackRole stackRole)</argsstring>
        <name>DMMSch_getBlockModeStatus</name>
        <param>
          <type><ref refid="dmm__policy_8h_1a9b3ff96be7e4b8668995e1359f44789f" kindref="member">DMMPolicy_StackRole</ref></type>
          <declname>stackRole</declname>
        </param>
        <briefdescription>
<para>Get Block mode status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stackRole</parametername>
</parameternamelist>
<parameterdescription>
<para>stack role associated with Task handle </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true: Block Mode is On, False: Block Mode is Off </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmm__scheduler_8h_1a8d53a24dd1e98e6c248bf5aae1d0c84c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RF_Stat</type>
        <definition>RF_Stat DMMSch_rfRequestAccess</definition>
        <argsstring>(RF_Handle h, RF_AccessParams *pParams)</argsstring>
        <name>DMMSch_rfRequestAccess</name>
        <param>
          <type>RF_Handle</type>
          <declname>h</declname>
        </param>
        <param>
          <type>RF_AccessParams *</type>
          <declname>pParams</declname>
        </param>
        <briefdescription>
<para>Request access RF API that should not be used in DMM <linebreak/>
 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/dmm/dmm_scheduler.h" line="353" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>DMM Scheduler. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para>DMM enables devices to run multiple wireless protocol stacks concurrently. The DMMSch module enables concurrent operation of multiple stacks with minimized conflicts so that it does not cause significant performance degradation. The DMMSch uses Application Level, Stack Level information, and Global Priority Table (GPT) when scheduling a command. Stack Level information (provided by stack) is embedded in each RF command and it includes:<itemizedlist>
<listitem><para>Start Type, Start Time, AllowDelay, Priority, Activity, etc. Application Level information (provided by User via the Policy Table) includes:</para></listitem><listitem><para>Application State Name, Weight, AppliedActivity, Pause, etc. Global Priority Table (GPT)</para></listitem><listitem><para>GPT defines relative priorities of the two stacks The DMMSch uses Start Type, Start Time, and AllowDelay (Stack Level Information) when scheduling a RF command and tries to avoid a conflict by delaying the command if allowed. When a command conflicts with another (during scheduling or execution), The DMMSch selects one command over the other based on the final priority of two commands as below: Final Priority = GPT (Stack level priority) + weight (Application Level)</para></listitem></itemizedlist>
</para><para><heading level="1">DMMSch API</heading>
</para><para>To use the DMMSch module to schedule a stack&apos;s RF commands, the application calls the following APIs:<itemizedlist>
<listitem><para><ref refid="dmm__scheduler_8h_1a8b759869efad3b4428ba1cbd5a31a2be" kindref="member">DMMSch_init()</ref>: Initialize the DMMSch module/task.</para></listitem><listitem><para><ref refid="dmm__scheduler_8h_1a8fb89967829d38ab19ffabcfc36eed8b" kindref="member">DMMSch_Params_init()</ref>: Initialize a <ref refid="structDMMSch__Params" kindref="compound">DMMSch_Params</ref> structure with default values. Then change the parameters from non-default values as needed.</para></listitem><listitem><para><ref refid="dmm__scheduler_8h_1ad53b1679ba0e2557222075ceffa0c8ed" kindref="member">DMMSch_open()</ref>: Open an instance of the DMMSch module, passing the initialized parameters.</para></listitem><listitem><para>Stack A application - <ref refid="dmm__scheduler_8h_1a1628a99f53b1b2431cadfd83cd1b9823" kindref="member">DMMSch_registerClient()</ref>: Passes Task_Handle and StackRole so DMMSch can map the Task_Handle to the stack role</para></listitem><listitem><para>Stack A application - RF_open() -&gt; <ref refid="dmm__scheduler_8h_1af9d12f9aa1b47a5a3fb396fd731e5a07" kindref="member">DMMSch_rfOpen()</ref>: DMMSch overwrites the RF_Mode and rf patches for multi-mode operation, maps RF Handle to the stack ID, assigns phySwitchingTime for DMM operation. From this point, Task_Handle, StackRole, and Stack ID are all related.</para></listitem><listitem><para>Stack B application - <ref refid="dmm__scheduler_8h_1a1628a99f53b1b2431cadfd83cd1b9823" kindref="member">DMMSch_registerClient()</ref>: Passes Task_Handle and StackRole so DMMSch can map the Task_Handle to the stack role</para></listitem><listitem><para>Stack B application - RF_open() -&gt; <ref refid="dmm__scheduler_8h_1af9d12f9aa1b47a5a3fb396fd731e5a07" kindref="member">DMMSch_rfOpen()</ref>: DMMSch overwrites the RF_Mode and rf patches for multi-mode operation, maps RF Handle to the stack ID, assigns phySwitchingTime for DMM operation. From this point, Task_Handle, StackRole, and Stack ID are all related.</para></listitem><listitem><para>Stack A application - RF_scheduleCmd() -&gt; <ref refid="dmm__scheduler_8h_1a4c9e8e73743fd34f577419b3ec20a56d" kindref="member">DMMSch_rfScheduleCmd()</ref>: DMMSch adjusted timing based on policy</para></listitem><listitem><para>Stack B application - RF_scheduleCmd() -&gt; <ref refid="dmm__scheduler_8h_1a4c9e8e73743fd34f577419b3ec20a56d" kindref="member">DMMSch_rfScheduleCmd()</ref>: DMMSch adjusted timing based on policy </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>@file<sp/>dmm_scheduler.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>@brief<sp/>DMM<sp/>Scheduler</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>Group:<sp/>WCS<sp/>LPC</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>$Target<sp/>Device:<sp/>DEVICES<sp/>$</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>******************************************************************************</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>$License:<sp/>TI_TEXT<sp/>2019<sp/>$</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>******************************************************************************</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>$Release<sp/>Name:<sp/>PACKAGE<sp/>NAME<sp/>$</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>$Release<sp/>Date:<sp/>PACKAGE<sp/>RELEASE<sp/>DATE<sp/>$</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>dmm_scheduler.h</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>DMM<sp/>Scheduler</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/>DMM<sp/>enables<sp/>devices<sp/>to<sp/>run<sp/>multiple<sp/>wireless<sp/>protocol<sp/>stacks<sp/>concurrently.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>DMMSch<sp/>module<sp/>enables<sp/>concurrent<sp/>operation<sp/>of<sp/>multiple<sp/>stacks<sp/>with<sp/>minimized<sp/>conflicts</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/>so<sp/>that<sp/>it<sp/>does<sp/>not<sp/>cause<sp/>significant<sp/>performance<sp/>degradation.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>DMMSch<sp/>uses<sp/>Application<sp/>Level,<sp/>Stack<sp/>Level<sp/>information,<sp/>and<sp/>Global<sp/>Priority<sp/>Table<sp/>(GPT)<sp/>when<sp/>scheduling<sp/>a<sp/>command.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/>Stack<sp/>Level<sp/>information<sp/>(provided<sp/>by<sp/>stack)<sp/>is<sp/>embedded<sp/>in<sp/>each<sp/>RF<sp/>command<sp/>and<sp/>it<sp/>includes:</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Start<sp/>Type,<sp/>Start<sp/>Time,<sp/>AllowDelay,<sp/>Priority,<sp/>Activity,<sp/>etc.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/>Application<sp/>Level<sp/>information<sp/>(provided<sp/>by<sp/>User<sp/>via<sp/>the<sp/>Policy<sp/>Table)<sp/>includes:</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Application<sp/>State<sp/>Name,<sp/>Weight,<sp/>AppliedActivity,<sp/>Pause,<sp/>etc.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/>Global<sp/>Priority<sp/>Table<sp/>(GPT)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>GPT<sp/>defines<sp/>relative<sp/>priorities<sp/>of<sp/>the<sp/>two<sp/>stacks</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>DMMSch<sp/>uses<sp/>Start<sp/>Type,<sp/>Start<sp/>Time,<sp/>and<sp/>AllowDelay<sp/>(Stack<sp/>Level<sp/>Information)<sp/>when<sp/>scheduling<sp/>a<sp/>RF<sp/>command</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>tries<sp/>to<sp/>avoid<sp/>a<sp/>conflict<sp/>by<sp/>delaying<sp/>the<sp/>command<sp/>if<sp/>allowed.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>When<sp/>a<sp/>command<sp/>conflicts<sp/>with<sp/>another<sp/>(during<sp/>scheduling<sp/>or<sp/>execution),</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>DMMSch<sp/>selects<sp/>one<sp/>command<sp/>over<sp/>the<sp/>other<sp/>based<sp/>on<sp/>the<sp/>final<sp/>priority<sp/>of<sp/>two<sp/>commands<sp/>as<sp/>below:</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>Final<sp/>Priority<sp/>=<sp/>GPT<sp/>(Stack<sp/>level<sp/>priority)<sp/>+<sp/><sp/>weight<sp/>(Application<sp/>Level)</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>DMMSch<sp/>API<sp/>#</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>use<sp/>the<sp/>DMMSch<sp/>module<sp/>to<sp/>schedule<sp/>a<sp/>stack&apos;s<sp/>RF<sp/>commands,<sp/>the<sp/>application</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>calls<sp/>the<sp/>following<sp/>APIs:</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>DMMSch_init():<sp/>Initialize<sp/>the<sp/>DMMSch<sp/>module/task.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>DMMSch_Params_init():<sp/><sp/>Initialize<sp/>a<sp/>DMMSch_Params<sp/>structure</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>default<sp/>values.<sp/><sp/>Then<sp/>change<sp/>the<sp/>parameters<sp/>from<sp/>non-default</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>as<sp/>needed.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>DMMSch_open():<sp/><sp/>Open<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>DMMSch<sp/>module,</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>passing<sp/>the<sp/>initialized<sp/>parameters.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Stack<sp/>A<sp/>application<sp/>-<sp/>DMMSch_registerClient():<sp/>Passes<sp/>Task_Handle<sp/>and<sp/>StackRole<sp/>so</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DMMSch<sp/>can<sp/>map<sp/>the<sp/>Task_Handle<sp/>to<sp/>the<sp/>stack<sp/>role</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Stack<sp/>A<sp/>application<sp/>-<sp/>RF_open()<sp/>-&gt;<sp/>DMMSch_rfOpen():<sp/>DMMSch<sp/>overwrites<sp/>the<sp/>RF_Mode<sp/>and</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rf<sp/>patches<sp/>for<sp/>multi-mode<sp/>operation,<sp/>maps<sp/>RF<sp/>Handle<sp/>to<sp/>the<sp/>stack<sp/>ID,</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assigns<sp/>phySwitchingTime<sp/>for<sp/>DMM<sp/>operation.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>From<sp/>this<sp/>point,<sp/>Task_Handle,<sp/>StackRole,<sp/>and<sp/>Stack<sp/>ID<sp/>are<sp/>all<sp/>related.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Stack<sp/>B<sp/>application<sp/>-<sp/>DMMSch_registerClient():<sp/>Passes<sp/>Task_Handle<sp/>and<sp/>StackRole<sp/>so</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DMMSch<sp/>can<sp/>map<sp/>the<sp/>Task_Handle<sp/>to<sp/>the<sp/>stack<sp/>role</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Stack<sp/>B<sp/>application<sp/>-<sp/>RF_open()<sp/>-&gt;<sp/>DMMSch_rfOpen():<sp/>DMMSch<sp/>overwrites<sp/>the<sp/>RF_Mode<sp/>and</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rf<sp/>patches<sp/>for<sp/>multi-mode<sp/>operation,<sp/>maps<sp/>RF<sp/>Handle<sp/>to<sp/>the<sp/>stack<sp/>ID,</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assigns<sp/>phySwitchingTime<sp/>for<sp/>DMM<sp/>operation.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>From<sp/>this<sp/>point,<sp/>Task_Handle,<sp/>StackRole,<sp/>and<sp/>Stack<sp/>ID<sp/>are<sp/>all<sp/>related.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Stack<sp/>A<sp/>application<sp/>-<sp/>RF_scheduleCmd()<sp/>-&gt;<sp/>DMMSch_rfScheduleCmd():<sp/>DMMSch<sp/>adjusted<sp/>timing<sp/>based<sp/>on<sp/>policy</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Stack<sp/>B<sp/>application<sp/>-<sp/>RF_scheduleCmd()<sp/>-&gt;<sp/>DMMSch_rfScheduleCmd():<sp/>DMMSch<sp/>adjusted<sp/>timing<sp/>based<sp/>on<sp/>policy</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DMMSch_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMMSch_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdint.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/rf/RF.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FREERTOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/sysbios/knl/Task.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;FreeRTOS.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;task.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dmm__policy_8h" kindref="compound">dmm_policy.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="dmm__scheduler_8h_1a1a251bb09ec11ba57b4ced3fd6cd0bc1" refkind="member"><highlight class="preprocessor">#define<sp/>xDMM_DEBUG_LOGGING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DMM_DEBUG_LOGGING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xdc/runtime/Log.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMM_dbgLog0(str)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_info0(str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMM_dbgLog1(str,<sp/>a0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_info1(str,<sp/>a0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMM_dbgLog2(str,<sp/>a0,<sp/>a1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_info2(str,<sp/>a0,<sp/>a1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMM_dbgLog3(str,<sp/>a0,<sp/>a1,<sp/>a2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_info3(str,<sp/>a0,<sp/>a1,<sp/>a2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMM_dbgLog4(str,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3)<sp/><sp/><sp/><sp/><sp/>Log_info4(str,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMM_dbgLog5(str,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3,<sp/>a4)<sp/>Log_info5(str,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3,<sp/>a4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMM_dbgLog0(str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMM_dbgLog1(str,<sp/>a0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMM_dbgLog2(str,<sp/>a0,<sp/>a1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMM_dbgLog3(str,<sp/>a0,<sp/>a1,<sp/>a2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMM_dbgLog4(str,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMM_dbgLog5(str,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3,<sp/>a4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="structDMMSch__Params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="115" refid="structDMMSch__Params_1a695b4f16387359e84063f6fc82e68ceb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dmm__policy_8h_1a9b3ff96be7e4b8668995e1359f44789f" kindref="member">DMMPolicy_StackRole</ref><sp/>stackRoles[<ref refid="dmm__policy_8h_1aa05d905b09e89a66fb3105e6f2cac989" kindref="member">DMMPOLICY_NUM_STACKS</ref>];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116" refid="structDMMSch__Params_1a037365501869c63066d9f780ff82a3e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDMMPolicy__StackCmdIndexTable" kindref="compound">DMMPolicy_StackCmdIndexTable</ref><sp/>*<ref refid="structDMMSch__Params_1a037365501869c63066d9f780ff82a3e5" kindref="member">indexTable</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}<sp/><ref refid="structDMMSch__Params" kindref="compound">DMMSch_Params</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebef" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124" refid="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebefafab3905862da9b5fc90e450e9067cfc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebefafab3905862da9b5fc90e450e9067cfc6" kindref="member">DMM_NoConflict</ref><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125" refid="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebefa6b4fb04650718cdc7cba61c745dd70aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebefa6b4fb04650718cdc7cba61c745dd70aa" kindref="member">DMM_ConflictWithPrev</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126" refid="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebefa4fb473b63e72792f0f5b73c52cf31964" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebefa4fb473b63e72792f0f5b73c52cf31964" kindref="member">DMM_ConflictWithNext</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127" refid="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebefae457e86e617743fe3cb40b6e7382511e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebefae457e86e617743fe3cb40b6e7382511e" kindref="member">DMM_ConfictWithBoth</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal">}<sp/><ref refid="dmm__scheduler_8h_1a94d985ecc9cf86da8f6ce5ae69b8ebef" kindref="member">DMM_ConflictStatus</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="dmm__scheduler_8h_1ab50c78b4424b3db43891281578d08ed1" refkind="member"><highlight class="preprocessor">#define<sp/>CONFLICT_FLUSH_ALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="dmm__scheduler_8h_1ab859531c7cd71e8bdfca0bb07226d7a2" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="dmm__scheduler_8h_1ab859531c7cd71e8bdfca0bb07226d7a2" kindref="member">DMMSch_PreemptionCb</ref>)(<ref refid="dmm__policy_8h_1a9b3ff96be7e4b8668995e1359f44789f" kindref="member">DMMPolicy_StackRole</ref><sp/>stackRolePreempted);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dmm__scheduler_8h_1a8fb89967829d38ab19ffabcfc36eed8b" kindref="member">DMMSch_Params_init</ref>(<ref refid="structDMMSch__Params" kindref="compound">DMMSch_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dmm__scheduler_8h_1a8b759869efad3b4428ba1cbd5a31a2be" kindref="member">DMMSch_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dmm__scheduler_8h_1aa1a967bdc4b0a614834392971f21f530" kindref="member">DMMSch_registerPreemptionCb</ref>(<ref refid="dmm__scheduler_8h_1ab859531c7cd71e8bdfca0bb07226d7a2" kindref="member">DMMSch_PreemptionCb</ref><sp/>dmmSchPreemptionCb);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dmm__scheduler_8h_1ad53b1679ba0e2557222075ceffa0c8ed" kindref="member">DMMSch_open</ref>(<ref refid="structDMMSch__Params" kindref="compound">DMMSch_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor">#ifndef<sp/>FREERTOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dmm__scheduler_8h_1a1628a99f53b1b2431cadfd83cd1b9823" kindref="member">DMMSch_registerClient</ref>(Task_Handle*<sp/>pTaskHndl,<sp/><ref refid="dmm__policy_8h_1a9b3ff96be7e4b8668995e1359f44789f" kindref="member">DMMPolicy_StackRole</ref><sp/>StackRole);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dmm__scheduler_8h_1a1628a99f53b1b2431cadfd83cd1b9823" kindref="member">DMMSch_registerClient</ref>(TaskHandle_t<sp/>pTaskHndl,<sp/><ref refid="dmm__policy_8h_1a9b3ff96be7e4b8668995e1359f44789f" kindref="member">DMMPolicy_StackRole</ref><sp/>StackRole);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Handle<sp/><ref refid="dmm__scheduler_8h_1af9d12f9aa1b47a5a3fb396fd731e5a07" kindref="member">DMMSch_rfOpen</ref>(RF_Object<sp/>*pObj,<sp/>RF_Mode<sp/>*pRfMode,<sp/>RF_RadioSetup<sp/>*pOpSetup,<sp/>RF_Params<sp/>*params);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_CmdHandle<sp/><ref refid="dmm__scheduler_8h_1ab1a1402d5be04f038553f4b8971daaed" kindref="member">DMMSch_rfPostCmd</ref>(RF_Handle<sp/>h,<sp/>RF_Op*<sp/>pOp,<sp/>RF_Priority<sp/>ePri,<sp/>RF_Callback<sp/>pCb,<sp/>RF_EventMask<sp/>bmEvent);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_CmdHandle<sp/><ref refid="dmm__scheduler_8h_1a4c9e8e73743fd34f577419b3ec20a56d" kindref="member">DMMSch_rfScheduleCmd</ref>(RF_Handle<sp/>h,<sp/>RF_Op*<sp/>pOp,<sp/>RF_ScheduleCmdParams<sp/>*pSchParams,<sp/>RF_Callback<sp/>pCb,<sp/>RF_EventMask<sp/>bmEvent);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_EventMask<sp/><ref refid="dmm__scheduler_8h_1a093aeaf3232d19ec4e204d24bb39c49d" kindref="member">DMMSch_rfRunCmd</ref>(RF_Handle<sp/>h,<sp/>RF_Op*<sp/>pOp,<sp/>RF_Priority<sp/>ePri,<sp/>RF_Callback<sp/>pCb,<sp/>RF_EventMask<sp/>bmEvent);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_EventMask<sp/><ref refid="dmm__scheduler_8h_1a208b337e52fcc3a69e7c9123cc6b00a8" kindref="member">DMMSch_rfRunScheduleCmd</ref>(RF_Handle<sp/>h,<sp/>RF_Op*<sp/>pOp,<sp/>RF_ScheduleCmdParams<sp/>*pSchParams,<sp/>RF_Callback<sp/>pCb,<sp/>RF_EventMask<sp/>bmEvent);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="dmm__scheduler_8h_1abce9f0c869b26c108c182427346685ef" kindref="member">DMMSch_rfCancelCmd</ref>(RF_Handle<sp/>h,<sp/>RF_CmdHandle<sp/>ch,<sp/>uint8_t<sp/>mode);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="dmm__scheduler_8h_1a57e881f2a1d91452777e9a9597ab71f0" kindref="member">DMMSch_rfFlushCmd</ref>(RF_Handle<sp/>h,<sp/>RF_CmdHandle<sp/>ch,<sp/>uint8_t<sp/>mode);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="dmm__scheduler_8h_1aec66d7055e1df822bc91e7dfc53d707f" kindref="member">DMMSch_rfRunImmediateCmd</ref>(RF_Handle<sp/>h,<sp/>uint32_t*<sp/>pCmdStruct);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="dmm__scheduler_8h_1a15e233ac5222b453b88585b3980e170c" kindref="member">DMMSch_rfRunDirectCmd</ref>(RF_Handle<sp/>h,<sp/>uint32_t<sp/>cmd);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dmm__scheduler_8h_1abab3e42436dde7fa66bb1c36ee551b74" kindref="member">DMMSch_setBlockModeOn</ref>(<ref refid="dmm__policy_8h_1a9b3ff96be7e4b8668995e1359f44789f" kindref="member">DMMPolicy_StackRole</ref><sp/>stackRole);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dmm__scheduler_8h_1a2ce84a1f78a8d694cf513b5381bfb67e" kindref="member">DMMSch_setBlockModeOff</ref>(<ref refid="dmm__policy_8h_1a9b3ff96be7e4b8668995e1359f44789f" kindref="member">DMMPolicy_StackRole</ref><sp/>stackRole);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dmm__scheduler_8h_1a751843ed42028b4c2f95a67f06b073d7" kindref="member">DMMSch_getBlockModeStatus</ref>(<ref refid="dmm__policy_8h_1a9b3ff96be7e4b8668995e1359f44789f" kindref="member">DMMPolicy_StackRole</ref><sp/>stackRole);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="dmm__scheduler_8h_1a8d53a24dd1e98e6c248bf5aae1d0c84c" kindref="member">DMMSch_rfRequestAccess</ref>(RF_Handle<sp/>h,<sp/>RF_AccessParams<sp/>*pParams);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DMMSch_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/dmm/dmm_scheduler.h"/>
  </compounddef>
</doxygen>
