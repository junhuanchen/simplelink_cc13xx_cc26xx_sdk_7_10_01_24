<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_ring_buf_8h" kind="file" language="C++">
    <compoundname>RingBuf.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdbool.h</includes>
    <includedby refid="_u_a_r_t2_8h" local="no">UART2.h</includedby>
    <incdepgraph>
      <node id="1228">
        <label>stdbool.h</label>
      </node>
      <node id="1226">
        <label>stdint.h</label>
      </node>
      <node id="1227">
        <label>stddef.h</label>
      </node>
      <node id="1225">
        <label>RingBuf.h</label>
        <link refid="_ring_buf_8h"/>
        <childnode refid="1226" relation="include">
        </childnode>
        <childnode refid="1227" relation="include">
        </childnode>
        <childnode refid="1228" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1231">
        <label>UART2CC26X2.h</label>
        <link refid="_u_a_r_t2_c_c26_x2_8h"/>
      </node>
      <node id="1233">
        <label>DisplayUart2.h</label>
        <link refid="_display_uart2_8h"/>
      </node>
      <node id="1230">
        <label>UART2.h</label>
        <link refid="_u_a_r_t2_8h"/>
        <childnode refid="1231" relation="include">
        </childnode>
        <childnode refid="1232" relation="include">
        </childnode>
        <childnode refid="1233" relation="include">
        </childnode>
      </node>
      <node id="1229">
        <label>RingBuf.h</label>
        <link refid="_ring_buf_8h"/>
        <childnode refid="1230" relation="include">
        </childnode>
      </node>
      <node id="1232">
        <label>UART2Support.h</label>
        <link refid="_u_a_r_t2_support_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_ring_buf___object" prot="public">RingBuf_Object</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" prot="public" static="no">
        <type>struct <ref refid="struct_ring_buf___object" kindref="compound">RingBuf_Object</ref> *</type>
        <definition>typedef  struct RingBuf_Object * RingBuf_Handle</definition>
        <argsstring></argsstring>
        <name>RingBuf_Handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="52" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_ring_buf_8h_1abadef81450098bc113f104e9adec83b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RingBuf_construct</definition>
        <argsstring>(RingBuf_Handle object, unsigned char *bufPtr, size_t bufSize)</argsstring>
        <name>RingBuf_construct</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>bufPtr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufSize</declname>
        </param>
        <briefdescription>
<para>Initialize circular buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer to be used for the circular buffer. The buffer is NOT stored in <ref refid="struct_ring_buf___object" kindref="compound">RingBuf_Object</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of bufPtr in number of unsigned chars. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1a80241c453bdc9bb1886c6fd5d7773f44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RingBuf_flush</definition>
        <argsstring>(RingBuf_Handle object)</argsstring>
        <name>RingBuf_flush</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Flush all the data from the buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1abb0526bc9c7e9a496e7a9fafc34e753e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RingBuf_get</definition>
        <argsstring>(RingBuf_Handle object, unsigned char *data)</argsstring>
        <name>RingBuf_get</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Get an unsigned char from the end of the circular buffer and remove it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an unsigned char to be filled with the data from the front of the circular buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars on the buffer after taking it out of the circular buffer. If it returns -1, the circular buffer was already empty and data is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1a1b2d83680c94a2f62d20f6d06b0d2f43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RingBuf_getConsume</definition>
        <argsstring>(RingBuf_Handle object, size_t size)</argsstring>
        <name>RingBuf_getConsume</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Advance the get index and decrement the buffer count. This function should normally be called from a context where HWI is disabled. For efficiency, it is incumbent on the caller to ensure mutual exclusion with the proper HWI lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of unsigned characters to advance the get index.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars that we were able to be advanced. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1ac06c00bf7da6408bf2f17802e16c32a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RingBuf_getCount</definition>
        <argsstring>(RingBuf_Handle object)</argsstring>
        <name>RingBuf_getCount</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Get the number of unsigned chars currently stored on the circular buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars on the circular buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1a0e764325ed5803e2dfa555b3e0a77e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RingBuf_getMaxCount</definition>
        <argsstring>(RingBuf_Handle object)</argsstring>
        <name>RingBuf_getMaxCount</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>A high-water mark indicating the largest number of unsigned chars stored on the circular buffer since it was constructed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Get the largest number of unsigned chars that were at one point in the circular buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1a663b5ba653c0134b9aef78581ced5a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RingBuf_getn</definition>
        <argsstring>(RingBuf_Handle object, unsigned char *data, size_t n)</argsstring>
        <name>RingBuf_getn</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Get one or more unsigned chars from the end of the circular buffer and remove them. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an unsigned char to be filled with the data from the front of the circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of unsigned chars to try and remove.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars successfully removed from the buffer and copied into <emphasis>data</emphasis>. May be 0 or less than <emphasis>n</emphasis>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1a79f9a7cf4069226a6a26c867bcfb1644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RingBuf_getPointer</definition>
        <argsstring>(RingBuf_Handle object, unsigned char **data)</argsstring>
        <name>RingBuf_getPointer</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Get a pointer reference to the next chunk of linear memory available for accessing data in the buffer. This function should normally be called from a context where HWI is disabled. For efficiency, it is incumbent on the caller to ensure mutual exclusion with the proper HWI lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a pointer to set for the memory location in the buffer where data can accessed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars in linear memory where data can be accessed, or 0 if it&apos;s empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1adfa531b7441b7fcb65b72adef7e830b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RingBuf_isFull</definition>
        <argsstring>(RingBuf_Handle object)</argsstring>
        <name>RingBuf_isFull</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Function to determine if the circular buffer is full or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if circular buffer is full, else false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1ac71f61b4218cdf81fc8ff30b8e9f1bce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RingBuf_peek</definition>
        <argsstring>(RingBuf_Handle object, unsigned char *data)</argsstring>
        <name>RingBuf_peek</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Get an unsigned char from the end of the circular buffer without removing it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an unsigned char to be filled with the data from the front of the circular buffer. This function does not remove the data from the circular buffer. Do not evaluate data if the count returned is equal to 0.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars on the circular buffer. If the number != 0, then data will contain the unsigned char at the end of the circular buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1a7f2d2d83515194f08fcc7901481b5c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RingBuf_put</definition>
        <argsstring>(RingBuf_Handle object, unsigned char data)</argsstring>
        <name>RingBuf_put</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Put an unsigned char into the end of the circular buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned char to be placed at the end of the circular buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars on the buffer after it was added, or -1 if it&apos;s already full. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1a4858a76ae3d64de0a5796c3a04c322f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RingBuf_putAdvance</definition>
        <argsstring>(RingBuf_Handle object, size_t size)</argsstring>
        <name>RingBuf_putAdvance</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Advance the committed put index and increment the buffer count. This function should normally be called from a context where HWI is disabled. For efficiency, it is incumbent on the caller to ensure mutual exclusion with the proper HWI lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of unsigned characters to commit to the put index.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars that we were able to be committed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1a48304c557277ea654e33e6489f5aeec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RingBuf_putn</definition>
        <argsstring>(RingBuf_Handle object, unsigned char *data, size_t n)</argsstring>
        <name>RingBuf_putn</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Put one or more unsigned chars into the end of the circular buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned chars to be placed at the end of the circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of unsigned chars to try and remove.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars placed into the buffer. May be 0 or less than <emphasis>n</emphasis>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1aa8ea47f976047da4bb166788e727a334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RingBuf_putPointer</definition>
        <argsstring>(RingBuf_Handle object, unsigned char **data)</argsstring>
        <name>RingBuf_putPointer</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Get a pointer reference to the next chunk of linear memory available for adding data to the buffer. This function should normally be called from a context where HWI is disabled. For efficiency, it is incumbent on the caller to ensure mutual exclusion with the proper HWI lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a pointer to set for the memory location in the buffer where more data can be added.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars available in linear memory where data can be added, or 0 if it&apos;s already full. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ring_buf_8h_1a4f7b5115e2edbdf40ccb4e8c99906835" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t RingBuf_space</definition>
        <argsstring>(RingBuf_Handle object)</argsstring>
        <name>RingBuf_space</name>
        <param>
          <type><ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref></type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Return the number of unsigned characters that the buffer has space for. This function should normally be called from a context where HWI is disabled. For efficiency, it is incumbent on the caller to ensure mutual exclusion with the proper HWI lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a RingBuf Object that contains the member variables to operate a circular buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of unsigned chars that the buffer has space for. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/RingBuf.h" line="262" column="1" bodyfile="source/ti/drivers/utils/RingBuf.h" bodystart="262" bodyend="265"/>
        <references refid="struct_ring_buf___object_1ae0c8cf16fcfb34570c11db5f5af7aaf0" compoundref="_ring_buf_8h" startline="48">RingBuf_Object::count</references>
        <references refid="struct_ring_buf___object_1ac7102de5f975cd743e9618625f6028c4" compoundref="_ring_buf_8h" startline="47">RingBuf_Object::length</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2020,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_utils_RingBuf__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_utils_RingBuf__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="struct_ring_buf___object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46" refid="struct_ring_buf___object_1a3aabec3f4cf04dbc4083548e830d8f5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="struct_ring_buf___object_1a3aabec3f4cf04dbc4083548e830d8f5e" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="47" refid="struct_ring_buf___object_1ac7102de5f975cd743e9618625f6028c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_ring_buf___object_1ac7102de5f975cd743e9618625f6028c4" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="48" refid="struct_ring_buf___object_1ae0c8cf16fcfb34570c11db5f5af7aaf0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_ring_buf___object_1ae0c8cf16fcfb34570c11db5f5af7aaf0" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="49" refid="struct_ring_buf___object_1a39b92dd09345c4799adf2de4920af5e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_ring_buf___object_1a39b92dd09345c4799adf2de4920af5e3" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="50" refid="struct_ring_buf___object_1ab792bbd6ff48d13ae09eedc33bb79289" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_ring_buf___object_1ab792bbd6ff48d13ae09eedc33bb79289" kindref="member">tail</ref>;</highlight></codeline>
<codeline lineno="51" refid="struct_ring_buf___object_1afdea48daa7a86ad212139842569b8a3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_ring_buf___object_1afdea48daa7a86ad212139842569b8a3f" kindref="member">maxCount</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}<sp/><ref refid="struct_ring_buf___object" kindref="compound">RingBuf_Object</ref>,<sp/>*<ref refid="_ring_buf_8h_1aa7a4c431179efc4a77b0d0ec140ca118" kindref="member">RingBuf_Handle</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1abadef81450098bc113f104e9adec83b1" kindref="member">RingBuf_construct</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bufPtr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufSize);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1a80241c453bdc9bb1886c6fd5d7773f44" kindref="member">RingBuf_flush</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1abb0526bc9c7e9a496e7a9fafc34e753e" kindref="member">RingBuf_get</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1a1b2d83680c94a2f62d20f6d06b0d2f43" kindref="member">RingBuf_getConsume</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1ac06c00bf7da6408bf2f17802e16c32a2" kindref="member">RingBuf_getCount</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1a0e764325ed5803e2dfa555b3e0a77e39" kindref="member">RingBuf_getMaxCount</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1a663b5ba653c0134b9aef78581ced5a59" kindref="member">RingBuf_getn</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1a79f9a7cf4069226a6a26c867bcfb1644" kindref="member">RingBuf_getPointer</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**data);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1adfa531b7441b7fcb65b72adef7e830b9" kindref="member">RingBuf_isFull</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1ac71f61b4218cdf81fc8ff30b8e9f1bce" kindref="member">RingBuf_peek</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1a7f2d2d83515194f08fcc7901481b5c62" kindref="member">RingBuf_put</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1a4858a76ae3d64de0a5796c3a04c322f7" kindref="member">RingBuf_putAdvance</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1a48304c557277ea654e33e6489f5aeec3" kindref="member">RingBuf_putn</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1aa8ea47f976047da4bb166788e727a334" kindref="member">RingBuf_putPointer</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**data);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="_ring_buf_8h_1a4f7b5115e2edbdf40ccb4e8c99906835" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_ring_buf_8h_1a4f7b5115e2edbdf40ccb4e8c99906835" kindref="member">RingBuf_space</ref>(RingBuf_Handle<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(object-&gt;<ref refid="struct_ring_buf___object_1ac7102de5f975cd743e9618625f6028c4" kindref="member">length</ref><sp/>-<sp/>object-&gt;<ref refid="struct_ring_buf___object_1ae0c8cf16fcfb34570c11db5f5af7aaf0" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_utils_RingBuf__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/utils/RingBuf.h"/>
  </compounddef>
</doxygen>
