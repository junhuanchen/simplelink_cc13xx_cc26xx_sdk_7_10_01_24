<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_p_d_m_c_c26_x_x_8h" kind="file" language="C++">
    <compoundname>PDMCC26XX.h</compoundname>
    <includes local="no">ti/drivers/dpl/HwiP.h</includes>
    <includes local="no">ti/drivers/dpl/SemaphoreP.h</includes>
    <includes refid="_power_8h" local="no">ti/drivers/Power.h</includes>
    <includes refid="_power_c_c26_x_x_8h" local="no">ti/drivers/power/PowerCC26XX.h</includes>
    <incdepgraph>
      <node id="1107">
        <label>stdbool.h</label>
      </node>
      <node id="1106">
        <label>stdint.h</label>
      </node>
      <node id="1103">
        <label>ti/drivers/dpl/SemaphoreP.h</label>
      </node>
      <node id="1108">
        <label>stddef.h</label>
      </node>
      <node id="1111">
        <label>ti/devices/DeviceFamily.h</label>
      </node>
      <node id="1102">
        <label>ti/drivers/dpl/HwiP.h</label>
      </node>
      <node id="1110">
        <label>ti/drivers/dpl/ClockP.h</label>
      </node>
      <node id="1104">
        <label>ti/drivers/Power.h</label>
        <link refid="_power_8h"/>
        <childnode refid="1105" relation="include">
        </childnode>
      </node>
      <node id="1105">
        <label>ti/drivers/utils/List.h</label>
        <link refid="_list_8h"/>
        <childnode refid="1106" relation="include">
        </childnode>
        <childnode refid="1107" relation="include">
        </childnode>
        <childnode refid="1108" relation="include">
        </childnode>
      </node>
      <node id="1109">
        <label>ti/drivers/power/PowerCC26XX.h</label>
        <link refid="_power_c_c26_x_x_8h"/>
        <childnode refid="1102" relation="include">
        </childnode>
        <childnode refid="1110" relation="include">
        </childnode>
        <childnode refid="1104" relation="include">
        </childnode>
        <childnode refid="1111" relation="include">
        </childnode>
      </node>
      <node id="1101">
        <label>PDMCC26XX.h</label>
        <link refid="_p_d_m_c_c26_x_x_8h"/>
        <childnode refid="1102" relation="include">
        </childnode>
        <childnode refid="1103" relation="include">
        </childnode>
        <childnode refid="1104" relation="include">
        </childnode>
        <childnode refid="1109" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_p_d_m_c_c26_x_x__meta_data" prot="public">PDMCC26XX_metaData</innerclass>
    <innerclass refid="struct_p_d_m_c_c26_x_x__pcm_buffer" prot="public">PDMCC26XX_pcmBuffer</innerclass>
    <innerclass refid="struct_p_d_m_c_c26_x_x___config" prot="public">PDMCC26XX_Config</innerclass>
    <innerclass refid="struct_p_d_m_c_c26_x_x___h_w_attrs" prot="public">PDMCC26XX_HWAttrs</innerclass>
    <innerclass refid="struct_p_d_m_c_c26_x_x___stream_notification" prot="public">PDMCC26XX_StreamNotification</innerclass>
    <innerclass refid="struct_p_d_m_c_c26_x_x___buffer_request" prot="public">PDMCC26XX_BufferRequest</innerclass>
    <innerclass refid="struct_p_d_m_c_c26_x_x___params" prot="public">PDMCC26XX_Params</innerclass>
    <innerclass refid="struct_p_d_m_c_c26_x_x___object" prot="public">PDMCC26XX_Object</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_p_d_m_c_c26_x_x_8h_1adc205204f69ea867c95b30efe1530746" prot="public" static="no">
        <name>PDM_TASK_STACK_SIZE</name>
        <initializer>850</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines TI-RTOS stack size allocation. It is a conservative estimate. Change this to save a few bytes of RAM on stack allocation. The stack usage is independent of the PCM return buffer size specified by the application. When using logging, increase this value. This value is also dependent on the malloc and free function implementations provided by the application as both are called from PDM task context. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="373" column="13" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_d_m_c_c26_x_x_8h_1a77f1de681b5b50d6e6db60818b5a481d" prot="public" static="no">
        <name>PCM_SAMPLE_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Uncompressed PCM sample size in bits <simplesect kind="note"><para>Internal use only since only 16 bits are supported </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="377" column="9" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_d_m_c_c26_x_x_8h_1a98722a106401368b0df3e68c19c7edd3" prot="public" static="no">
        <name>PCM_COMPRESSION_RATE</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compression rate if compression is enabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="380" column="9" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_d_m_c_c26_x_x_8h_1abfc314e1ae4cfbcb2e9bd114e1f1703d" prot="public" static="no">
        <name>MINIMUM_PDM_BUFFER_QUEUE_DEPTH</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Minimum number of PDM buffers required by the driver to safely use the I2S module </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="383" column="9" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_d_m_c_c26_x_x_8h_1ae553576c451c4277d4496b5fe7f26e24" prot="public" static="no">
        <name>PCM_METADATA_SIZE</name>
        <initializer>sizeof(<ref refid="struct_p_d_m_c_c26_x_x__meta_data" kindref="compound">PDMCC26XX_metaData</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PCM data metadata size. When a buffer is requested there will be metadata prepended. In other words the pointer returned points to the metadata header. Depending on the mode, this contains different information. The first byte is always an 8-bit sequence number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="389" column="9" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779" prot="public" static="no">
        <name>PDMCC26XX_Status</name>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a6541acf36472a5a4bae1e918532f5bab" prot="public">
          <name>PDMCC26XX_STREAM_IDLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Idle mode. Stream not started </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a7fbacf5e84041b2a8b635df5cf1789a6" prot="public">
          <name>PDMCC26XX_STREAM_BLOCK_READY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Buffer ready </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a3bb09525b04c787e27fa7ce2505ebcbe" prot="public">
          <name>PDMCC26XX_STREAM_BLOCK_READY_BUT_PDM_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Buffer ready, but the I2S module has had to drop data . </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779addbca577e199cd8cad66eb880d81896b" prot="public">
          <name>PDMCC26XX_STREAM_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The I2S module encountered a hardware error. Likely because the target address for the I2S DMA was NULL </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a57716d15faf09d4f066fe77f473de9db" prot="public">
          <name>PDMCC26XX_STREAM_STOPPING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A stop was requested and this is the last buffer to be produced. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a772c35528b1c577ee8702c064c37554f" prot="public">
          <name>PDMCC26XX_STREAM_STOPPED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unused </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779addce783eed694cb817cd67ae51d036d5" prot="public">
          <name>PDMCC26XX_STREAM_FAILED_TO_STOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Buffer ready </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Status codes that are set by the PDM driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="481" column="1" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="480" bodyend="493"/>
      </memberdef>
      <memberdef kind="enum" id="_p_d_m_c_c26_x_x_8h_1ac6ec7972a50a1ed1c12039047d3b2522" prot="public" static="no">
        <name>PDMCC26XX_PcmSampleRate</name>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1ac6ec7972a50a1ed1c12039047d3b2522a817f2eda95c722d7455bc796b6a2f51f" prot="public">
          <name>PDMCC26XX_PCM_SAMPLE_RATE_16K</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1ac6ec7972a50a1ed1c12039047d3b2522aba74658601fcf48e4fa9dff9bd70ce94" prot="public">
          <name>PDMCC26XX_PCM_SAMPLE_RATE_8K</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PCM output sample rates supported by the driver. </para>        </briefdescription>
        <detaileddescription>
<para>The driver will default to 16kHz output. Switching to 8kHz switches the signal processing chain used internally. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="502" column="1" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="501" bodyend="505"/>
      </memberdef>
      <memberdef kind="enum" id="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267f" prot="public" static="no">
        <name>PDMCC26XX_Gain</name>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267fad32df2e2c24bdb0d67c3ec63c0c46178" prot="public">
          <name>PDMCC26XX_GAIN_24</name>
          <initializer>= 1318</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>24dB gain </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267fa332b4d0aeb82669190f2b2bcfa9ea6c8" prot="public">
          <name>PDMCC26XX_GAIN_18</name>
          <initializer>= 660</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>18dB gain </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267fa5929463bec3b2bb2da1e240c8a3a2aad" prot="public">
          <name>PDMCC26XX_GAIN_12</name>
          <initializer>= 331</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>12dB gain. Default </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267faa10d346442b2427f47bd7939a0f0dc6a" prot="public">
          <name>PDMCC26XX_GAIN_6</name>
          <initializer>= 166</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>6dB gain </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267fa78540d7f8b49c98ee87afaaaba1f9c36" prot="public">
          <name>PDMCC26XX_GAIN_0</name>
          <initializer>= 83</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>0dB gain </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267faa4811cff958da5ec7ee700237beacb3b" prot="public">
          <name>PDMCC26XX_GAIN_END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal use only </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Predefined gain settings. </para>        </briefdescription>
        <detaileddescription>
<para>Gain is controlled by modifying the first coefficient of the PDM filter. Use these defines to set the correct gain setting in the default filter. This setting does not affect any non-default filters! All values are in dB. Default prefilter stages will add 12dB gain. PDM2PCM algorithm returns false if any of the samples decimated goes above 2^16 - 1, i.e. the sample clipped during decimation. This information can be used for automatic gain control. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="519" column="1" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="518" bodyend="526"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_p_d_m_c_c26_x_x_8h_1acce02978ce536ea3b98a673587a6e75c" prot="public" static="no">
        <type>void *(*</type>
        <definition>typedef void*(* PDMCC26XX_MallocFxn) (size_t memSize)</definition>
        <argsstring>)(size_t memSize)</argsstring>
        <name>PDMCC26XX_MallocFxn</name>
        <briefdescription>
<para>PDMCC26XX_MallocFxn is a function pointer for the malloc function to be used by the driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="415" column="1" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_d_m_c_c26_x_x_8h_1af95e29fbea1fadfb011e4ceaa36f1ab0" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PDMCC26XX_FreeFxn) (void *ptr, size_t memSize)</definition>
        <argsstring>)(void *ptr, size_t memSize)</argsstring>
        <name>PDMCC26XX_FreeFxn</name>
        <briefdescription>
<para>PDMCC26XX_FreeFxn is a function pointer for the free function to be used by the driver. This is needed for memory clean up, if something goes wrong. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="423" column="1" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_d_m_c_c26_x_x_8h_1a1af75b7f4ebc9bf2fa53b5193ac5ac18" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* PDMCC26XX_Pdm2PcmFxn) (const void *pdmInBuffer, uint32_t *decimationState, const int32_t *biquadCoefficients, int16_t *pcmOutBuffer)</definition>
        <argsstring>)(const void *pdmInBuffer, uint32_t *decimationState, const int32_t *biquadCoefficients, int16_t *pcmOutBuffer)</argsstring>
        <name>PDMCC26XX_Pdm2PcmFxn</name>
        <briefdescription>
<para>Function that converts PDM input buffer to PCM output. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdmInBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Input PDM buffer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decimationState</parametername>
</parameternamelist>
<parameterdescription>
<para>CIC decimator state</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>biquadCoefficients</parametername>
</parameternamelist>
<parameterdescription>
<para>Coefficient table for the n-stage biquad IIR filter</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcmOutBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Output PCM buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="436" column="1" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_d_m_c_c26_x_x_8h_1a94064c529b4e12aee73826c7105fea51" prot="public" static="no">
        <type><ref refid="struct_p_d_m_c_c26_x_x___config" kindref="compound">PDMCC26XX_Config</ref> *</type>
        <definition>typedef PDMCC26XX_Config* PDMCC26XX_Handle</definition>
        <argsstring></argsstring>
        <name>PDMCC26XX_Handle</name>
        <briefdescription>
<para>A handle that is returned from a <ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="475" column="1" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_d_m_c_c26_x_x_8h_1ab6fdee59a79029e938e3fbf0e446fa91" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PDMCC26XX_CallbackFxn) (PDMCC26XX_Handle handle, PDMCC26XX_StreamNotification *streamNotification)</definition>
        <argsstring>)(PDMCC26XX_Handle handle, PDMCC26XX_StreamNotification *streamNotification)</argsstring>
        <name>PDMCC26XX_CallbackFxn</name>
        <briefdescription>
<para>The definition of a callback function used when buffers are ready. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PDMCC26XX_Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>PDMCC26XX_Handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="544" column="1" bodyfile="source/ti/drivers/pdm/PDMCC26XX.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_p_d_m_c_c26_x_x_8h_1affba2052183dd56aa6315608a6ec2633" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_p_d_m_c_c26_x_x___config" kindref="compound">PDMCC26XX_Config</ref></type>
        <definition>const PDMCC26XX_Config PDMCC26XX_config[]</definition>
        <argsstring>[]</argsstring>
        <name>PDMCC26XX_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="struct_p_d_m_c_c26_x_x___config" kindref="compound">PDMCC26XX_Config</ref> struct defined in the board file </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="456" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_p_d_m_c_c26_x_x_8h_1a8347c3f56db0ad7c3f357f13be098cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PDMCC26XX_init</definition>
        <argsstring>(PDMCC26XX_Handle handle)</argsstring>
        <name>PDMCC26XX_init</name>
        <param>
          <type><ref refid="_p_d_m_c_c26_x_x_8h_1a94064c529b4e12aee73826c7105fea51" kindref="member">PDMCC26XX_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>PDM CC26XX initialization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_d_m_c_c26_x_x_8h_1a94064c529b4e12aee73826c7105fea51" kindref="member">PDMCC26XX_Handle</ref></type>
        <definition>PDMCC26XX_Handle PDMCC26XX_open</definition>
        <argsstring>(PDMCC26XX_Params *params)</argsstring>
        <name>PDMCC26XX_open</name>
        <param>
          <type><ref refid="struct_p_d_m_c_c26_x_x___params" kindref="compound">PDMCC26XX_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the CC26XX PDM peripheral specified by the particular handle. The parameter specifies which mode the PDM will operate. </para>        </briefdescription>
        <detaileddescription>
<para>The function will set a dependency on the PDM module, which in turn powers up the module and enables the clock. IOs are also allocated, however the PDM driver will not begin streaming audio until <ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref> is called.</para><para><simplesect kind="pre"><para>PDM controller has been initialized</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a parameter block. Will use default parameters if NULL</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A PDMCC26XX_Handle on success or a NULL on an error or if it has been already opened</para></simplesect>
<simplesect kind="see"><para><ref refid="_p_d_m_c_c26_x_x_8h_1afb9597d25d6b2e02f6903bf6652d4371" kindref="member">PDMCC26XX_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="675" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_d_m_c_c26_x_x_8h_1afb9597d25d6b2e02f6903bf6652d4371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PDMCC26XX_close</definition>
        <argsstring>(PDMCC26XX_Handle handle)</argsstring>
        <name>PDMCC26XX_close</name>
        <param>
          <type><ref refid="_p_d_m_c_c26_x_x_8h_1a94064c529b4e12aee73826c7105fea51" kindref="member">PDMCC26XX_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a given CC26XX PDM peripheral specified by the PDM handle. </para>        </briefdescription>
        <detaileddescription>
<para>Posts an event that shuts down the I2S hardware, frees all memory used by the driver on the heap, releases the pins back to the PIN driver, and releases the dependency on the corresponding power domain.</para><para><simplesect kind="pre"><para><ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref> has to be called first.</para></simplesect>
<simplesect kind="post"><para>The PDM task must be allowed to run to synchronously shut down the driver</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PDMCC26XX_Handle returned from <ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="692" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDMCC26XX_startStream</definition>
        <argsstring>(PDMCC26XX_Handle handle)</argsstring>
        <name>PDMCC26XX_startStream</name>
        <param>
          <type><ref refid="_p_d_m_c_c26_x_x_8h_1a94064c529b4e12aee73826c7105fea51" kindref="member">PDMCC26XX_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to start streaming PDM data. </para>        </briefdescription>
        <detaileddescription>
<para>Posts an event that tells the I2S hardware to start streaming and the PDM task to start processing incoming data.</para><para><simplesect kind="pre"><para><ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref> has to be called first.</para></simplesect>
<simplesect kind="pre"><para>The device must be deriving SCLK_HF from XOSC_HF or noise performance will be significantly degraded.</para></simplesect>
<simplesect kind="post"><para>The PDM task must be allowed to run (by e.g. pending on a semaphore in the application task) to process incoming PDM data from the I2S module.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PDM handle returned from <ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if transfer is successful and false if not</para></simplesect>
<simplesect kind="see"><para><ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref>, <ref refid="_p_d_m_c_c26_x_x_8h_1aebd3b158f38ba1489a56efe5b9a722d2" kindref="member">PDMCC26XX_stopStream()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="712" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_d_m_c_c26_x_x_8h_1aebd3b158f38ba1489a56efe5b9a722d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDMCC26XX_stopStream</definition>
        <argsstring>(PDMCC26XX_Handle handle)</argsstring>
        <name>PDMCC26XX_stopStream</name>
        <param>
          <type><ref refid="_p_d_m_c_c26_x_x_8h_1a94064c529b4e12aee73826c7105fea51" kindref="member">PDMCC26XX_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to stop streaming PDM data. </para>        </briefdescription>
        <detaileddescription>
<para>Blocks while the I2S module shuts down gracefully. Subsequently posts an event to let the PDM task process any remaining data.</para><para><simplesect kind="pre"><para><ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PDM handle returned from <ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if stream stopped successfully and false if not</para></simplesect>
<simplesect kind="post"><para>Process all available PCM buffers by calling <ref refid="_p_d_m_c_c26_x_x_8h_1a15a0017513c13ca244f7e3a0f5761e8d" kindref="member">PDMCC26XX_requestBuffer()</ref> until it returns false. Otherwise, the available PCM buffers will take up space on the heap until <ref refid="_p_d_m_c_c26_x_x_8h_1afb9597d25d6b2e02f6903bf6652d4371" kindref="member">PDMCC26XX_close()</ref> or <ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref> are called.</para></simplesect>
<simplesect kind="see"><para><ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref>, <ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="732" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_d_m_c_c26_x_x_8h_1a15a0017513c13ca244f7e3a0f5761e8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PDMCC26XX_requestBuffer</definition>
        <argsstring>(PDMCC26XX_Handle handle, PDMCC26XX_BufferRequest *bufferRequest)</argsstring>
        <name>PDMCC26XX_requestBuffer</name>
        <param>
          <type><ref refid="_p_d_m_c_c26_x_x_8h_1a94064c529b4e12aee73826c7105fea51" kindref="member">PDMCC26XX_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_p_d_m_c_c26_x_x___buffer_request" kindref="compound">PDMCC26XX_BufferRequest</ref> *</type>
          <declname>bufferRequest</declname>
        </param>
        <briefdescription>
<para>Function for requesting buffer. </para>        </briefdescription>
        <detaileddescription>
<para>PDMCC26XX_requestBuffer returns immediately even if no buffer is available. The caller is notified through events each time a buffer is available. However, more than one buffer may be available. Hence, the caller should request even without notification if the caller is ready to process.</para><para><simplesect kind="pre"><para><ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref> and <ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PDM handle returned from <ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*bufferRequest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_p_d_m_c_c26_x_x___buffer_request" kindref="compound">PDMCC26XX_BufferRequest</ref> struct</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if request is successful and false if not</para></simplesect>
<simplesect kind="see"><para><ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref>, <ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="752" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_d_m_c_c26_x_x_8h_1af8421d9a4381fc68e217650c426ba633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PDMCC26XX_Params_init</definition>
        <argsstring>(PDMCC26XX_Params *params)</argsstring>
        <name>PDMCC26XX_Params_init</name>
        <param>
          <type><ref refid="struct_p_d_m_c_c26_x_x___params" kindref="compound">PDMCC26XX_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pdm/PDMCC26XX.h" line="761" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PDM driver implementation for a CC26XX PDM controller. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para><verbatim>The PDM header file should be included in an application as follows:
</verbatim> <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/pdm/PDMCC26XX.h&gt;</highlight></codeline>
</programlisting></para><para><heading level="1">Overview</heading>
</para><para>This driver is written to be able to perform continuous audio streaming of PDM data from a microphone. It also controls one DIO to be able to turn on power to the microphone.</para><para>This PDM driver performs two operations that requires processing<itemizedlist>
<listitem><para>PDM to PCM conversion</para></listitem><listitem><para>PCM compression (optional)</para></listitem></itemizedlist>
</para><para>When producing 16kHz output, the driver is configured to process 256 bytes of PDM data provided by the I2S hardware module at a time, sampled at 1.024 Mbps. The PDM driver consequently receives such a buffer approximately every 2ms. A frame of <ref refid="struct_p_d_m_c_c26_x_x___params_1a05bff0a3c2ddbb3a49c2bc7a47a7fe24" kindref="member">PDMCC26XX_Params.retBufSizeInBytes</ref> PCM data bytes minus four metadata bytes is provided to the application after being filled by all or part of one or more 64 byte buffers of PCM data derived from the 256 bytes of PDM data. The resulting PCM frame provided to the application is a 16bit PCM signal sampled at 16kHz.</para><para>When providing 8kHz PCM output, the driver processes 512 bytes of PDM data at a time. At a sample rate of 1.024 Mbps, this yields a PDM buffer to process ever 4ms. These 512 bytes of PDM data are filtered and decimated to yield 64 bytes of PCM output.</para><para>The driver creates a separate task to run in.</para><para><simplesect kind="note"><para>The application must allow for the PDM driver task to run often enough to process the data received from I2S driver approximately every 2ms in 16kHz PCM output mode or 4ms in 8kHz PCM output mode. The amount of processing is approximately equal but the latency requirements differ.</para></simplesect>
The driver currently only samples on a single edge of the I2S clock.</para><para><heading level="1">General Behaviour</heading>
</para><para>Before using PDM on CC26XX:<itemizedlist>
<listitem><para>The PDM driver is initialized by calling <ref refid="_p_d_m_c_c26_x_x_8h_1a8347c3f56db0ad7c3f357f13be098cf2" kindref="member">PDMCC26XX_init()</ref>. This should be done in main before BIOS_start() is called.</para></listitem><listitem><para>The PDM system dependencies are set by calling <ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref>. The driver is also marked as taken. Prior to this the system should call <ref refid="_p_d_m_c_c26_x_x_8h_1a8347c3f56db0ad7c3f357f13be098cf2" kindref="member">PDMCC26XX_init()</ref>. The driver also automatically allocates the first <ref refid="struct_p_d_m_c_c26_x_x__pcm_buffer" kindref="compound">PDMCC26XX_pcmBuffer</ref> of the size specified by the application in <ref refid="struct_p_d_m_c_c26_x_x___params_1a05bff0a3c2ddbb3a49c2bc7a47a7fe24" kindref="member">PDMCC26XX_Params.retBufSizeInBytes</ref>. This call also reserves the pins for the microphone signal and power specified in the board file.</para></listitem><listitem><para>Do not start steaming data until the device is running off of the high frequency external oscilator (XOSC_HF). The XOSC_HF is required to generate a jitter-free I2S audio clock. When switching to XOSC_HF, several SCLK_HF clock cycles and thus audio clock cycles are missed. Both jitter and missing audio clock cycles causes severe degredation in audio noise performance! After booting, the device runs off of the high frequency RC oscillator (RCOSC_HF) by default. Set a dependency on the XOSC_HF to turn it on and switch to it when it is ready. Register a power notification for the XOSC_HF having switched. Wait until after this notification occurs to call <ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref>. When waking up from standby, the XOSC_HF will automatically be turned on and switched to if the dependency was set before going into standby. Again, only call <ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref> after the application was notified of the switch to XOSC_HF. <ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref> may be called before running off of XOSC_HF.</para></listitem></itemizedlist>
</para><para>While using PDM on CC26XX:<itemizedlist>
<listitem><para>When <ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref> is called, the driver allocates one PCM buffer on the heap and the I2S module tries to allocate enough memory for its PDM buffers.</para></listitem><listitem><para>When <ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref> is called, the I2S driver starts processing the pdm stream, the PDM driver resets the internal state of the decimation filter, sets the driver to drop the first MAX(PDM_DECIMATION_STARTUP_DELAY_IN_SAMPLES, <ref refid="struct_p_d_m_c_c26_x_x___params_1a1ffbb2852a48ff157c0f58df4dce4a3b" kindref="member">PDMCC26XX_Params.startupDelayWithClockInSamples</ref>), and resets the metaData (including the sequence number). The driver will keep allocating PDMCC26XX_pcmBuffers on the heap and keep them in a queue until they are requested by the application. From now on, callbacks are generated every time a buffer is ready; if callbacks are asked for.</para></listitem><listitem><para>Data is acquired by the application by calling <ref refid="_p_d_m_c_c26_x_x_8h_1a15a0017513c13ca244f7e3a0f5761e8d" kindref="member">PDMCC26XX_requestBuffer()</ref>. After processing the buffer, the application is responsible for freeing the memory allocated for the buffer in a timely manner.</para></listitem><listitem><para>The stream is stopped when <ref refid="_p_d_m_c_c26_x_x_8h_1aebd3b158f38ba1489a56efe5b9a722d2" kindref="member">PDMCC26XX_stopStream()</ref> is called. Note that this is a blocking call that will wait until the I2S hardware has gracefully shut down. This will take at most 4ms, unless an error occurs. Any PCM buffers remaining must be released by the application as usual. The system is allowed to enter standby again after <ref refid="_p_d_m_c_c26_x_x_8h_1aebd3b158f38ba1489a56efe5b9a722d2" kindref="member">PDMCC26XX_stopStream()</ref> is called.</para></listitem><listitem><para>The memory held by the I2S module is freed upon calling <ref refid="_p_d_m_c_c26_x_x_8h_1afb9597d25d6b2e02f6903bf6652d4371" kindref="member">PDMCC26XX_close()</ref>. Any completed PCM buffers must be processed and freed by the application.</para></listitem></itemizedlist>
</para><para>After PDM operation has ended:<itemizedlist>
<listitem><para>Release system dependencies and free up all memory on the heap allocated for the PDM driver by calling <ref refid="_p_d_m_c_c26_x_x_8h_1afb9597d25d6b2e02f6903bf6652d4371" kindref="member">PDMCC26XX_close()</ref>.</para></listitem></itemizedlist>
</para><para><heading level="1">Error Handling</heading>
</para><para>The application is notified of errors via the registered callback function.</para><para><heading level="2">Heap Full</heading>
</para><para>If the application fails to consume PCM buffers fast enough and the heap is full when driver tries to allocate a new buffer, the driver will drop all new incoming data until a buffer can be allocated to store it. Data is dropped one PCM data buffer at a time , even though it is streamed into the device and copied into the buffer in smaller chunks. This is done to keep the data expected in any buffer in sync with the sequence number of the buffer that keeps incrementing even when the buffer is dopped. The application may keep track of lost frames by comparing sequence numbers.</para><para>Hence, the PDM stream will never have a buffer overflow, but if the memory available in the heap is too low it may lose frames because because there is nowhere to put the incoming</para><para>If the heap frees up again and the PDM task runs, it will automatically resume normal operation again. The only application-observable difference is the incremented version number.</para><para><heading level="2">PDM Task Not Serviced In Time</heading>
</para><para>The application must permit the PDM task to run often enough that it can process a PDM buffer every 2ms on average. If the application requires a larger contiguous segment of processing time, the I2S hwi may run out of empty buffers to fill with new PDM data. When the I2S driver runs out of empty PDM buffers it will pop a buffer from the full buffer queue and overwrite its old data. The I2S driver notifies the PDM driver that it has dropped a PDM buffer. Once it runs again, the PDM driver will drop enough additional PCM samples such that the sequence numbers of the PCM buffers remain aligned with the data in the audio stream. The latency between when the PDM task was last serviced and when it must be serviced again to avoid losing data is specified by <ref refid="struct_p_d_m_c_c26_x_x___params_1a7866964e30e66983db76fb8eb8f20c31" kindref="member">PDMCC26XX_Params::pdmBufferQueueDepth</ref>. This permitted latency increases by 2ms or 4ms for each increment of pdmBufferQueueDepth.</para><para><heading level="2">PDMCC26XX_open Failing</heading>
</para><para><ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref> returns NULL and rolls back all prior parts of the initialisation if any part of the initialisation fails. The following can cause <ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref> to fail:<itemizedlist>
<listitem><para>The driver is already open</para></listitem><listitem><para>The heap is full when the application calls <ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref></para></listitem><listitem><para>The PIN driver could not allocate the requested pins for the PDM driver</para></listitem><listitem><para>The I2S driver failed to initialise</para></listitem></itemizedlist>
</para><para><heading level="2">PDMCC26XX_startStream Failing</heading>
</para><para><ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref> returns false if it fails. The following can cause <ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref> to fail:<itemizedlist>
<listitem><para>The driver is already streaming</para></listitem><listitem><para>The I2S driver could not successfully start reading the pdm stream</para></listitem><listitem><para>The I2S driver could not allocate enough memory for the specified number of PDM buffers</para></listitem></itemizedlist>
</para><para><heading level="2">PDMCC26XX_stopStream Failing</heading>
</para><para><ref refid="_p_d_m_c_c26_x_x_8h_1aebd3b158f38ba1489a56efe5b9a722d2" kindref="member">PDMCC26XX_stopStream()</ref> returns false if it fails. The following can cause <ref refid="_p_d_m_c_c26_x_x_8h_1aebd3b158f38ba1489a56efe5b9a722d2" kindref="member">PDMCC26XX_stopStream()</ref> to fail:<itemizedlist>
<listitem><para>The driver is not currently streaming</para></listitem></itemizedlist>
</para><para><heading level="1">Power Management</heading>
</para><para>The PDMCC26XX driver sets a power constraint while streaming to keep the device out of standby. When the stream has ended, the power constraint is released.</para><para>The following statements are valid:<itemizedlist>
<listitem><para>After <ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref>: the device is still allowed to enter standby.</para></listitem><listitem><para>During <ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref>: the device cannot enter standby.</para></listitem><listitem><para>After <ref refid="_p_d_m_c_c26_x_x_8h_1aebd3b158f38ba1489a56efe5b9a722d2" kindref="member">PDMCC26XX_stopStream()</ref> succeeds: the device can enter standby.</para></listitem><listitem><para>If <ref refid="_p_d_m_c_c26_x_x_8h_1afb9597d25d6b2e02f6903bf6652d4371" kindref="member">PDMCC26XX_close()</ref> is called: the device can enter standby.</para></listitem></itemizedlist>
</para><para><heading level="1">Standard Use Case</heading>
</para><para>The standard use case involves calling <ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open()</ref> once and calling <ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream()</ref> and <ref refid="_p_d_m_c_c26_x_x_8h_1aebd3b158f38ba1489a56efe5b9a722d2" kindref="member">PDMCC26XX_stopStream()</ref> to start and stop the stream as needed. <ref refid="_p_d_m_c_c26_x_x_8h_1afb9597d25d6b2e02f6903bf6652d4371" kindref="member">PDMCC26XX_close()</ref> is called when the PDM driver will no longer be needed again. In order for the PDM driver task to run, the application pends on a semaphore that is posted in the <ref refid="struct_p_d_m_c_c26_x_x___params_1ada480cae6ca7398efef4293350f92090" kindref="member">PDMCC26XX_Params::callbackFxn</ref>. In this example, the application requests 128 buffers. In a real application, the process of pending on a semaphore, requesting a buffer, and freeing it would be repeated as often as required by the use case before stopping the stream. <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>bufRdy_callback(PDMCC26XX_Handle<sp/>handle,<sp/>PDMCC26XX_StreamNotification<sp/>*streamNotification)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(streamNotification-&gt;status<sp/>==<sp/>PDMCC26XX_STREAM_BLOCK_READY<sp/>||<sp/>streamNotification-&gt;status<sp/>==</highlight></codeline>
<codeline><highlight class="normal">PDMCC26XX_STREAM_BLOCK_READY_BUT_PDM_OVERFLOW){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemaphoreP_post(SemaphoreP_handle(&amp;bufferReadySemaphore));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>the<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>applicationTask(UArg<sp/>a0,<sp/>UArg<sp/>a1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemaphoreP_Params<sp/>semParams;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PDMCC26XX_BufferRequest<sp/>bufferRequest;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PDMCC26XX_Params<sp/>pdmParams;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>uint16_t<sp/>returnBufferSize<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>uint8_t<sp/>numberOfPcmBuffersToRequest<sp/>=<sp/>128;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>semaphore</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemaphoreP_Params_init(&amp;semParams);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semParams.mode<sp/>=<sp/>SemaphoreP_Mode_BINARY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemaphoreP_construct(&amp;bufferReadySemaphore,<sp/>0,<sp/>&amp;semParams);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>up<sp/>parameters<sp/>for<sp/>PDM<sp/>streaming<sp/>with<sp/>compression</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PDMCC26XX_Params_init(&amp;pdmParams);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.callbackFxn<sp/>=<sp/>bufRdy_callback;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.micPowerActiveHigh<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.applyCompression<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.retBufSizeInBytes<sp/>=<sp/>returnBufferSize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.mallocFxn<sp/>=<sp/>&amp;malloc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.freeFxn<sp/>=<sp/>&amp;free;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Try<sp/>to<sp/>open<sp/>the<sp/>PDM<sp/>driver</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(pdmHandle<sp/>=<sp/>PDMCC26XX_open(&amp;pdmParams)<sp/>==<sp/>NULL){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>PDMCC26XX_open()<sp/>failing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Try<sp/>to<sp/>start<sp/>streaming</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(PDMCC26XX_startStream(pdmHandle)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>pcmBuffersRequestedSoFar;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Request<sp/>numberOfPcmBuffersToRequest<sp/>buffers<sp/>and<sp/>then<sp/>stop<sp/>the<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(pcmBuffersRequestedSoFar<sp/>=<sp/>0;<sp/>pcmBuffersRequestedSoFar<sp/>&lt;<sp/>numberOfPcmBuffersToRequest;</highlight></codeline>
<codeline><highlight class="normal">pcmBuffersRequestedSoFar++){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Pend<sp/>on<sp/>the<sp/>semaphore<sp/>until<sp/>a<sp/>buffer<sp/>is<sp/>available<sp/>from<sp/>the<sp/>PDM<sp/>driver</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemaphoreP_pend(SemaphoreP_handle(&amp;bufferReadySemaphore),<sp/>BIOS_WAIT_FOREVER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Now<sp/>request<sp/>a<sp/>buffer<sp/>as<sp/>it<sp/>was<sp/>indicated<sp/>that<sp/>one<sp/>is<sp/>available</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PDMCC26XX_requestBuffer(pdmHandle,<sp/>&amp;bufferRequest);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>bufferRequest</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Free<sp/>the<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my_free(bufferRequest.buffer,<sp/>returnBufferSize);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Try<sp/>to<sp/>stop<sp/>the<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!PDMCC26XX_stopStream(pdmHandle)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>PDMCC26XX_stopStream()<sp/>failing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>PDMCC26XX_startStream()<sp/>failing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para><heading level="1">8kHz PCM output</heading>
</para><para>By default, the PCM output of the driver has a sampling frequency of fs = 16kHz. There is an alternate signal processing chain that returns PCM output with fs = 8kHz. This example shows how to alter the standard use-case to set this up. <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>bufRdy_callback(PDMCC26XX_Handle<sp/>handle,<sp/>PDMCC26XX_StreamNotification<sp/>*streamNotification)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(streamNotification-&gt;status<sp/>==<sp/>PDMCC26XX_STREAM_BLOCK_READY<sp/>||<sp/>streamNotification-&gt;status<sp/>==</highlight></codeline>
<codeline><highlight class="normal">PDMCC26XX_STREAM_BLOCK_READY_BUT_PDM_OVERFLOW){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemaphoreP_post(SemaphoreP_handle(&amp;bufferReadySemaphore));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>the<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>applicationTask(UArg<sp/>a0,<sp/>UArg<sp/>a1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemaphoreP_Params<sp/>semParams;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PDMCC26XX_BufferRequest<sp/>bufferRequest;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PDMCC26XX_Params<sp/>pdmParams;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>uint16_t<sp/>returnBufferSize<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>uint8_t<sp/>numberOfPcmBuffersToRequest<sp/>=<sp/>128;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>semaphore</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemaphoreP_Params_init(&amp;semParams);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semParams.mode<sp/>=<sp/>SemaphoreP_Mode_BINARY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemaphoreP_construct(&amp;bufferReadySemaphore,<sp/>0,<sp/>&amp;semParams);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>up<sp/>parameters<sp/>for<sp/>PDM<sp/>streaming<sp/>with<sp/>compression</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PDMCC26XX_Params_init(&amp;pdmParams);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.callbackFxn<sp/>=<sp/>bufRdy_callback;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.micPowerActiveHigh<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.applyCompression<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.retBufSizeInBytes<sp/>=<sp/>returnBufferSize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.mallocFxn<sp/>=<sp/>&amp;malloc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.freeFxn<sp/>=<sp/>&amp;free;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Configure<sp/>the<sp/>params<sp/>to<sp/>use<sp/>8kHz<sp/>PCM<sp/>output</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdmParams.pcmSampleRate<sp/>=<sp/>PDMCC26XX_PCM_SAMPLE_RATE_8K</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Try<sp/>to<sp/>open<sp/>the<sp/>PDM<sp/>driver</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(pdmHandle<sp/>=<sp/>PDMCC26XX_open(&amp;pdmParams)<sp/>==<sp/>NULL){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>PDMCC26XX_open()<sp/>failing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Try<sp/>to<sp/>start<sp/>streaming</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(PDMCC26XX_startStream(pdmHandle)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>pcmBuffersRequestedSoFar;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Request<sp/>numberOfPcmBuffersToRequest<sp/>buffers<sp/>and<sp/>then<sp/>stop<sp/>the<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(pcmBuffersRequestedSoFar<sp/>=<sp/>0;<sp/>pcmBuffersRequestedSoFar<sp/>&lt;<sp/>numberOfPcmBuffersToRequest;</highlight></codeline>
<codeline><highlight class="normal">pcmBuffersRequestedSoFar++){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Pend<sp/>on<sp/>the<sp/>semaphore<sp/>until<sp/>a<sp/>buffer<sp/>is<sp/>available<sp/>from<sp/>the<sp/>PDM<sp/>driver</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemaphoreP_pend(SemaphoreP_handle(&amp;bufferReadySemaphore),<sp/>BIOS_WAIT_FOREVER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Now<sp/>request<sp/>a<sp/>buffer<sp/>as<sp/>it<sp/>was<sp/>indicated<sp/>that<sp/>one<sp/>is<sp/>available</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PDMCC26XX_requestBuffer(pdmHandle,<sp/>&amp;bufferRequest);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>bufferRequest</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Free<sp/>the<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my_free(bufferRequest.buffer,<sp/>returnBufferSize);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Try<sp/>to<sp/>stop<sp/>the<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!PDMCC26XX_stopStream(pdmHandle)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>PDMCC26XX_stopStream()<sp/>failing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>PDMCC26XX_startStream()<sp/>failing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_pdm_PDMCC26XX__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_pdm_PDMCC26XX__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/dpl/HwiP.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/dpl/SemaphoreP.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_power_8h" kindref="compound">ti/drivers/Power.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_power_c_c26_x_x_8h" kindref="compound">ti/drivers/power/PowerCC26XX.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">/*********************************************************************</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>CONSTANTS</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor">#ifndef<sp/>PDM_TASK_STACK_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="_p_d_m_c_c26_x_x_8h_1adc205204f69ea867c95b30efe1530746" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>PDM_TASK_STACK_SIZE<sp/>850</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="_p_d_m_c_c26_x_x_8h_1a77f1de681b5b50d6e6db60818b5a481d" refkind="member"><highlight class="preprocessor">#define<sp/>PCM_SAMPLE_SIZE<sp/>16<sp/>//<sp/>Only<sp/>16<sp/>bits<sp/>supported<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="_p_d_m_c_c26_x_x_8h_1a98722a106401368b0df3e68c19c7edd3" refkind="member"><highlight class="preprocessor">#define<sp/>PCM_COMPRESSION_RATE<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="_p_d_m_c_c26_x_x_8h_1abfc314e1ae4cfbcb2e9bd114e1f1703d" refkind="member"><highlight class="preprocessor">#define<sp/>MINIMUM_PDM_BUFFER_QUEUE_DEPTH<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="_p_d_m_c_c26_x_x_8h_1ae553576c451c4277d4496b5fe7f26e24" refkind="member"><highlight class="preprocessor">#define<sp/>PCM_METADATA_SIZE<sp/>sizeof(PDMCC26XX_metaData)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">/*********************************************************************</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>TYPEDEFS</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="struct_p_d_m_c_c26_x_x__meta_data" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398" refid="struct_p_d_m_c_c26_x_x__meta_data_1aa7b19869f73f7a947e6cbdf61ff5c7a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_p_d_m_c_c26_x_x__meta_data_1aa7b19869f73f7a947e6cbdf61ff5c7a4" kindref="member">seqNum</ref>;<sp/></highlight></codeline>
<codeline lineno="399" refid="struct_p_d_m_c_c26_x_x__meta_data_1a817f693899137c53178f402eb5cbc459" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/><ref refid="struct_p_d_m_c_c26_x_x__meta_data_1a817f693899137c53178f402eb5cbc459" kindref="member">si</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="400" refid="struct_p_d_m_c_c26_x_x__meta_data_1a3c221557847398149d1034d3d2a590b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/><ref refid="struct_p_d_m_c_c26_x_x__meta_data_1a3c221557847398149d1034d3d2a590b2" kindref="member">pv</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal">}<sp/><ref refid="struct_p_d_m_c_c26_x_x__meta_data" kindref="compound">PDMCC26XX_metaData</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="struct_p_d_m_c_c26_x_x__pcm_buffer" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406" refid="struct_p_d_m_c_c26_x_x__pcm_buffer_1ac652edcb2ef46127630cc5c765bccee0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_p_d_m_c_c26_x_x__meta_data" kindref="compound">PDMCC26XX_metaData</ref><sp/><ref refid="struct_p_d_m_c_c26_x_x__pcm_buffer_1ac652edcb2ef46127630cc5c765bccee0" kindref="member">metaData</ref>;<sp/></highlight></codeline>
<codeline lineno="407" refid="struct_p_d_m_c_c26_x_x__pcm_buffer_1abdff62b23b9567ca243328c5350b0ea9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>pBuffer[];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal">}<sp/><ref refid="struct_p_d_m_c_c26_x_x__pcm_buffer" kindref="compound">PDMCC26XX_pcmBuffer</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="_p_d_m_c_c26_x_x_8h_1acce02978ce536ea3b98a673587a6e75c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*PDMCC26XX_MallocFxn)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memSize);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="_p_d_m_c_c26_x_x_8h_1af95e29fbea1fadfb011e4ceaa36f1ab0" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_p_d_m_c_c26_x_x_8h_1af95e29fbea1fadfb011e4ceaa36f1ab0" kindref="member">PDMCC26XX_FreeFxn</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memSize);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="_p_d_m_c_c26_x_x_8h_1a1af75b7f4ebc9bf2fa53b5193ac5ac18" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="_p_d_m_c_c26_x_x_8h_1a1af75b7f4ebc9bf2fa53b5193ac5ac18" kindref="member">PDMCC26XX_Pdm2PcmFxn</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pdmInBuffer,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*decimationState,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>*biquadCoefficients,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>*pcmOutBuffer);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="struct_p_d_m_c_c26_x_x___config" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449" refid="struct_p_d_m_c_c26_x_x___config_1ae8b1f8e6eac1a99fd352df7fa0d3fa4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_p_d_m_c_c26_x_x___config_1ae8b1f8e6eac1a99fd352df7fa0d3fa4a" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="struct_p_d_m_c_c26_x_x___config_1a41f103fa307fa16ee21cb639023ba934" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_p_d_m_c_c26_x_x___config_1a41f103fa307fa16ee21cb639023ba934" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}<sp/><ref refid="struct_p_d_m_c_c26_x_x___config" kindref="compound">PDMCC26XX_Config</ref>;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_p_d_m_c_c26_x_x___config" kindref="compound">PDMCC26XX_Config</ref><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1affba2052183dd56aa6315608a6ec2633" kindref="member">PDMCC26XX_config</ref>[];</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="struct_p_d_m_c_c26_x_x___h_w_attrs" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467" refid="struct_p_d_m_c_c26_x_x___h_w_attrs_1ac99bd10d4534d151f067c2b6f0bb096e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_p_d_m_c_c26_x_x___h_w_attrs_1ac99bd10d4534d151f067c2b6f0bb096e" kindref="member">micPower</ref>;</highlight></codeline>
<codeline lineno="469" refid="struct_p_d_m_c_c26_x_x___h_w_attrs_1a5169287c5b16c798c14fb4b5f1a77df2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_p_d_m_c_c26_x_x___h_w_attrs_1a5169287c5b16c798c14fb4b5f1a77df2" kindref="member">taskPriority</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}<sp/><ref refid="struct_p_d_m_c_c26_x_x___h_w_attrs" kindref="compound">PDMCC26XX_HWAttrs</ref>;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="_p_d_m_c_c26_x_x_8h_1a94064c529b4e12aee73826c7105fea51" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_p_d_m_c_c26_x_x___config" kindref="compound">PDMCC26XX_Config</ref><sp/>*<ref refid="_p_d_m_c_c26_x_x_8h_1a94064c529b4e12aee73826c7105fea51" kindref="member">PDMCC26XX_Handle</ref>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">{</highlight></codeline>
<codeline lineno="482" refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a6541acf36472a5a4bae1e918532f5bab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a6541acf36472a5a4bae1e918532f5bab" kindref="member">PDMCC26XX_STREAM_IDLE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="483" refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a7fbacf5e84041b2a8b635df5cf1789a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a7fbacf5e84041b2a8b635df5cf1789a6" kindref="member">PDMCC26XX_STREAM_BLOCK_READY</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="484" refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a3bb09525b04c787e27fa7ce2505ebcbe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a3bb09525b04c787e27fa7ce2505ebcbe" kindref="member">PDMCC26XX_STREAM_BLOCK_READY_BUT_PDM_OVERFLOW</ref>,<sp/></highlight></codeline>
<codeline lineno="486" refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779addbca577e199cd8cad66eb880d81896b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779addbca577e199cd8cad66eb880d81896b" kindref="member">PDMCC26XX_STREAM_ERROR</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="489" refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a57716d15faf09d4f066fe77f473de9db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a57716d15faf09d4f066fe77f473de9db" kindref="member">PDMCC26XX_STREAM_STOPPING</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="491" refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a772c35528b1c577ee8702c064c37554f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779a772c35528b1c577ee8702c064c37554f" kindref="member">PDMCC26XX_STREAM_STOPPED</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="492" refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779addce783eed694cb817cd67ae51d036d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779addce783eed694cb817cd67ae51d036d5" kindref="member">PDMCC26XX_STREAM_FAILED_TO_STOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal">}<sp/><ref refid="_p_d_m_c_c26_x_x_8h_1afbfe993e790be75708df00186070a779" kindref="member">PDMCC26XX_Status</ref>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="_p_d_m_c_c26_x_x_8h_1ac6ec7972a50a1ed1c12039047d3b2522" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="503" refid="_p_d_m_c_c26_x_x_8h_1ac6ec7972a50a1ed1c12039047d3b2522a817f2eda95c722d7455bc796b6a2f51f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1ac6ec7972a50a1ed1c12039047d3b2522a817f2eda95c722d7455bc796b6a2f51f" kindref="member">PDMCC26XX_PCM_SAMPLE_RATE_16K</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="504" refid="_p_d_m_c_c26_x_x_8h_1ac6ec7972a50a1ed1c12039047d3b2522aba74658601fcf48e4fa9dff9bd70ce94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1ac6ec7972a50a1ed1c12039047d3b2522aba74658601fcf48e4fa9dff9bd70ce94" kindref="member">PDMCC26XX_PCM_SAMPLE_RATE_8K</ref></highlight></codeline>
<codeline lineno="505"><highlight class="normal">}<sp/><ref refid="_p_d_m_c_c26_x_x_8h_1ac6ec7972a50a1ed1c12039047d3b2522" kindref="member">PDMCC26XX_PcmSampleRate</ref>;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="520" refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267fad32df2e2c24bdb0d67c3ec63c0c46178" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267fad32df2e2c24bdb0d67c3ec63c0c46178" kindref="member">PDMCC26XX_GAIN_24</ref><sp/>=<sp/>1318,<sp/></highlight></codeline>
<codeline lineno="521" refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267fa332b4d0aeb82669190f2b2bcfa9ea6c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267fa332b4d0aeb82669190f2b2bcfa9ea6c8" kindref="member">PDMCC26XX_GAIN_18</ref><sp/>=<sp/>660,<sp/><sp/></highlight></codeline>
<codeline lineno="522" refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267fa5929463bec3b2bb2da1e240c8a3a2aad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267fa5929463bec3b2bb2da1e240c8a3a2aad" kindref="member">PDMCC26XX_GAIN_12</ref><sp/>=<sp/>331,<sp/><sp/></highlight></codeline>
<codeline lineno="523" refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267faa10d346442b2427f47bd7939a0f0dc6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267faa10d346442b2427f47bd7939a0f0dc6a" kindref="member">PDMCC26XX_GAIN_6</ref><sp/><sp/>=<sp/>166,<sp/><sp/></highlight></codeline>
<codeline lineno="524" refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267fa78540d7f8b49c98ee87afaaaba1f9c36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267fa78540d7f8b49c98ee87afaaaba1f9c36" kindref="member">PDMCC26XX_GAIN_0</ref><sp/><sp/>=<sp/>83,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="525" refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267faa4811cff958da5ec7ee700237beacb3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267faa4811cff958da5ec7ee700237beacb3b" kindref="member">PDMCC26XX_GAIN_END</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal">}<sp/><ref refid="_p_d_m_c_c26_x_x_8h_1a8c2d67aee547a2c8228465034ae0267f" kindref="member">PDMCC26XX_Gain</ref>;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="533" refid="struct_p_d_m_c_c26_x_x___stream_notification" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535" refid="struct_p_d_m_c_c26_x_x___stream_notification_1ab21bcd11c6d72c08354643d6022cbb5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_p_d_m_c_c26_x_x___stream_notification_1ab21bcd11c6d72c08354643d6022cbb5e" kindref="member">arg</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="536" refid="struct_p_d_m_c_c26_x_x___stream_notification_1a57a4fc3f0b7fc1ff267b164cafff063c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PDMCC26XX_Status<sp/><ref refid="struct_p_d_m_c_c26_x_x___stream_notification_1a57a4fc3f0b7fc1ff267b164cafff063c" kindref="member">status</ref>;<sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal">}<sp/><ref refid="struct_p_d_m_c_c26_x_x___stream_notification" kindref="compound">PDMCC26XX_StreamNotification</ref>;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="_p_d_m_c_c26_x_x_8h_1ab6fdee59a79029e938e3fbf0e446fa91" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_p_d_m_c_c26_x_x_8h_1ab6fdee59a79029e938e3fbf0e446fa91" kindref="member">PDMCC26XX_CallbackFxn</ref>)(PDMCC26XX_Handle<sp/>handle,<sp/><ref refid="struct_p_d_m_c_c26_x_x___stream_notification" kindref="compound">PDMCC26XX_StreamNotification</ref><sp/>*streamNotification);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="struct_p_d_m_c_c26_x_x___buffer_request" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal">{</highlight></codeline>
<codeline lineno="563" refid="struct_p_d_m_c_c26_x_x___buffer_request_1af1ba97caba202d780151fb276b128802" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_p_d_m_c_c26_x_x__pcm_buffer" kindref="compound">PDMCC26XX_pcmBuffer</ref><sp/>*<ref refid="struct_p_d_m_c_c26_x_x___buffer_request_1af1ba97caba202d780151fb276b128802" kindref="member">buffer</ref>;<sp/></highlight></codeline>
<codeline lineno="566" refid="struct_p_d_m_c_c26_x_x___buffer_request_1aced5abcb251e52d046809a985d8e2af7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PDMCC26XX_Status<sp/><ref refid="struct_p_d_m_c_c26_x_x___buffer_request_1aced5abcb251e52d046809a985d8e2af7" kindref="member">status</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="567"><highlight class="normal">}<sp/><ref refid="struct_p_d_m_c_c26_x_x___buffer_request" kindref="compound">PDMCC26XX_BufferRequest</ref>;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="576" refid="struct_p_d_m_c_c26_x_x___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PDM<sp/>control<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="struct_p_d_m_c_c26_x_x___params_1ab0b5ba7b77e820496242b568e9722197" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_p_d_m_c_c26_x_x___params_1ab0b5ba7b77e820496242b568e9722197" kindref="member">micPowerActiveHigh</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="580" refid="struct_p_d_m_c_c26_x_x___params_1a8f7df45298c5e74e04e18050fc36adf9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_p_d_m_c_c26_x_x___params_1a8f7df45298c5e74e04e18050fc36adf9" kindref="member">applyCompression</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="583" refid="struct_p_d_m_c_c26_x_x___params_1a7866964e30e66983db76fb8eb8f20c31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_p_d_m_c_c26_x_x___params_1a7866964e30e66983db76fb8eb8f20c31" kindref="member">pdmBufferQueueDepth</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="590" refid="struct_p_d_m_c_c26_x_x___params_1a05bff0a3c2ddbb3a49c2bc7a47a7fe24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="struct_p_d_m_c_c26_x_x___params_1a05bff0a3c2ddbb3a49c2bc7a47a7fe24" kindref="member">retBufSizeInBytes</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="593" refid="struct_p_d_m_c_c26_x_x___params_1ada70be0c2c779c0908babb7978807589" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>*<ref refid="struct_p_d_m_c_c26_x_x___params_1ada70be0c2c779c0908babb7978807589" kindref="member">decimationFilter</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="595" refid="struct_p_d_m_c_c26_x_x___params_1ad6940680eb8801335070fef3ef6d128c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_p_d_m_c_c26_x_x___params_1ad6940680eb8801335070fef3ef6d128c" kindref="member">decimationFilterStateSize</ref>;<sp/></highlight></codeline>
<codeline lineno="602" refid="struct_p_d_m_c_c26_x_x___params_1a1c5542bc8d7d16c9e4876746f24b2dcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PDMCC26XX_Gain<sp/><ref refid="struct_p_d_m_c_c26_x_x___params_1a1c5542bc8d7d16c9e4876746f24b2dcf" kindref="member">defaultFilterGain</ref>;<sp/></highlight></codeline>
<codeline lineno="604" refid="struct_p_d_m_c_c26_x_x___params_1a7a888cb14c83b729ad0886f1e50eb4a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PDMCC26XX_PcmSampleRate<sp/><ref refid="struct_p_d_m_c_c26_x_x___params_1a7a888cb14c83b729ad0886f1e50eb4a8" kindref="member">pcmSampleRate</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="605" refid="struct_p_d_m_c_c26_x_x___params_1a1ffbb2852a48ff157c0f58df4dce4a3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_p_d_m_c_c26_x_x___params_1a1ffbb2852a48ff157c0f58df4dce4a3b" kindref="member">startupDelayWithClockInSamples</ref>;<sp/></highlight></codeline>
<codeline lineno="609" refid="struct_p_d_m_c_c26_x_x___params_1ada480cae6ca7398efef4293350f92090" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1ab6fdee59a79029e938e3fbf0e446fa91" kindref="member">PDMCC26XX_CallbackFxn</ref><sp/><ref refid="struct_p_d_m_c_c26_x_x___params_1ada480cae6ca7398efef4293350f92090" kindref="member">callbackFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="610" refid="struct_p_d_m_c_c26_x_x___params_1aea959cfd6c30b0af7f4c9547c5186d0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1acce02978ce536ea3b98a673587a6e75c" kindref="member">PDMCC26XX_MallocFxn</ref><sp/><ref refid="struct_p_d_m_c_c26_x_x___params_1aea959cfd6c30b0af7f4c9547c5186d0a" kindref="member">mallocFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="611" refid="struct_p_d_m_c_c26_x_x___params_1ae0149ca1615d25422c7e0d9c473ccd2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1af95e29fbea1fadfb011e4ceaa36f1ab0" kindref="member">PDMCC26XX_FreeFxn</ref><sp/><ref refid="struct_p_d_m_c_c26_x_x___params_1ae0149ca1615d25422c7e0d9c473ccd2e" kindref="member">freeFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="612" refid="struct_p_d_m_c_c26_x_x___params_1ad41793869ce12a57f513749b244aa1a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="struct_p_d_m_c_c26_x_x___params_1ad41793869ce12a57f513749b244aa1a3" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="613"><highlight class="normal">}<sp/><ref refid="struct_p_d_m_c_c26_x_x___params" kindref="compound">PDMCC26XX_Params</ref>;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="620" refid="struct_p_d_m_c_c26_x_x___object" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PDM<sp/>control<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623" refid="struct_p_d_m_c_c26_x_x___object_1accb73d20cdc867da97ef5cd00cad572d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1accb73d20cdc867da97ef5cd00cad572d" kindref="member">streamStarted</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="624" refid="struct_p_d_m_c_c26_x_x___object_1a9fa96e50147f141ed92b212e20b6b8dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1a9fa96e50147f141ed92b212e20b6b8dc" kindref="member">micPowerActiveHigh</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="625" refid="struct_p_d_m_c_c26_x_x___object_1a8e2020efb94b94f43615aea729bda8dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1a8e2020efb94b94f43615aea729bda8dc" kindref="member">applyCompression</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="628" refid="struct_p_d_m_c_c26_x_x___object_1ac89b6cf6088d05b4f52087e67e6bba0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1ac89b6cf6088d05b4f52087e67e6bba0e" kindref="member">isOpen</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="629" refid="struct_p_d_m_c_c26_x_x___object_1a05f92e36498598102830fa57a91c2a85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1a05f92e36498598102830fa57a91c2a85" kindref="member">retBufSizeInBytes</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="630" refid="struct_p_d_m_c_c26_x_x___object_1a0df815d07161255f46b7d2fbe728bc36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1a0df815d07161255f46b7d2fbe728bc36" kindref="member">pcmBufferSizeInBytes</ref>;<sp/></highlight></codeline>
<codeline lineno="632" refid="struct_p_d_m_c_c26_x_x___object_1af20066ae39625d19c95159696bd720d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1af20066ae39625d19c95159696bd720d0" kindref="member">startupDelayWithClockInSamples</ref>;<sp/></highlight></codeline>
<codeline lineno="636" refid="struct_p_d_m_c_c26_x_x___object_1a43b9456c4cda0f1b83e49e7f348c5440" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>*<ref refid="struct_p_d_m_c_c26_x_x___object_1a43b9456c4cda0f1b83e49e7f348c5440" kindref="member">decimationFilter</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="638" refid="struct_p_d_m_c_c26_x_x___object_1acf99a7c75e04fdda9b579d3092d28377" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*<ref refid="struct_p_d_m_c_c26_x_x___object_1acf99a7c75e04fdda9b579d3092d28377" kindref="member">decimationFilterState</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="639" refid="struct_p_d_m_c_c26_x_x___object_1a4f04b686ab2ad8d27c8e48aa280714b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1a4f04b686ab2ad8d27c8e48aa280714b8" kindref="member">decimationFilterStateSize</ref>;<sp/></highlight></codeline>
<codeline lineno="643" refid="struct_p_d_m_c_c26_x_x___object_1a16a58b87745354f508e1c58751ad03a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_p_d_m_c_c26_x_x___stream_notification" kindref="compound">PDMCC26XX_StreamNotification</ref><sp/>*<ref refid="struct_p_d_m_c_c26_x_x___object_1a16a58b87745354f508e1c58751ad03a4" kindref="member">streamNotification</ref>;<sp/></highlight></codeline>
<codeline lineno="644" refid="struct_p_d_m_c_c26_x_x___object_1a9506c80c0b58cf030d46721d90d96bb7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1ab6fdee59a79029e938e3fbf0e446fa91" kindref="member">PDMCC26XX_CallbackFxn</ref><sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1a9506c80c0b58cf030d46721d90d96bb7" kindref="member">callbackFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="645" refid="struct_p_d_m_c_c26_x_x___object_1a4805a0277b49cce6fa2c4255cb4e26a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1acce02978ce536ea3b98a673587a6e75c" kindref="member">PDMCC26XX_MallocFxn</ref><sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1a4805a0277b49cce6fa2c4255cb4e26a4" kindref="member">mallocFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="646" refid="struct_p_d_m_c_c26_x_x___object_1a1c7fe813d98d451be08b4d7f7618f2f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1af95e29fbea1fadfb011e4ceaa36f1ab0" kindref="member">PDMCC26XX_FreeFxn</ref><sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1a1c7fe813d98d451be08b4d7f7618f2f3" kindref="member">freeFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="647" refid="struct_p_d_m_c_c26_x_x___object_1acab3488cd637d5b6f7e4e6d11661274b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1a1af75b7f4ebc9bf2fa53b5193ac5ac18" kindref="member">PDMCC26XX_Pdm2PcmFxn</ref><sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1acab3488cd637d5b6f7e4e6d11661274b" kindref="member">pdm2pcmFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="648" refid="struct_p_d_m_c_c26_x_x___object_1a25f0b75fdadf1d726861295d5501efb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>HwiP_Struct<sp/><ref refid="struct_p_d_m_c_c26_x_x___object_1a25f0b75fdadf1d726861295d5501efb6" kindref="member">hwi</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal">}<sp/><ref refid="struct_p_d_m_c_c26_x_x___object" kindref="compound">PDMCC26XX_Object</ref>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1a8347c3f56db0ad7c3f357f13be098cf2" kindref="member">PDMCC26XX_init</ref>(PDMCC26XX_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PDMCC26XX_Handle<sp/><ref refid="_p_d_m_c_c26_x_x_8h_1a431d9b71e0d0eebd5ab85960f1c82ee0" kindref="member">PDMCC26XX_open</ref>(<ref refid="struct_p_d_m_c_c26_x_x___params" kindref="compound">PDMCC26XX_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1afb9597d25d6b2e02f6903bf6652d4371" kindref="member">PDMCC26XX_close</ref>(PDMCC26XX_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1af5fafd7c475117bd3ed6783273c2220d" kindref="member">PDMCC26XX_startStream</ref>(PDMCC26XX_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1aebd3b158f38ba1489a56efe5b9a722d2" kindref="member">PDMCC26XX_stopStream</ref>(PDMCC26XX_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1a15a0017513c13ca244f7e3a0f5761e8d" kindref="member">PDMCC26XX_requestBuffer</ref>(PDMCC26XX_Handle<sp/>handle,<sp/><ref refid="struct_p_d_m_c_c26_x_x___buffer_request" kindref="compound">PDMCC26XX_BufferRequest</ref><sp/>*bufferRequest);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*<sp/>========<sp/>PDMCC26XX_Params_init<sp/>========</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Function<sp/>for<sp/>initialising<sp/>a<sp/>PDMCC26XX_Params<sp/>instance<sp/>to<sp/>its<sp/>default<sp/>value</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/>params<sp/>Pointer<sp/>to<sp/>a<sp/>set<sp/>of<sp/>uninitialised<sp/>params</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_d_m_c_c26_x_x_8h_1af8421d9a4381fc68e217650c426ba633" kindref="member">PDMCC26XX_Params_init</ref>(<ref refid="struct_p_d_m_c_c26_x_x___params" kindref="compound">PDMCC26XX_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_pdm_PDMCC26XX__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/pdm/PDMCC26XX.h"/>
  </compounddef>
</doxygen>
