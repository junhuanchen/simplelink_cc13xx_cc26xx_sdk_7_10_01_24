<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group__attributes" kind="group">
    <compoundname>attributes</compoundname>
    <title>Key attributes</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" prot="public" static="no">
        <type>psa_key_attributes_t</type>
        <definition>typedef psa_key_attributes_t KeyStore_PSA_KeyAttributes</definition>
        <argsstring></argsstring>
        <name>KeyStore_PSA_KeyAttributes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of a structure containing key attributes.</para><para>This is an opaque structure that can represent the metadata of a key object. Metadata that can be stored in attributes includes:<itemizedlist>
<listitem><para>The location of the key in storage, indicated by its key identifier and its lifetime.</para></listitem><listitem><para>The key&apos;s policy, comprising usage flags and a specification of the permitted algorithm(s).</para></listitem><listitem><para>Information about the key itself: the key type and its size.</para></listitem></itemizedlist>
</para><para>The actual key material is not considered an attribute of a key. Key attributes do not contain information that is generally considered highly confidential.</para><para>An attribute structure can be a simple data structure where each function <computeroutput>KeyStore_PSA_setKeyXXX</computeroutput> sets a field and the corresponding function <computeroutput>KeyStore_PSA_getKeyXXX</computeroutput> retrieves the value of the corresponding field. However, implementations may report values that are equivalent to the original one, but have a different encoding. For example, an implementation may use a more compact representation for types where many bit-patterns are invalid or not supported, and store all values that it does not support as a special marker value. In such an implementation, after setting an invalid value, the corresponding get function returns an invalid value which may not be the one that was originally stored.</para><para>An attribute structure may contain references to auxiliary resources, for example pointers to allocated memory or indirect references to pre-calculated values. In order to free such resources, the application must call <ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes()</ref>. As an exception, calling <ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes()</ref> on an attribute structure is optional if the structure has only been modified by the following functions since it was initialized or last reset with <ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes()</ref>:<itemizedlist>
<listitem><para><ref refid="_crypto_key_key_store___p_s_a_8h_1aa39deef86055b0c230c8f6f3a1c833ef" kindref="member">KeyStore_PSA_setKeyId()</ref></para></listitem><listitem><para><ref refid="_crypto_key_key_store___p_s_a_8h_1a7b2babf52d14d2711a83b99bb2d02d1b" kindref="member">KeyStore_PSA_setKeyLifetime()</ref></para></listitem><listitem><para><ref refid="_crypto_key_key_store___p_s_a_8h_1a4d6a1462d50186c8a726894a4f7b2dbf" kindref="member">KeyStore_PSA_setKeyType()</ref></para></listitem><listitem><para><ref refid="_crypto_key_key_store___p_s_a_8h_1a5bf5666e2ec6334bc9ff5c098c968c18" kindref="member">KeyStore_PSA_setKeyBits()</ref></para></listitem><listitem><para><ref refid="_crypto_key_key_store___p_s_a_8h_1a9355a2890799fe9255e8ef92c4e52e61" kindref="member">KeyStore_PSA_setKeyUsageFlags()</ref></para></listitem><listitem><para><ref refid="_crypto_key_key_store___p_s_a_8h_1a31ded95ae232e8b6fae4414fd8be8f46" kindref="member">KeyStore_PSA_setKeyAlgorithm()</ref></para></listitem></itemizedlist>
</para><para>Before calling any function on a key attribute structure, the application must initialize it by any of the following means:<itemizedlist>
<listitem><para>Set the structure to all-bits-zero, for example: <programlisting><codeline><highlight class="normal">KeyStore_PSA_KeyAttributes<sp/>attributes;</highlight></codeline>
<codeline><highlight class="normal">memset(&amp;attributes,<sp/>0,<sp/>sizeof(attributes));</highlight></codeline>
</programlisting></para></listitem><listitem><para>Initialize the structure to logical zero values, for example: <programlisting><codeline><highlight class="normal">KeyStore_PSA_KeyAttributes<sp/>attributes<sp/>=<sp/>{0};</highlight></codeline>
</programlisting></para></listitem><listitem><para>Initialize the structure to the initializer <ref refid="group__attributes_1ga383aa20c778dfebe26d78ae2b569f253" kindref="member">KEYSTORE_PSA_KEY_ATTRIBUTES_INIT</ref>, for example:<programlisting><codeline><highlight class="normal">KeyStore_PSA_KeyAttributes<sp/>attributes<sp/>=<sp/>KEYSTORE_PSA_KEY_ATTRIBUTES_INIT;</highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para>A freshly initialized attribute structure contains the following values:</para><para><itemizedlist>
<listitem><para>lifetime: <ref refid="group__key__lifetimes_1ga67c68b7d1a3dd9775e6436682378c455" kindref="member">KEYSTORE_PSA_KEY_LIFETIME_VOLATILE</ref>.</para></listitem><listitem><para>key identifier: <computeroutput>0</computeroutput> (which is not a valid key identifier).</para></listitem><listitem><para>type: <computeroutput>0</computeroutput> (meaning that the type is unspecified).</para></listitem><listitem><para>key size: <computeroutput>0</computeroutput> (meaning that the size is unspecified).</para></listitem><listitem><para>usage flags: <computeroutput>0</computeroutput> (which allows no usage except exporting a public key).</para></listitem><listitem><para>algorithm: <computeroutput>0</computeroutput> (which allows no cryptographic usage, but allows exporting).</para></listitem></itemizedlist>
</para><para>A typical sequence to create a key is as follows:<orderedlist>
<listitem><para>Create and initialize an attribute structure.</para></listitem><listitem><para>If the key is persistent, call <ref refid="_crypto_key_key_store___p_s_a_8h_1aa39deef86055b0c230c8f6f3a1c833ef" kindref="member">KeyStore_PSA_setKeyId()</ref>. Also call <ref refid="_crypto_key_key_store___p_s_a_8h_1a7b2babf52d14d2711a83b99bb2d02d1b" kindref="member">KeyStore_PSA_setKeyLifetime()</ref> to place the key in a non-default location.</para></listitem><listitem><para>Set the key policy with <ref refid="_crypto_key_key_store___p_s_a_8h_1a9355a2890799fe9255e8ef92c4e52e61" kindref="member">KeyStore_PSA_setKeyUsageFlags()</ref> and <ref refid="_crypto_key_key_store___p_s_a_8h_1a31ded95ae232e8b6fae4414fd8be8f46" kindref="member">KeyStore_PSA_setKeyAlgorithm()</ref>.</para></listitem><listitem><para>Set the key type with <ref refid="_crypto_key_key_store___p_s_a_8h_1a4d6a1462d50186c8a726894a4f7b2dbf" kindref="member">KeyStore_PSA_setKeyType()</ref>.</para></listitem><listitem><para>When generating a random key with KeyStore_PSA_generateKey() or deriving a key with KeyStore_PSA_key_derivation_output_key(), set the desired key size with <ref refid="_crypto_key_key_store___p_s_a_8h_1a5bf5666e2ec6334bc9ff5c098c968c18" kindref="member">KeyStore_PSA_setKeyBits()</ref>.</para></listitem><listitem><para>Call a key creation function: <ref refid="_crypto_key_key_store___p_s_a_8h_1aa9425eeaa708cf28b9101c34a152ec36" kindref="member">KeyStore_PSA_importKey()</ref>, KeyStore_PSA_generateKey(), KeyStore_PSA_key_derivation_output_key(). This function reads the attribute structure, creates a key with these attributes, and outputs a handle to the newly created key.</para></listitem><listitem><para>The attribute structure is now no longer necessary. You may call <ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes()</ref>, although this is optional with the workflow presented here because the attributes currently defined in this specification do not require any additional resources beyond the structure itself.</para></listitem></orderedlist>
</para><para>A typical sequence to query a key&apos;s attributes is as follows:<orderedlist>
<listitem><para>Call <ref refid="_crypto_key_key_store___p_s_a_8h_1ae8fe5bcd8dd9c72f4a801660dd6333b5" kindref="member">KeyStore_PSA_getKeyAttributes()</ref>.</para></listitem><listitem><para>Call <computeroutput>KeyStore_PSA_get_key_xxx</computeroutput> functions to retrieve the attribute(s) that you are interested in.</para></listitem><listitem><para>Call <ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes()</ref> to free any resources that may be used by the attribute structure.</para></listitem></orderedlist>
</para><para>Once a key has been created, it is impossible to change its attributes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="866" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="866" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__attributes_1ga383aa20c778dfebe26d78ae2b569f253" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_ATTRIBUTES_INIT</name>
        <initializer>PSA_KEY_ATTRIBUTES_INIT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="868" column="13" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1gac7a4b1f276d3ff9453d05360826fbb78" prot="public" static="no">
        <name>GET_KEY_ID</name>
        <param><defname>keyID</defname></param>
        <param><defname>ID</defname></param>
        <initializer>keyID = ID</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to assign and get keyID</para><para>It depends on MBEDTLS_PSA_CRYPTO_KEY_FILE_ID_ENCODES_OWNER to assign keyID and owner if multiple partition supported by mbedtls </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="882" column="22" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1ga8d275b44bc2bed4b0121ab919ace07cc" prot="public" static="no">
        <name>SET_KEY_ID</name>
        <param><defname>ID</defname></param>
        <param><defname>keyID</defname></param>
        <initializer>ID = keyID</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="884" column="17" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="884" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
