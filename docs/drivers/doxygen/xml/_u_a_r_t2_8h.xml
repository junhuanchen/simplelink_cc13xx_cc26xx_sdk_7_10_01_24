<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_u_a_r_t2_8h" kind="file" language="C++">
    <compoundname>UART2.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">ti/drivers/dpl/ClockP.h</includes>
    <includes local="no">ti/drivers/dpl/HwiP.h</includes>
    <includes local="no">ti/drivers/dpl/SemaphoreP.h</includes>
    <includes refid="_ring_buf_8h" local="no">ti/drivers/utils/RingBuf.h</includes>
    <includedby refid="_u_a_r_t2_c_c26_x2_8h" local="no">UART2CC26X2.h</includedby>
    <includedby refid="_u_a_r_t2_support_8h" local="no">UART2Support.h</includedby>
    <includedby refid="_display_uart2_8h" local="no">DisplayUart2.h</includedby>
    <incdepgraph>
      <node id="1522">
        <label>stdbool.h</label>
      </node>
      <node id="1521">
        <label>stdint.h</label>
      </node>
      <node id="1525">
        <label>ti/drivers/dpl/SemaphoreP.h</label>
      </node>
      <node id="1520">
        <label>stddef.h</label>
      </node>
      <node id="1519">
        <label>UART2.h</label>
        <link refid="_u_a_r_t2_8h"/>
        <childnode refid="1520" relation="include">
        </childnode>
        <childnode refid="1521" relation="include">
        </childnode>
        <childnode refid="1522" relation="include">
        </childnode>
        <childnode refid="1523" relation="include">
        </childnode>
        <childnode refid="1524" relation="include">
        </childnode>
        <childnode refid="1525" relation="include">
        </childnode>
        <childnode refid="1526" relation="include">
        </childnode>
      </node>
      <node id="1526">
        <label>ti/drivers/utils/RingBuf.h</label>
        <link refid="_ring_buf_8h"/>
        <childnode refid="1521" relation="include">
        </childnode>
        <childnode refid="1520" relation="include">
        </childnode>
        <childnode refid="1522" relation="include">
        </childnode>
      </node>
      <node id="1524">
        <label>ti/drivers/dpl/HwiP.h</label>
      </node>
      <node id="1523">
        <label>ti/drivers/dpl/ClockP.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1528">
        <label>UART2CC26X2.h</label>
        <link refid="_u_a_r_t2_c_c26_x2_8h"/>
      </node>
      <node id="1530">
        <label>DisplayUart2.h</label>
        <link refid="_display_uart2_8h"/>
      </node>
      <node id="1527">
        <label>UART2.h</label>
        <link refid="_u_a_r_t2_8h"/>
        <childnode refid="1528" relation="include">
        </childnode>
        <childnode refid="1529" relation="include">
        </childnode>
        <childnode refid="1530" relation="include">
        </childnode>
      </node>
      <node id="1529">
        <label>UART2Support.h</label>
        <link refid="_u_a_r_t2_support_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_u_a_r_t2___params" prot="public">UART2_Params</innerclass>
    <innerclass refid="struct_u_a_r_t2___config__" prot="public">UART2_Config_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_u_a_r_t2_8h_1ac5f6195c8ac1d8153e1c6a9ef5516dc0" prot="public" static="no">
        <name>UART2_FLOWCTRL_NONE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>No hardware flow control. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="302" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_u_a_r_t2_8h_1a642f979e86b7e33000bbe36ccc6ffeb7" prot="public" static="no">
        <name>UART2_FLOWCTRL_HARDWARE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Hardware flow control. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="307" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1ga50f50c06775b7ee13f45fe80c93fb356" prot="public" static="no">
        <name>UART2_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code returned by UART2 APIs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="315" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1ga2eafae271234b3df03442a2f5b1b7270" prot="public" static="no">
        <name>UART2_STATUS_SREADTIMEOUT</name>
        <initializer>(1)</initializer>
        <briefdescription>
<para>A read timeout occurred (not an error). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="320" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1ga056a6acd9fc1a49cb30c8baabecc35df" prot="public" static="no">
        <name>UART2_STATUS_EFRAMING</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>A framing error occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="325" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1gaa3d362690c0ab4dd14e50f53737499a1" prot="public" static="no">
        <name>UART2_STATUS_EPARITY</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>A parity error occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="330" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1ga4684c6671d256dc72b13ddb1eafd9971" prot="public" static="no">
        <name>UART2_STATUS_EBREAK</name>
        <initializer>(-4)</initializer>
        <briefdescription>
<para>A break error occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="335" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1gab410e4da00bc79fdbbe921e89a78ffeb" prot="public" static="no">
        <name>UART2_STATUS_EOVERRUN</name>
        <initializer>(-8)</initializer>
        <briefdescription>
<para>A FIFO overrun occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="340" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1ga0ec322208aa002ae4b058a410a387801" prot="public" static="no">
        <name>UART2_STATUS_EINUSE</name>
        <initializer>(-9)</initializer>
        <briefdescription>
<para>The UART is currently in use. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="345" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1gac2a4b2002f04d6caaeee837aa662e7d4" prot="public" static="no">
        <name>UART2_STATUS_EINVALID</name>
        <initializer>(-10)</initializer>
        <briefdescription>
<para>An invalid argument or <ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref> field was passed to UART2 API. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="350" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1gad3e0d7738225ce8f423e32e0c90d883e" prot="public" static="no">
        <name>UART2_STATUS_EFAIL</name>
        <initializer>(-11)</initializer>
        <briefdescription>
<para>General failure status returned by UART2 API. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="355" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1ga4cab16fd65127a1987a20caa0653476b" prot="public" static="no">
        <name>UART2_STATUS_EMEMORY</name>
        <initializer>(-12)</initializer>
        <briefdescription>
<para>A memory allocation failure occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="360" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1gaeb708c48cd2517f08660196f16d31a33" prot="public" static="no">
        <name>UART2_STATUS_ETIMEOUT</name>
        <initializer>(-13)</initializer>
        <briefdescription>
<para>A timeout occurred for a blocking UART2_read or UART2_write call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="365" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1gad528e61ecc06c90d5824796ce547ecb7" prot="public" static="no">
        <name>UART2_STATUS_ECANCELLED</name>
        <initializer>(-14)</initializer>
        <briefdescription>
<para>A <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> or <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> operation was cancelled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="370" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1ga02bfc05124702d98c0540896ead270a0" prot="public" static="no">
        <name>UART2_STATUS_ENOTOPEN</name>
        <initializer>(-15)</initializer>
        <briefdescription>
<para>A <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> or <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> called on a device not opened. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="375" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___s_t_a_t_u_s_1ga30aee2c671977b6a716be98ac4c5e31c" prot="public" static="no">
        <name>UART2_STATUS_EAGAIN</name>
        <initializer>(-16)</initializer>
        <briefdescription>
<para>A <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> or <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> in UART2_Mode_NONBLOCKING would have blocked. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="381" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___e_v_e_n_t_1gaec853b83a56d8d4c77bbdd1952ec49c0" prot="public" static="no">
        <name>UART2_EVENT_OVERRUN</name>
        <initializer>(0x08)</initializer>
        <briefdescription>
<para>A receive overrun has occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="392" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___e_v_e_n_t_1gadf0b8f68bdef12f231caedbeecb1493d" prot="public" static="no">
        <name>UART2_EVENT_BREAK</name>
        <initializer>(0x04)</initializer>
        <briefdescription>
<para>A break has occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="397" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___e_v_e_n_t_1gafc9cbc204dd7234514a232e63d368cbb" prot="public" static="no">
        <name>UART2_EVENT_PARITY</name>
        <initializer>(0x02)</initializer>
        <briefdescription>
<para>A parity error has occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="402" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___e_v_e_n_t_1ga255f58922a2effc350ec1da9a6391284" prot="public" static="no">
        <name>UART2_EVENT_FRAMING</name>
        <initializer>(0x01)</initializer>
        <briefdescription>
<para>A framing error has occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="407" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___e_v_e_n_t_1ga163464c05ad93ebb5d05ec3d43e710fc" prot="public" static="no">
        <name>UART2_EVENT_TX_BEGIN</name>
        <initializer>(0x10)</initializer>
        <briefdescription>
<para>The UART will start transmitting data. </para>        </briefdescription>
        <detaileddescription>
<para>This event can be useful in RS-485 half-duplex systems to toggle TX enable high. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="414" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t2___e_v_e_n_t_1ga0e9f438cedde9a55899b41ea461c78f7" prot="public" static="no">
        <name>UART2_EVENT_TX_FINISHED</name>
        <initializer>(0x20)</initializer>
        <briefdescription>
<para>The UART stopped transmitting data. </para>        </briefdescription>
        <detaileddescription>
<para>This event can be useful in RS-485 half-duplex systems to toggle TX enable low. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="421" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_u_a_r_t2_8h_1ad94e3ea6008dfc427628433dc5ac6592" prot="public" static="no">
        <name>UART2_WAIT_FOREVER</name>
        <initializer>(~(0U))</initializer>
        <briefdescription>
<para>Wait forever define. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="428" column="9" bodyfile="source/ti/drivers/UART2.h" bodystart="428" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863" prot="public" static="no">
        <name>UART2_Mode</name>
        <enumvalue id="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" prot="public">
          <name>UART2_Mode_BLOCKING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> will block the calling task until all of the data has been transmitted onto the TX pin. <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> will block until some data becomes available. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" prot="public">
          <name>UART2_Mode_CALLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Nonblocking, <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> or <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> will return immediately. When all data has been either written to, or read from the hardware FIFO, the callback function is called from either the caller&apos;s context or from an interrupt context, and the driver is ready to accept a new call to <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> or <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref>. It is not guaranteed that all data has been fully transmitted yet when the write-callback is invoked. To be notified of this, the application must subscribe to the UART2_EVENT_TX_FINISHED event. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" prot="public">
          <name>UART2_Mode_NONBLOCKING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Nonblocking, <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> or <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> will return immediately. <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> will copy as much data into the transmit buffer as space allows. <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> will copy as much data from the receive buffer as is immediately available. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UART2 mode settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enum defines the read and write modes for the configured UART. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="483" column="1" bodyfile="source/ti/drivers/UART2.h" bodystart="482" bodyend="514"/>
      </memberdef>
      <memberdef kind="enum" id="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637d" prot="public" static="no">
        <name>UART2_ReadReturnMode</name>
        <enumvalue id="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637da183a4bd9f538e511bbbd6d91e6889037" prot="public">
          <name>UART2_ReadReturnMode_FULL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unblock/callback when buffer is full. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637dae54481886c1c305f3f8fdf842bdb53c5" prot="public">
          <name>UART2_ReadReturnMode_PARTIAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unblock/callback when no new data comes in. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UART2 return mode settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the return modes for <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref>.</para><para><ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637da183a4bd9f538e511bbbd6d91e6889037" kindref="member">UART2_ReadReturnMode_FULL</ref> unblocks or performs a callback when the read buffer has been filled with the number of bytes passed to <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref>. <ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637dae54481886c1c305f3f8fdf842bdb53c5" kindref="member">UART2_ReadReturnMode_PARTIAL</ref> unblocks or performs a callback whenever a read timeout error occurs on the UART peripheral. This timeout error is not the same as the blocking read timeout in the <ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref>; the read timeout occurs if the read FIFO is non-empty and no new data has been received for a device/baudrate dependent number of clock cycles. This mode can be used when the exact number of bytes to be read is not known. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="532" column="1" bodyfile="source/ti/drivers/UART2.h" bodystart="531" bodyend="538"/>
      </memberdef>
      <memberdef kind="enum" id="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515" prot="public" static="no">
        <name>UART2_DataLen</name>
        <enumvalue id="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515abf6427750460fb2f0d0cdfbd4a1dce9f" prot="public">
          <name>UART2_DataLen_5</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data length is 5 bits </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515ab53fa866e596d2ea28672962b30ea0d8" prot="public">
          <name>UART2_DataLen_6</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data length is 6 bits </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515ae669912970cfcd98fc5c5702f6256571" prot="public">
          <name>UART2_DataLen_7</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data length is 7 bits </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515abcb7ead4413215f0473c368f284ef729" prot="public">
          <name>UART2_DataLen_8</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data length is 8 bits </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UART2 data length settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the UART data lengths. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="546" column="1" bodyfile="source/ti/drivers/UART2.h" bodystart="545" bodyend="551"/>
      </memberdef>
      <memberdef kind="enum" id="_u_a_r_t2_8h_1ae0d2d6413d7e338fd053569d848c239f" prot="public" static="no">
        <name>UART2_StopBits</name>
        <enumvalue id="_u_a_r_t2_8h_1ae0d2d6413d7e338fd053569d848c239faa707a48589e67b81ac5a2f22342070e9" prot="public">
          <name>UART2_StopBits_1</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>One stop bit </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t2_8h_1ae0d2d6413d7e338fd053569d848c239fa59f4de55d4d1844a50efc38f0e99bc84" prot="public">
          <name>UART2_StopBits_2</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Two stop bits </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UART2 stop bit settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the UART2 stop bits. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="559" column="1" bodyfile="source/ti/drivers/UART2.h" bodystart="558" bodyend="562"/>
      </memberdef>
      <memberdef kind="enum" id="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994d" prot="public" static="no">
        <name>UART2_Parity</name>
        <enumvalue id="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994dafef829752e4d035a457dce76f23cec19" prot="public">
          <name>UART2_Parity_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No parity </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994da7e4737a62b3bb4385542849b38a4c058" prot="public">
          <name>UART2_Parity_EVEN</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Parity bit is even </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994da4a98084e16b8754a068fe9fb11c17ba5" prot="public">
          <name>UART2_Parity_ODD</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Parity bit is odd </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994dafc82a57ded8fec31003fe0b6520f1fa0" prot="public">
          <name>UART2_Parity_ZERO</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Parity bit is always zero </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994dae95a66e405093bb4a4c4f071facfa1c9" prot="public">
          <name>UART2_Parity_ONE</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Parity bit is always one </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UART2 parity type settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the UART2 parity types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="570" column="1" bodyfile="source/ti/drivers/UART2.h" bodystart="569" bodyend="576"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" prot="public" static="no">
        <type>struct <ref refid="struct_u_a_r_t2___config__" kindref="compound">UART2_Config_</ref> *</type>
        <definition>typedef struct UART2_Config_* UART2_Handle</definition>
        <argsstring></argsstring>
        <name>UART2_Handle</name>
        <briefdescription>
<para>A handle that is returned from a <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="433" column="1" bodyfile="source/ti/drivers/UART2.h" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_u_a_r_t2_8h_1a00d68ce47bb8b798f31c3338077d301a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* UART2_Callback) (UART2_Handle handle, void *buf, size_t count, void *userArg, int_fast16_t status)</definition>
        <argsstring>)(UART2_Handle handle, void *buf, size_t count, void *userArg, int_fast16_t status)</argsstring>
        <name>UART2_Callback</name>
        <briefdescription>
<para>The definition of a callback function used by the UART2 driver when used in <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref> The callback can occur in task or interrupt context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">UART2_Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>UART2_Handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to read/write buffer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements read/written</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">userArg</parametername>
</parameternamelist>
<parameterdescription>
<para>A user supplied argument specified in <ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">status</parametername>
</parameternamelist>
<parameterdescription>
<para>A UART2_STATUS code indicating success or failure of the transfer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="452" column="1" bodyfile="source/ti/drivers/UART2.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_u_a_r_t2_8h_1a50d9dec91001eb2649ac304bb3c809a3" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* UART2_EventCallback) (UART2_Handle handle, uint32_t event, uint32_t data, void *userArg)</definition>
        <argsstring>)(UART2_Handle handle, uint32_t event, uint32_t data, void *userArg)</argsstring>
        <name>UART2_EventCallback</name>
        <briefdescription>
<para>The definition of a callback function used by the UART driver. The callback can occur in task or interrupt context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">UART2_Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>UART2_Handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>UART2_EVENT that has occurred.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>- UART2_EVENT_OVERRUN: accumulated count<itemizedlist>
<listitem><para>UART2_EVENT_BREAK: unused</para></listitem><listitem><para>UART2_EVENT_PARITY: unused</para></listitem><listitem><para>UART2_EVENT_FRAMING: unused</para></listitem><listitem><para>UART2_EVENT_TX_BEGIN: unused</para></listitem><listitem><para>UART2_EVENT_TX_FINISHED: unused</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">userArg</parametername>
</parameternamelist>
<parameterdescription>
<para>A user supplied argument specified in <ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">status</parametername>
</parameternamelist>
<parameterdescription>
<para>A UART2_STATUS code indicating success or failure of the transfer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="475" column="1" bodyfile="source/ti/drivers/UART2.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_u_a_r_t2_8h_1a5a9ed8d3be24bf0ba355ec100f9eabbd" prot="public" static="no">
        <type>struct <ref refid="struct_u_a_r_t2___config__" kindref="compound">UART2_Config_</ref></type>
        <definition>typedef struct UART2_Config_  UART2_Config</definition>
        <argsstring></argsstring>
        <name>UART2_Config</name>
        <briefdescription>
<para>UART2 Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The UART2_Config structure contains a set of pointers used to characterize the UART2 driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="726" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_u_a_r_t2_8h_1a80d75291c42d2471b3c38dce6b6bdb0a" prot="public" static="no" mutable="no">
        <type>const <ref refid="_u_a_r_t2_8h_1a5a9ed8d3be24bf0ba355ec100f9eabbd" kindref="member">UART2_Config</ref></type>
        <definition>const UART2_Config UART2_config[]</definition>
        <argsstring>[]</argsstring>
        <name>UART2_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="728" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_u_a_r_t2_8h_1a9a11a7ad983146f408d8deb22b764710" prot="public" static="no" mutable="no">
        <type>const uint_least8_t</type>
        <definition>const uint_least8_t UART2_count</definition>
        <argsstring></argsstring>
        <name>UART2_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="729" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_u_a_r_t2_8h_1a2a82f370c2f15ececc5b03fbba65bcde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART2_close</definition>
        <argsstring>(UART2_Handle handle)</argsstring>
        <name>UART2_close</name>
        <param>
          <type><ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a UART peripheral specified by the UART2 handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref> has been called. </para></simplesect>
<simplesect kind="pre"><para>There are no ongoing read or write calls. Any ongoing read or write calls can be cancelled with <ref refid="_u_a_r_t2_8h_1aa8302b9b2d54d3f8a428a9225e267a41" kindref="member">UART2_readCancel()</ref> or <ref refid="_u_a_r_t2_8h_1a7052ce61a02ae90920d11c9bacddbf1e" kindref="member">UART2_writeCancel()</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref> returned from <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="743" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t2_8h_1a63fc2eca3cffea172c99d152f7d4ebd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART2_flushRx</definition>
        <argsstring>(UART2_Handle handle)</argsstring>
        <name>UART2_flushRx</name>
        <param>
          <type><ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to flush data in the UART RX FIFO. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref> has been called.</para></simplesect>
This function can be called to remove all data from the RX FIFO, for example, after a UART read error has occurred. All data in the RX circular buffer will be discarded.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref> returned from <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="756" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t2_8h_1a7740082039bb86c1ae0284422ccbd32b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t UART2_getRxCount</definition>
        <argsstring>(UART2_Handle handle)</argsstring>
        <name>UART2_getRxCount</name>
        <param>
          <type><ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Get the number of bytes available in the circular buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref> has been called.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref> returned from <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of bytes available in the RX circular buffer.</para></simplesect>
<simplesect kind="see"><para><ref refid="_u_a_r_t2_8h_1a4db9af45d9e95b8d93996432ddc124e2" kindref="member">UART2_rxEnable()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="770" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref></type>
        <definition>UART2_Handle UART2_open</definition>
        <argsstring>(uint_least8_t index, UART2_Params *params)</argsstring>
        <name>UART2_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize a given UART peripheral. </para>        </briefdescription>
        <detaileddescription>
<para>Function to initialize a given UART peripheral specified by the particular index value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the UART indexed into the UART2_config table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a parameter block. If NULL, default parameter values will be used. All the fields in this structure are read-only.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_u_a_r_t2_8h_1a2a82f370c2f15ececc5b03fbba65bcde" kindref="member">UART2_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="787" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t2_8h_1a8fd27db3b9bcca2fc88f65b2d26895d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART2_Params_init</definition>
        <argsstring>(UART2_Params *params)</argsstring>
        <name>UART2_Params_init</name>
        <param>
          <type><ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the <ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: readMode = UART2_Mode_BLOCKING; writeMode = UART2_Mode_BLOCKING; eventCallback = NULL; eventMask = 0; readCallback = NULL; writeCallback = NULL; readReturnMode = UART2_ReadReturnMode_PARTIAL; baudRate = 115200; dataLength = UART2_DataLen_8; stopBits = UART2_StopBits_1; parityType = UART2_Parity_NONE; userArg = NULL; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="809" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t UART2_read</definition>
        <argsstring>(UART2_Handle handle, void *buffer, size_t size, size_t *bytesRead)</argsstring>
        <name>UART2_read</name>
        <param>
          <type><ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bytesRead</declname>
        </param>
        <briefdescription>
<para>Function that reads data from a UART. </para>        </briefdescription>
        <detaileddescription>
<para>UART2_read() reads data from a UART controller. The destination is specified by <emphasis>buffer</emphasis> and the number of bytes to read is given by <emphasis>size</emphasis>.</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref>, UART2_read() blocks task execution until all the data in buffer has been read, if the read return mode is <ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637da183a4bd9f538e511bbbd6d91e6889037" kindref="member">UART2_ReadReturnMode_FULL</ref>. If the read return mode is <ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637dae54481886c1c305f3f8fdf842bdb53c5" kindref="member">UART2_ReadReturnMode_PARTIAL</ref>, UART2_read() returns before all the data has been read, if some data has been received, but reception has been inactive sufficiently long for a hardware read timeout to occur (e.g., for a 32-bit period). If a receive error occurs (e.g., framing, FIFO overrun), UART2_read() will return with the number of bytes read up to the occurance of the error.</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref>, UART2_read() does not block task execution. Instead, a callback function specified by <ref refid="struct_u_a_r_t2___params_1a72feec1f368666cc1d330400b0eec1c7" kindref="member">UART2_Params::readCallback</ref> is called when the transfer is finished (<ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637da183a4bd9f538e511bbbd6d91e6889037" kindref="member">UART2_ReadReturnMode_FULL</ref>), or reception has become inactive (<ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637dae54481886c1c305f3f8fdf842bdb53c5" kindref="member">UART2_ReadReturnMode_PARTIAL</ref>). The callback function can occur in the caller&apos;s context or in SWI context, depending on the device-specific implementation. An unfinished asynchronous read operation must always be cancelled using <ref refid="_u_a_r_t2_8h_1aa8302b9b2d54d3f8a428a9225e267a41" kindref="member">UART2_readCancel()</ref> before calling <ref refid="_u_a_r_t2_8h_1a2a82f370c2f15ececc5b03fbba65bcde" kindref="member">UART2_close()</ref>.</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref>, UART2_read() will return the minimum of size bytes and the number of bytes in the RX circular buffer. In this mode, the application should check the number of bytes returned in the bytesRead parameter. A status of success will be returned, even if not all bytes requested were read, unless no data is available or an error occured. If no data is available, a status of UART2_STATUS_EAGAIN is returned.</para><para><simplesect kind="note"><para>It is ok to call UART2_read() from its own callback function when in <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref> returned by <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an empty buffer to which received data should be read</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to be read into buffer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bytesRead</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, the location to store the number of bytes actually read into the buffer. If NULL, this parameter will be ignored. In callback mode, NULL could be passed in for this parameter, since the callback function will be passed the number of bytes read. In blocking mode, NULL can be passed, however, status should be checked in case the number of bytes requested was not received due to errors. In nonblocking mode, it is not recommended to pass NULL for this parameter, as it would be impossible to determine the number of bytes actually read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a status indicating success or failure of the read.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1ga50f50c06775b7ee13f45fe80c93fb356" kindref="member">UART2_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The call was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1ga0ec322208aa002ae4b058a410a387801" kindref="member">UART2_STATUS_EINUSE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Another read from the UART is currently ongoing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1ga30aee2c671977b6a716be98ac4c5e31c" kindref="member">UART2_STATUS_EAGAIN</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref>, no data is currently available. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1gad528e61ecc06c90d5824796ce547ecb7" kindref="member">UART2_STATUS_ECANCELLED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref>, the read was canceled by a call to <ref refid="_u_a_r_t2_8h_1aa8302b9b2d54d3f8a428a9225e267a41" kindref="member">UART2_readCancel()</ref> before any data could be received. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="879" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t2_8h_1a0f025f78353515c8b0050f9d41596969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t UART2_readTimeout</definition>
        <argsstring>(UART2_Handle handle, void *buffer, size_t size, size_t *bytesRead, uint32_t timeout)</argsstring>
        <name>UART2_readTimeout</name>
        <param>
          <type><ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bytesRead</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Function that reads data from a UART, with a specified timeout for blocking mode. </para>        </briefdescription>
        <detaileddescription>
<para>UART2_readTimeout() reads data from a UART controller. The destination is specified by <emphasis>buffer</emphasis> and the number of bytes to read is given by <emphasis>size</emphasis>.</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref> with <ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637da183a4bd9f538e511bbbd6d91e6889037" kindref="member">UART2_ReadReturnMode_FULL</ref>, UART2_readTimeout() blocks task execution until all the data in buffer has been read, or the specified timeout has elapsed. In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref> with <ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637dae54481886c1c305f3f8fdf842bdb53c5" kindref="member">UART2_ReadReturnMode_PARTIAL</ref>, UART2_readTimeout() returns before all the data has been read, if some data has been received, but reception has been inactive sufficiently long for a hardware read timeout to occur (e.g., for a 32-bit period). UART2_readTimeout() will also return if the specified timeout parameter has elapsed. Note that the timeout parameter is different from the hardware read timeout.</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref>, UART2_readTimeout() does not block task execution. Instead, a callback function specified by <ref refid="struct_u_a_r_t2___params_1a72feec1f368666cc1d330400b0eec1c7" kindref="member">UART2_Params::readCallback</ref> is called when the transfer is finished (<ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637da183a4bd9f538e511bbbd6d91e6889037" kindref="member">UART2_ReadReturnMode_FULL</ref>), or reception has become inactive (<ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637dae54481886c1c305f3f8fdf842bdb53c5" kindref="member">UART2_ReadReturnMode_PARTIAL</ref>). The callback function can occur in the caller&apos;s context or in HWI context, depending on the device-specific implementation. An unfinished asynchronous read operation must always be cancelled using <ref refid="_u_a_r_t2_8h_1aa8302b9b2d54d3f8a428a9225e267a41" kindref="member">UART2_readCancel()</ref> before calling <ref refid="_u_a_r_t2_8h_1a2a82f370c2f15ececc5b03fbba65bcde" kindref="member">UART2_close()</ref>. In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref>, the timeout parameter passed to UART2_readTimeout(), is ignored.</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref>, UART2_readTimeout() will return the minimum of size and the number of data in the RX circular buffer. In this mode, the application should check the number of bytes read in the bytesRead parameter. A status of success will be returned if one or more bytes is available, unless an error occured. In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref>, the timeout parameter passed to UART2_readTimeout(), is ignored.</para><para><simplesect kind="note"><para>It is ok to call UART2_readTimeout() from its own callback function when in <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref> returned by <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an empty buffer to which received data should be read</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to be read into buffer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bytesRead</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, the location to store the number of bytes actually read into the buffer. If NULL, this parameter will be ignored. In callback mode, NULL could be passed in for this parameter, since the callback function will be passed the number of bytes read. Similarly, in blocking mode with infinite timeout, NULL can be passed. However, status should be checked in case the number of bytes requested was not received due to errors. In nonblocking mode, it is not recommended to pass NULL for this parameter, as it would be impossible to determine the number of bytes actually read.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of system clock ticks to wait until all data is received. If not all requested data was received within the timeout period, an error of UART2_STATUS_ETIMEOUT will be returned. This parameter is only applicable to <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a status indicating success or failure of the read.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1ga50f50c06775b7ee13f45fe80c93fb356" kindref="member">UART2_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The call was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1ga0ec322208aa002ae4b058a410a387801" kindref="member">UART2_STATUS_EINUSE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Another read from the UART is currently ongoing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1ga30aee2c671977b6a716be98ac4c5e31c" kindref="member">UART2_STATUS_EAGAIN</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref>, no data is currently available. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1gad528e61ecc06c90d5824796ce547ecb7" kindref="member">UART2_STATUS_ECANCELLED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref>, the read was canceled by a call to <ref refid="_u_a_r_t2_8h_1aa8302b9b2d54d3f8a428a9225e267a41" kindref="member">UART2_readCancel()</ref> before any data could be received. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1gaeb708c48cd2517f08660196f16d31a33" kindref="member">UART2_STATUS_ETIMEOUT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The read operation timed out. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="965" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t2_8h_1aa8302b9b2d54d3f8a428a9225e267a41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART2_readCancel</definition>
        <argsstring>(UART2_Handle handle)</argsstring>
        <name>UART2_readCancel</name>
        <param>
          <type><ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function that cancels a <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> function call. </para>        </briefdescription>
        <detaileddescription>
<para>This function cancels an asynchronous <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> operation in in <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref>, or unblocks a <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> call in <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref>. In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref>, <ref refid="_u_a_r_t2_8h_1aa8302b9b2d54d3f8a428a9225e267a41" kindref="member">UART2_readCancel()</ref> calls the registered read callback function with the number of bytes received so far. It is the application&apos;s responsibility to check the count argument in the callback function and handle the case where only a subset of the bytes were received. The callback function will be passed a status of <ref refid="group___u_a_r_t2___s_t_a_t_u_s_1gad528e61ecc06c90d5824796ce547ecb7" kindref="member">UART2_STATUS_ECANCELLED</ref>.</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref>, <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> will return <ref refid="group___u_a_r_t2___s_t_a_t_u_s_1gad528e61ecc06c90d5824796ce547ecb7" kindref="member">UART2_STATUS_ECANCELLED</ref>, and the bytesRead parameter will be set to the number of bytes received so far.</para><para>This API has no affect in <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref> returned by <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="992" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t UART2_write</definition>
        <argsstring>(UART2_Handle handle, const void *buffer, size_t size, size_t *bytesWritten)</argsstring>
        <name>UART2_write</name>
        <param>
          <type><ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bytesWritten</declname>
        </param>
        <briefdescription>
<para>Function that writes data to a UART. </para>        </briefdescription>
        <detaileddescription>
<para>UART2_write() writes data from a memory buffer to the UART interface. The source is specified by <emphasis>buffer</emphasis> and the number of bytes to write is given by <emphasis>size</emphasis>.</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref>, <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> blocks task execution until all the data in buffer has been transmitted onto the TX pin.</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref>, UART2_write() does not block task execution. Instead, a callback function specified by <ref refid="struct_u_a_r_t2___params_1aadcf916de5cdd5591997d289f03ccfdd" kindref="member">UART2_Params::writeCallback</ref> is called when all data has been written to the hardware FIFO. This means that that driver is ready to accept another call to <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref>. <simplesect kind="note"><para>In contrast to <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref>, it is not guaranteed that all data has been transmitted onto the TX pin when callback is invoked. This is instead signalled by the event UART2_EVENT_TX_FINISHED.</para></simplesect>
The buffer passed to <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> in <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref> is not copied. The buffer must remain coherent until all the characters have been sent (ie until the write callback has been called with a byte count equal to that passed to <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref>). The callback function can occur in the caller&apos;s task context or in interrupt context, depending on the device implementation. An unfinished asynchronous write operation must always be cancelled using <ref refid="_u_a_r_t2_8h_1a7052ce61a02ae90920d11c9bacddbf1e" kindref="member">UART2_writeCancel()</ref> before calling <ref refid="_u_a_r_t2_8h_1a2a82f370c2f15ececc5b03fbba65bcde" kindref="member">UART2_close()</ref>.</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref>, <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> will send out as many of the bytes in the buffer as possible, until the TX circular buffer is full. In nonblocking mode, <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> can be called from any context. The bytesWritten parameter should not be NULL so the application can determine the number of bytes actually written.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref> returned by <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A read-only pointer to buffer containing data to be written to the UART</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in the buffer that should be written to the UART</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bytesWritten</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, the location to store the number of bytes actually written to the UART in UART2_Mode_BLOCKING and UART2_Mode_NONBLOCKING. In UART2_Mode_CALLBACK, bytesWritten will be set to 0. If bytesWritten is NULL, this parameter will be ignored. In nonblocking mode, it is not recommended to pass NULL for bytesWritten, as the application would have no way to determine the number of bytes actually written. In nonblocking mode, a status of success will be returned even if not all the requested bytes could be written.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a status indicating success or failure of the write.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1ga50f50c06775b7ee13f45fe80c93fb356" kindref="member">UART2_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The call was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1ga0ec322208aa002ae4b058a410a387801" kindref="member">UART2_STATUS_EINUSE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Another write to the UART is currently ongoing. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="1055" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t2_8h_1a96db1cdb4fd1a5bfa856ead55297d95e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART2_rxDisable</definition>
        <argsstring>(UART2_Handle handle)</argsstring>
        <name>UART2_rxDisable</name>
        <param>
          <type><ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function that disables collecting of RX data into the circular buffer. </para>        </briefdescription>
        <detaileddescription>
<para>The driver implementation uses a circular buffer to collect RX data while a <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> is not in progress. This function will disable buffering of RX data into the circular buffer. <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> will read directly from the UART driver&apos;s RX buffer. Disabling the circular buffer will also allow the device to go into low power modes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref> returned by <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_u_a_r_t2_8h_1a4db9af45d9e95b8d93996432ddc124e2" kindref="member">UART2_rxEnable()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="1071" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t2_8h_1a4db9af45d9e95b8d93996432ddc124e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART2_rxEnable</definition>
        <argsstring>(UART2_Handle handle)</argsstring>
        <name>UART2_rxEnable</name>
        <param>
          <type><ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function that enables collecting of RX data into the circular buffer. </para>        </briefdescription>
        <detaileddescription>
<para>The driver implementation uses a circular buffer to collect RX data while a <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> is not in progress. This function will enable buffering of RX data into the circular buffer. <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> will read directly from the UART drivers RX buffer. Enabling the circular buffer will also prevent the device from going into low power modes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref> returned by <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_u_a_r_t2_8h_1a96db1cdb4fd1a5bfa856ead55297d95e" kindref="member">UART2_rxDisable()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="1087" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t2_8h_1adc4b4c351fc4fb2663d6737a0cd4c7db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t UART2_writeTimeout</definition>
        <argsstring>(UART2_Handle handle, const void *buffer, size_t size, size_t *bytesWritten, uint32_t timeout)</argsstring>
        <name>UART2_writeTimeout</name>
        <param>
          <type><ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bytesWritten</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Function that writes data to a UART, with a specified timeout. </para>        </briefdescription>
        <detaileddescription>
<para>UART2_writeTimeout() writes data from a memory buffer to the UART interface. The source is specified by <emphasis>buffer</emphasis> and the number of bytes to write is given by <emphasis>size</emphasis>. A timeout in system clock ticks specifies the maximum time to wait until all data is written (<ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref> only).</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref>, <ref refid="_u_a_r_t2_8h_1adc4b4c351fc4fb2663d6737a0cd4c7db" kindref="member">UART2_writeTimeout()</ref> blocks task execution until all the data in buffer has been transmitted, or the timeout expires.</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref>, UART2_writeTimeout() does not block task execution. Instead, a callback function specified by <ref refid="struct_u_a_r_t2___params_1aadcf916de5cdd5591997d289f03ccfdd" kindref="member">UART2_Params::writeCallback</ref> is called when all data has been written to the hardware FIFO. This means that that driver is ready to accept another call to <ref refid="_u_a_r_t2_8h_1adc4b4c351fc4fb2663d6737a0cd4c7db" kindref="member">UART2_writeTimeout()</ref>. <simplesect kind="note"><para>In contrast to <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref>, it is not guaranteed that all data has been transmitted onto the TX pin when callback is invoked. This is instead signalled by the event UART2_EVENT_TX_FINISHED.</para></simplesect>
The buffer passed to <ref refid="_u_a_r_t2_8h_1adc4b4c351fc4fb2663d6737a0cd4c7db" kindref="member">UART2_writeTimeout()</ref> in <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref> is not copied. The buffer must remain coherent until all the characters have been sent (ie until the write callback has been called with a byte count equal to that passed to <ref refid="_u_a_r_t2_8h_1adc4b4c351fc4fb2663d6737a0cd4c7db" kindref="member">UART2_writeTimeout()</ref>). The callback function can occur in the caller&apos;s task context or in interrupt context, depending on the device implementation. An unfinished asynchronous write operation must always be cancelled using <ref refid="_u_a_r_t2_8h_1a7052ce61a02ae90920d11c9bacddbf1e" kindref="member">UART2_writeCancel()</ref> before calling <ref refid="_u_a_r_t2_8h_1a2a82f370c2f15ececc5b03fbba65bcde" kindref="member">UART2_close()</ref>.</para><para>In <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref>, <ref refid="_u_a_r_t2_8h_1adc4b4c351fc4fb2663d6737a0cd4c7db" kindref="member">UART2_writeTimeout()</ref> will send out as many of the bytes in the buffer as possible, until the TX FIFO is full. In nonblocking mode, <ref refid="_u_a_r_t2_8h_1adc4b4c351fc4fb2663d6737a0cd4c7db" kindref="member">UART2_writeTimeout()</ref> is nonblocking and can be called from any context. The bytesWritten parameter should not be NULL so the application can determine the number of bytes actually written.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref> returned by <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A read-only pointer to buffer containing data to be written to the UART</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in the buffer that should be written to the UART</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bytesWritten</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, the location to store the number of bytes actually written to the UART in UART2_Mode_BLOCKING and UART2_Mode_NONBLOCKING. In UART2_Mode_CALLBACK, bytesWritten will be set to 0. If bytesWritten is NULL, this parameter will be ignored. In nonblocking mode, it is not recommended to pass NULL for bytesWritten, as the application would have no way to determine the number of bytes actually written. In nonblocking mode, a status of success will be returned even if not all the requested bytes could be written.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of system clock ticks to wait for the write to complete (<ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref> only). If the timeout expires before all bytes are written, a status of UART2_STATUS_ETIMEOUT will be returned.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a status indicating success or failure of the write.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1ga50f50c06775b7ee13f45fe80c93fb356" kindref="member">UART2_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The call was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1ga0ec322208aa002ae4b058a410a387801" kindref="member">UART2_STATUS_EINUSE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Another write to the UART is currently ongoing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="group___u_a_r_t2___s_t_a_t_u_s_1gaeb708c48cd2517f08660196f16d31a33" kindref="member">UART2_STATUS_ETIMEOUT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The write operation timed out. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="1158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t2_8h_1a7052ce61a02ae90920d11c9bacddbf1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART2_writeCancel</definition>
        <argsstring>(UART2_Handle handle)</argsstring>
        <name>UART2_writeCancel</name>
        <param>
          <type><ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function that cancels a <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> function call. </para>        </briefdescription>
        <detaileddescription>
<para>This function cancels an asynchronous <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> operation when write mode is <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref>, or an ongoing <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> in <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref>. In callback mode, <ref refid="_u_a_r_t2_8h_1a7052ce61a02ae90920d11c9bacddbf1e" kindref="member">UART2_writeCancel()</ref> calls the registered write callback function no matter how many bytes were sent. It is the application&apos;s responsibility to check the count argument in the callback function and handle cases where only a subset of the bytes were sent. The callback function will be passed a status of <ref refid="group___u_a_r_t2___s_t_a_t_u_s_1gad528e61ecc06c90d5824796ce547ecb7" kindref="member">UART2_STATUS_ECANCELLED</ref>. In blocking mode, <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> will return <ref refid="group___u_a_r_t2___s_t_a_t_u_s_1gad528e61ecc06c90d5824796ce547ecb7" kindref="member">UART2_STATUS_ECANCELLED</ref>.</para><para><simplesect kind="note"><para>The above applies to UART2_writeTimeout() as well.</para></simplesect>
This API has no affect in nonblocking mode.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref> returned by <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/UART2.h" line="1184" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><bold>PRELIMINARY</bold> UART driver interface </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><bold>WARNING</bold> These APIs are <bold>PRELIMINARY</bold>, and subject to change in the next few months.</para><para>The UART2 driver is an updated version of the UART driver. The name UART2 was given due to changes in the API, to support backwards compatibility with applications using the existing UART driver. Key differences between the UART and UART2 drivers:<itemizedlist>
<listitem><para>UART2 has both RX and TX ring buffers for receiving/sending data.</para></listitem><listitem><para>UART2 uses DMA to transfer data between the UART FIFOs and the RX and TX ring buffers (in nonblocking mode). In blocking mode and callback mode, DMA will transfer data straight between the hardware FIFO and the source/destination buffer supplied by the application. NOTE: If the source-buffer for a TX operation resides in flash, the driver will constrain the flash to remain on during idle.</para></listitem><listitem><para>The UART2 APIs for reading and writing data have been made more posix-like.</para></listitem><listitem><para>UART2 provides for event notification, allowing the application to receive TX start and completion events, and RX error events. <simplesect kind="note"><para>These events are synchronous to what can be observed on the data lines. A UART2_EVENT_TX_FINISHED event will for example only occur after all data has been shifted from the hardware FIFO out onto the TX-pin. In contrast, read and write-callbacks are invoked when the driver has finished writing data into the hardware FIFO.</para></simplesect>
To use the UART2 driver, ensure that the correct driver library for your device is linked in and include this header file as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/UART2.h&gt;</highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para>This module serves as the main interface for applications. Its purpose is to implement common code between the device specific implementations of UART2. Any device specific code that differs from the common code is called through functions prefaced with the &quot;UART2_&quot; naming convention. These functions are implemented in each device specific implementation.</para><para><anchor id="_u_a_r_t2_8h_1ti_drivers_UART2_Overview"/><heading level="1">Overview</heading>
</para><para>A UART is used to translate data between the chip and a serial port. The UART2 driver simplifies reading and writing to any of the UART peripherals on the board, with multiple modes of operation and performance. These include blocking and nonblocking modes.</para><para>The UART2 driver interface provides device independent APIs, data types, and macros. The APIs in this driver serve as an interface to a typical RTOS application. The specific peripheral implementations are responsible for creating all the RTOS specific primitives to allow for thread-safe operation.</para><para><hruler/>
 <anchor id="_u_a_r_t2_8h_1ti_drivers_UART2_Usage"/><heading level="1">Usage</heading>
</para><para>This documentation provides a basic <ref refid="_u_a_r_t2_8h_1ti_drivers_UART2_Synopsis" kindref="member">usage summary</ref> and a set of <ref refid="_u_a_r_t2_8h_1ti_drivers_UART2_Examples" kindref="member">examples</ref> in the form of commented code fragments. Detailed descriptions of the APIs are provided in subsequent sections.</para><para><anchor id="_u_a_r_t2_8h_1ti_drivers_UART2_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_u_a_r_t2_8h_1ti_drivers_UART2_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>the<sp/>UART2<sp/>driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/UART2.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>UART2<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">UART2_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">UART2_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.baudRate<sp/>=<sp/>9600;</highlight></codeline>
<codeline><highlight class="normal">params.readMode<sp/>=<sp/>UART2_Mode_BLOCKING;</highlight></codeline>
<codeline><highlight class="normal">params.writeMode<sp/>=<sp/>UART2_Mode_BLOCKING;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>the<sp/>UART</highlight></codeline>
<codeline><highlight class="normal">UART2_Handle<sp/>uart;</highlight></codeline>
<codeline><highlight class="normal">uart<sp/>=<sp/>UART2_open(CONFIG_UART0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Enable<sp/>receiver,<sp/>inhibit<sp/>low<sp/>power<sp/>mode</highlight></codeline>
<codeline><highlight class="normal">UART2_rxEnable(uart);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Read<sp/>from<sp/>the<sp/>UART.</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/><sp/>bytesRead;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>buffer[BUFSIZE];</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>status;</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>UART2_read(uart,<sp/>buffer,<sp/>BUFSIZE,<sp/>&amp;bytesRead);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Write<sp/>to<sp/>the<sp/>UART</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/><sp/>bytesWritten;</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>UART2_write(uart,<sp/>buffer,<sp/>BUFSIZE,<sp/>&amp;bytesWritten);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Close<sp/>the<sp/>UART</highlight></codeline>
<codeline><highlight class="normal">UART2_close(uart);</highlight></codeline>
</programlisting></para><para><hruler/>
 <anchor id="_u_a_r_t2_8h_1ti_drivers_UART2_Examples"/><heading level="1">Examples</heading>
</para><para>The following code example opens a UART instance, reads a byte from the UART, and then writes the byte back to the UART.</para><para><programlisting><codeline><highlight class="normal">char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input;</highlight></codeline>
<codeline><highlight class="normal">UART2_Handle<sp/>uart;</highlight></codeline>
<codeline><highlight class="normal">UART2_Params<sp/>uartParams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>UART2<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">UART2_Params_init(&amp;uartParams);</highlight></codeline>
<codeline><highlight class="normal">uartParams.baudRate<sp/>=<sp/>115200;</highlight></codeline>
<codeline><highlight class="normal">uart<sp/>=<sp/>UART2_open(CONFIG_UART0,<sp/>&amp;uartParams);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(uart<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>UART2_open()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Enable<sp/>receiver,<sp/>inhibit<sp/>low<sp/>power<sp/>mode</highlight></codeline>
<codeline><highlight class="normal">UART2_rxEnable(uart);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Loop<sp/>forever<sp/>echoing</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>UART2_read(uart,<sp/>&amp;input,<sp/>1,<sp/>&amp;bytesRead);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>UART2_write(uart,<sp/>&amp;input,<sp/>1,<sp/>&amp;bytesWritten);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Details for the example code above are described in the following subsections.</para><para><heading level="3">Opening the UART2 Driver</heading>
</para><para>Opening a UART requires four steps:<orderedlist>
<listitem><para>Create and initialize a <ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref> structure.</para></listitem><listitem><para>Fill in the desired parameters.</para></listitem><listitem><para>Call <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref>, passing the index of the UART in the UART2_config structure, and the address of the <ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref> structure. The UART2 instance is specified by the index in the UART2_config structure.</para></listitem><listitem><para>Check that the UART2 handle returned by <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref> is non-NULL, and save it. The handle will be used to read and write to the UART you just opened.</para></listitem></orderedlist>
</para><para>Only one UART index can be used at a time; calling <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref> a second time with the same index previosly passed to <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref> will result in an error. You can, though, re-use the index if the instance is closed via <ref refid="_u_a_r_t2_8h_1a2a82f370c2f15ececc5b03fbba65bcde" kindref="member">UART2_close()</ref>. In the previous example code, CONFIG_UART0 is passed to <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref>. This macro is defined in the example&apos;s ti_drivers_config.h file.</para><para><heading level="3">Modes of Operation</heading>
</para><para>The UART driver can operate in blocking, nonblocking, or callback mode, by setting the writeMode and readMode parameters passed to <ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open()</ref>. If these parameters are not set, as in the example code, the UART2 driver defaults to blocking mode. Options for the writeMode and readMode parameters are <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref>, <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref>, and <ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref>:</para><para><itemizedlist>
<listitem><para><ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref> uses a semaphore to block while data is being sent, or while waiting for some data to be received. The context of calling <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> and <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> in blocking mode must always be a Task. The <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> call will block until all data has been transmitted onto the TX pin. The <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> calls can be configured to have two different behaviors, using the <ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637d" kindref="member">UART2_ReadReturnMode</ref> of the <ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref>. In <ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637da183a4bd9f538e511bbbd6d91e6889037" kindref="member">UART2_ReadReturnMode_FULL</ref> (the default), <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> will block until the requested number of bytes has been received. In <ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637dae54481886c1c305f3f8fdf842bdb53c5" kindref="member">UART2_ReadReturnMode_PARTIAL</ref>, <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> will block until either the requested number of bytes has been received, or a UART hardware read timeout has occurred. Using UART2_ReadReturnMode_PARTIAL is a good choice if the number of incoming data bytes is unknown. In UART2_Mode_BLOCKING, <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> will always return at least some data. <ref refid="_u_a_r_t2_8h_1a0f025f78353515c8b0050f9d41596969" kindref="member">UART2_readTimeout()</ref> can be used to specify a timeout in system clock ticks, to wait for data. <ref refid="_u_a_r_t2_8h_1a0f025f78353515c8b0050f9d41596969" kindref="member">UART2_readTimeout()</ref> will return when all data is received, or the specified timeout expires, or, if using the mode UART2_ReadReturnMode_PARTIAL, a hardware read timeout occurs, whichever happens first.</para></listitem><listitem><para><ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref> does not block waiting for data to be sent or received. <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> and <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> will return immediately having transferred as much data as the driver can immediately accept or has available, respectively. If no data can be accepted or received, <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> and <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> return UART2_STATUS_EAGAIN.</para></listitem><listitem><para><ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref> is nonblocking and <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> and <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> will return while data is being sent in the context of a hardware interrupt. When all data has been read from, or written to the hardware FIFO, the UART2 driver will call the user&apos;s callback function, and the driver is ready to accept another read or write operation. <simplesect kind="note"><para>When transmitting, it is therefore not guaranteed that all data has been shifted out to the TX pin when the write-callback is invoked. This is instead signalled by the UART2_EVENT_TX_FINISHED event. In some cases, the UART data transfer may have been cancelled, so the number of bytes sent/received are passed to the callback function. Your implementation of the callback function can use this information as needed. Since the user&apos;s callback may be called in the context of a hardware interrupt, the callback function must not make any RTOS blocking calls. The buffer passed to <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> in UART2_Mode_CALLBACK must remain coherent until all the characters have been sent (ie until the tx callback has been called with a byte count equal to that passed to <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref>).</para></simplesect>
<heading level="3">Enabling the Receiver</heading>
</para></listitem></itemizedlist>
</para><para>The example code enables the collection of data into the RX ring buffer <emphasis>before</emphasis> the first call to <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref>:</para><para><programlisting><codeline><highlight class="normal">UART2_rxEnable(uart);</highlight></codeline>
</programlisting></para><para>Note that this call is not necessary if the first <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> is called in time to prevent the RX FIFO from overrun, or if flow control is used.</para><para><heading level="3">Reading and Writing Data</heading>
</para><para>The example code reads one byte frome the UART instance, and then writes one byte back to the same instance:</para><para><programlisting><codeline><highlight class="normal">status<sp/>=<sp/>UART2_read(uart,<sp/>&amp;input,<sp/>1,<sp/>&amp;bytesRead);</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>UART2_write(uart,<sp/>&amp;input,<sp/>1,<sp/>&amp;bytesWritten);</highlight></codeline>
</programlisting></para><para>The UART2 driver allows full duplex data transfers. Therefore, it is possible to call <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> and <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref> at the same time. It is not possible, however, to issue multiple concurrent operations in the same direction. For example, if one thread calls UART2_read(uart0, buffer0...), any other thread attempting UART2_read(uart0, buffer1...) will result in an error of UART2_STATUS_EINUSE, until all the data from the first <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> has been transferred to buffer0. This applies to blocking, callback, and nonblocking modes. So applications must either synchronize <ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read()</ref> (or <ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write()</ref>) calls that use the same UART handle, or check for the UART2_STATUS_EINUSE return code indicating that a transfer is still ongoing.</para><para><hruler/>
 <anchor id="_u_a_r_t2_8h_1ti_drivers_UART2_Configuration"/><heading level="1">Configuration</heading>
</para><para>Refer to the <ref refid="index_1driver_configuration" kindref="member">Driver&apos;s Configuration</ref> section for driver configuration information. <hruler/>
 <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2022,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!*****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART2.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>&lt;b&gt;PRELIMINARY&lt;/b&gt;<sp/>UART<sp/>driver<sp/>interface</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>&lt;b&gt;WARNING&lt;/b&gt;<sp/>These<sp/>APIs<sp/>are<sp/>&lt;b&gt;PRELIMINARY&lt;/b&gt;,<sp/>and<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>change<sp/>in<sp/>the<sp/>next<sp/>few<sp/>months.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>UART2<sp/>driver<sp/>is<sp/>an<sp/>updated<sp/>version<sp/>of<sp/>the<sp/>UART<sp/>driver.<sp/><sp/>The<sp/>name</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>UART2<sp/>was<sp/>given<sp/>due<sp/>to<sp/>changes<sp/>in<sp/>the<sp/>API,<sp/>to<sp/>support<sp/>backwards</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>compatibility<sp/>with<sp/>applications<sp/>using<sp/>the<sp/>existing<sp/>UART<sp/>driver.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>Key<sp/>differences<sp/>between<sp/>the<sp/>UART<sp/>and<sp/>UART2<sp/>drivers:</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>UART2<sp/>has<sp/>both<sp/>RX<sp/>and<sp/>TX<sp/>ring<sp/>buffers<sp/>for<sp/>receiving/sending<sp/>data.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>UART2<sp/>uses<sp/>DMA<sp/>to<sp/>transfer<sp/>data<sp/>between<sp/>the<sp/>UART<sp/>FIFOs<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RX<sp/>and<sp/>TX<sp/>ring<sp/>buffers<sp/>(in<sp/>nonblocking<sp/>mode).<sp/>In<sp/>blocking<sp/>mode<sp/>and</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback<sp/>mode,<sp/>DMA<sp/>will<sp/>transfer<sp/>data<sp/>straight<sp/>between<sp/>the<sp/>hardware</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIFO<sp/>and<sp/>the<sp/>source/destination<sp/>buffer<sp/>supplied<sp/>by<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOTE:<sp/>If<sp/>the<sp/>source-buffer<sp/>for<sp/>a<sp/>TX<sp/>operation<sp/>resides<sp/>in<sp/>flash,</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>driver<sp/>will<sp/>constrain<sp/>the<sp/>flash<sp/>to<sp/>remain<sp/>on<sp/>during<sp/>idle.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>The<sp/>UART2<sp/>APIs<sp/>for<sp/>reading<sp/>and<sp/>writing<sp/>data<sp/>have<sp/>been<sp/>made<sp/>more</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posix-like.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>UART2<sp/>provides<sp/>for<sp/>event<sp/>notification,<sp/>allowing<sp/>the<sp/>application</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>receive<sp/>TX<sp/>start<sp/>and<sp/>completion<sp/>events,<sp/>and<sp/>RX<sp/>error<sp/>events.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@note<sp/>These<sp/>events<sp/>are<sp/>synchronous<sp/>to<sp/>what<sp/>can<sp/>be<sp/>observed<sp/>on<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines.<sp/>A<sp/>UART2_EVENT_TX_FINISHED<sp/>event<sp/>will<sp/>for<sp/>example<sp/>only<sp/>occur</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/>all<sp/>data<sp/>has<sp/>been<sp/>shifted<sp/>from<sp/>the<sp/>hardware<sp/>FIFO<sp/>out<sp/>onto<sp/>the</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TX-pin.<sp/>In<sp/>contrast,<sp/>read<sp/>and<sp/>write-callbacks<sp/>are<sp/>invoked<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>driver<sp/>has<sp/>finished<sp/>writing<sp/>data<sp/>into<sp/>the<sp/>hardware<sp/>FIFO.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>use<sp/>the<sp/>UART2<sp/>driver,<sp/>ensure<sp/>that<sp/>the<sp/>correct<sp/>driver<sp/>library<sp/>for<sp/>your</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>device<sp/>is<sp/>linked<sp/>in<sp/>and<sp/>include<sp/>this<sp/>header<sp/>file<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/UART2.h&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>module<sp/>serves<sp/>as<sp/>the<sp/>main<sp/>interface<sp/>for<sp/>applications.<sp/><sp/>Its<sp/>purpose</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>is<sp/>to<sp/>implement<sp/>common<sp/>code<sp/>between<sp/>the<sp/>device<sp/>specific<sp/>implementations</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>UART2.<sp/>Any<sp/>device<sp/>specific<sp/>code<sp/>that<sp/>differs<sp/>from<sp/>the<sp/>common<sp/>code<sp/>is</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>called<sp/>through<sp/>functions<sp/>prefaced<sp/>with<sp/>the<sp/>&quot;UART2_&quot;<sp/>naming<sp/>convention.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>These<sp/>functions<sp/>are<sp/>implemented<sp/>in<sp/>each<sp/>device<sp/>specific<sp/>implementation.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_UART2_Overview</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>UART<sp/>is<sp/>used<sp/>to<sp/>translate<sp/>data<sp/>between<sp/>the<sp/>chip<sp/>and<sp/>a<sp/>serial<sp/>port.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>UART2<sp/>driver<sp/>simplifies<sp/>reading<sp/>and<sp/>writing<sp/>to<sp/>any<sp/>of<sp/>the<sp/>UART</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/>peripherals<sp/>on<sp/>the<sp/>board,<sp/>with<sp/>multiple<sp/>modes<sp/>of<sp/>operation<sp/>and<sp/>performance.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>These<sp/>include<sp/>blocking<sp/>and<sp/>nonblocking<sp/>modes.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>UART2<sp/>driver<sp/>interface<sp/>provides<sp/>device<sp/>independent<sp/>APIs,<sp/>data<sp/>types,</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>macros.<sp/>The<sp/>APIs<sp/>in<sp/>this<sp/>driver<sp/>serve<sp/>as<sp/>an<sp/>interface<sp/>to<sp/>a<sp/>typical<sp/>RTOS</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>application.<sp/>The<sp/>specific<sp/>peripheral<sp/>implementations<sp/>are<sp/>responsible<sp/>for</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>creating<sp/>all<sp/>the<sp/>RTOS<sp/>specific<sp/>primitives<sp/>to<sp/>allow<sp/>for<sp/>thread-safe</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>operation.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_UART2_Usage</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>documentation<sp/>provides<sp/>a<sp/>basic<sp/>@ref<sp/>ti_drivers_UART2_Synopsis</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>&quot;usage<sp/>summary&quot;<sp/>and<sp/>a<sp/>set<sp/>of<sp/>@ref<sp/>ti_drivers_UART2_Examples<sp/>&quot;examples&quot;</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>the<sp/>form<sp/>of<sp/>commented<sp/>code<sp/>fragments.<sp/><sp/>Detailed<sp/>descriptions<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>APIs<sp/>are<sp/>provided<sp/>in<sp/>subsequent<sp/>sections.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_UART2_Synopsis</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Synopsis</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_UART2_Synopsis_Code</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Import<sp/>the<sp/>UART2<sp/>driver<sp/>definitions</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/UART2.h&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Initialize<sp/>UART2<sp/>parameters</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/>UART2_Params<sp/>params;</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>UART2_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>params.baudRate<sp/>=<sp/>9600;</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>params.readMode<sp/>=<sp/>UART2_Mode_BLOCKING;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>params.writeMode<sp/>=<sp/>UART2_Mode_BLOCKING;</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Open<sp/>the<sp/>UART</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>UART2_Handle<sp/>uart;</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>uart<sp/>=<sp/>UART2_open(CONFIG_UART0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Enable<sp/>receiver,<sp/>inhibit<sp/>low<sp/>power<sp/>mode</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>UART2_rxEnable(uart);</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Read<sp/>from<sp/>the<sp/>UART.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/>size_t<sp/><sp/>bytesRead;</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>buffer[BUFSIZE];</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>int32_t<sp/>status;</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>status<sp/>=<sp/>UART2_read(uart,<sp/>buffer,<sp/>BUFSIZE,<sp/>&amp;bytesRead);</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Write<sp/>to<sp/>the<sp/>UART</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>size_t<sp/><sp/>bytesWritten;</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/>status<sp/>=<sp/>UART2_write(uart,<sp/>buffer,<sp/>BUFSIZE,<sp/>&amp;bytesWritten);</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Close<sp/>the<sp/>UART</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/>UART2_close(uart);</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_UART2_Examples</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Examples</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>following<sp/>code<sp/>example<sp/>opens<sp/>a<sp/>UART<sp/>instance,<sp/>reads</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>byte<sp/>from<sp/>the<sp/>UART,<sp/>and<sp/>then<sp/>writes<sp/>the<sp/>byte<sp/>back<sp/>to<sp/>the<sp/>UART.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input;</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>UART2_Handle<sp/>uart;</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>UART2_Params<sp/>uartParams;</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>Open<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>UART2<sp/>driver</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>UART2_Params_init(&amp;uartParams);</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>uartParams.baudRate<sp/>=<sp/>115200;</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>uart<sp/>=<sp/>UART2_open(CONFIG_UART0,<sp/>&amp;uartParams);</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>if<sp/>(uart<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>UART2_open()<sp/>failed</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>Enable<sp/>receiver,<sp/>inhibit<sp/>low<sp/>power<sp/>mode</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>UART2_rxEnable(uart);</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>Loop<sp/>forever<sp/>echoing</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>while<sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>UART2_read(uart,<sp/>&amp;input,<sp/>1,<sp/>&amp;bytesRead);</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>UART2_write(uart,<sp/>&amp;input,<sp/>1,<sp/>&amp;bytesWritten);</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/>Details<sp/>for<sp/>the<sp/>example<sp/>code<sp/>above<sp/>are<sp/>described<sp/>in<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/>subsections.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Opening<sp/>the<sp/>UART2<sp/>Driver<sp/>#</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/><sp/>Opening<sp/>a<sp/>UART<sp/>requires<sp/>four<sp/>steps:</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/>1.<sp/><sp/>Create<sp/>and<sp/>initialize<sp/>a<sp/>UART2_Params<sp/>structure.</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/>2.<sp/><sp/>Fill<sp/>in<sp/>the<sp/>desired<sp/>parameters.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/>3.<sp/><sp/>Call<sp/>UART2_open(),<sp/>passing<sp/>the<sp/>index<sp/>of<sp/>the<sp/>UART<sp/>in<sp/>the<sp/>UART2_config</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>structure,<sp/>and<sp/>the<sp/>address<sp/>of<sp/>the<sp/>UART2_Params<sp/>structure.<sp/><sp/>The</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>UART2<sp/>instance<sp/>is<sp/>specified<sp/>by<sp/>the<sp/>index<sp/>in<sp/>the<sp/>UART2_config<sp/>structure.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/>4.<sp/><sp/>Check<sp/>that<sp/>the<sp/>UART2<sp/>handle<sp/>returned<sp/>by<sp/>UART2_open()<sp/>is<sp/>non-NULL,</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>save<sp/>it.<sp/><sp/>The<sp/>handle<sp/>will<sp/>be<sp/>used<sp/>to<sp/>read<sp/>and<sp/>write<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>UART<sp/>you<sp/>just<sp/>opened.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/>Only<sp/>one<sp/>UART<sp/>index<sp/>can<sp/>be<sp/>used<sp/>at<sp/>a<sp/>time;<sp/>calling<sp/>UART2_open()<sp/>a<sp/>second</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/>time<sp/>with<sp/>the<sp/>same<sp/>index<sp/>previosly<sp/>passed<sp/>to<sp/>UART2_open()<sp/>will<sp/>result<sp/>in</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/>an<sp/>error.<sp/><sp/>You<sp/>can,<sp/>though,<sp/>re-use<sp/>the<sp/>index<sp/>if<sp/>the<sp/>instance<sp/>is<sp/>closed</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/>via<sp/>UART2_close().</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>the<sp/>previous<sp/>example<sp/>code,<sp/>CONFIG_UART0<sp/>is<sp/>passed<sp/>to<sp/>UART2_open().</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>macro<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>example&apos;s<sp/>ti_drivers_config.h<sp/>file.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Modes<sp/>of<sp/>Operation<sp/>#</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>UART<sp/>driver<sp/>can<sp/>operate<sp/>in<sp/>blocking,<sp/>nonblocking,<sp/>or<sp/>callback<sp/>mode,<sp/>by</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/>setting<sp/>the<sp/>writeMode<sp/>and<sp/>readMode<sp/>parameters<sp/>passed<sp/>to<sp/>UART2_open().</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>these<sp/>parameters<sp/>are<sp/>not<sp/>set,<sp/>as<sp/>in<sp/>the<sp/>example<sp/>code,<sp/>the<sp/>UART2</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/>driver<sp/>defaults<sp/>to<sp/>blocking<sp/>mode.<sp/><sp/>Options<sp/>for<sp/>the<sp/>writeMode<sp/>and</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/>readMode<sp/>parameters<sp/>are<sp/>#UART2_Mode_BLOCKING,<sp/>#UART2_Mode_NONBLOCKING,<sp/>and</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/>#UART2_Mode_CALLBACK:</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>#UART2_Mode_BLOCKING<sp/>uses<sp/>a<sp/>semaphore<sp/>to<sp/>block<sp/>while<sp/>data<sp/>is<sp/>being<sp/>sent,</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>or<sp/>while<sp/>waiting<sp/>for<sp/>some<sp/>data<sp/>to<sp/>be<sp/>received.<sp/>The<sp/>context<sp/>of<sp/>calling</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>UART2_read()<sp/>and<sp/>UART2_write()<sp/>in<sp/>blocking<sp/>mode<sp/>must<sp/>always<sp/>be<sp/>a<sp/>Task.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>The<sp/>UART2_write()<sp/>call<sp/>will<sp/>block<sp/>until<sp/>all<sp/>data<sp/>has<sp/>been<sp/>transmitted</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>onto<sp/>the<sp/>TX<sp/>pin.<sp/>The<sp/>UART2_read()<sp/>calls<sp/>can<sp/>be<sp/>configured<sp/>to</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>have<sp/>two<sp/>different<sp/>behaviors,<sp/>using<sp/>the<sp/>#UART2_ReadReturnMode<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>#UART2_Params.<sp/><sp/>In<sp/>#UART2_ReadReturnMode_FULL<sp/>(the<sp/>default),</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>UART2_read()<sp/>will<sp/>block<sp/>until<sp/>the<sp/>requested<sp/>number<sp/>of<sp/>bytes<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>received.<sp/><sp/>In<sp/>#UART2_ReadReturnMode_PARTIAL,<sp/>UART2_read()<sp/>will<sp/>block</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>until<sp/>either<sp/>the<sp/>requested<sp/>number<sp/>of<sp/>bytes<sp/>has<sp/>been<sp/>received,</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>or<sp/>a<sp/>UART<sp/>hardware<sp/>read<sp/>timeout<sp/>has<sp/>occurred.<sp/><sp/>Using</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>UART2_ReadReturnMode_PARTIAL<sp/>is<sp/>a<sp/>good<sp/>choice<sp/>if<sp/>the<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>incoming<sp/>data<sp/>bytes<sp/>is<sp/>unknown.<sp/><sp/>In<sp/>UART2_Mode_BLOCKING,</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>UART2_read()<sp/>will<sp/>always<sp/>return<sp/>at<sp/>least<sp/>some<sp/>data.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>UART2_readTimeout()<sp/>can<sp/>be<sp/>used<sp/>to<sp/>specify<sp/>a<sp/>timeout<sp/>in<sp/>system</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>clock<sp/>ticks,<sp/>to<sp/>wait<sp/>for<sp/>data.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>UART2_readTimeout()<sp/>will<sp/>return<sp/>when<sp/>all<sp/>data<sp/>is<sp/>received,<sp/>or</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>specified<sp/>timeout<sp/>expires,<sp/>or,<sp/>if<sp/>using<sp/>the<sp/>mode</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>UART2_ReadReturnMode_PARTIAL,<sp/>a<sp/>hardware<sp/>read<sp/>timeout<sp/>occurs,</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>whichever<sp/>happens<sp/>first.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>#UART2_Mode_NONBLOCKING<sp/>does<sp/>not<sp/>block<sp/>waiting<sp/>for<sp/>data<sp/>to<sp/>be<sp/>sent</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>or<sp/>received.<sp/><sp/>UART2_write()<sp/>and<sp/>UART2_read()<sp/>will<sp/>return<sp/>immediately</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>having<sp/>transferred<sp/>as<sp/>much<sp/>data<sp/>as<sp/>the<sp/>driver<sp/>can<sp/>immediately<sp/>accept</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>or<sp/>has<sp/>available,<sp/>respectively.<sp/><sp/>If<sp/>no<sp/>data<sp/>can<sp/>be<sp/>accepted<sp/>or</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>received,<sp/>UART2_write()<sp/>and<sp/>UART2_read()<sp/>return<sp/>UART2_STATUS_EAGAIN.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>#UART2_Mode_CALLBACK<sp/>is<sp/>nonblocking<sp/>and<sp/>UART2_read()<sp/>and<sp/>UART2_write()</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>will<sp/>return<sp/>while<sp/>data<sp/>is<sp/>being<sp/>sent<sp/>in<sp/>the<sp/>context<sp/>of<sp/>a<sp/>hardware</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>interrupt.<sp/><sp/>When<sp/>all<sp/>data<sp/>has<sp/>been<sp/>read<sp/>from,<sp/>or<sp/>written<sp/>to<sp/>the<sp/>hardware</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>FIFO,<sp/>the<sp/>UART2<sp/>driver<sp/>will<sp/>call<sp/>the<sp/>user&apos;s<sp/>callback<sp/>function,<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>driver<sp/>is<sp/>ready<sp/>to<sp/>accept<sp/>another<sp/>read<sp/>or<sp/>write<sp/>operation.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@note<sp/>When<sp/>transmitting,<sp/>it<sp/>is<sp/>therefore<sp/>not<sp/>guaranteed<sp/>that<sp/>all<sp/>data<sp/>has</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>been<sp/>shifted<sp/>out<sp/>to<sp/>the<sp/>TX<sp/>pin<sp/>when<sp/>the<sp/>write-callback<sp/>is<sp/>invoked.<sp/>This<sp/>is</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>instead<sp/>signalled<sp/>by<sp/>the<sp/>UART2_EVENT_TX_FINISHED<sp/>event.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>In<sp/>some<sp/>cases,<sp/>the<sp/>UART<sp/>data<sp/>transfer<sp/>may<sp/>have<sp/>been<sp/>cancelled,</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>so<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>sent/received<sp/>are<sp/>passed<sp/>to<sp/>the<sp/>callback<sp/>function.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Your<sp/>implementation<sp/>of<sp/>the<sp/>callback<sp/>function<sp/>can<sp/>use<sp/>this<sp/>information<sp/>as<sp/>needed.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Since<sp/>the<sp/>user&apos;s<sp/>callback<sp/>may<sp/>be<sp/>called<sp/>in<sp/>the<sp/>context<sp/>of<sp/>a<sp/>hardware</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>interrupt,<sp/>the<sp/>callback<sp/>function<sp/>must<sp/>not<sp/>make<sp/>any<sp/>RTOS<sp/>blocking<sp/>calls.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>The<sp/>buffer<sp/>passed<sp/>to<sp/>UART2_write()<sp/>in<sp/>UART2_Mode_CALLBACK<sp/>must<sp/>remain</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>coherent<sp/>until<sp/>all<sp/>the<sp/>characters<sp/>have<sp/>been<sp/>sent</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>(ie<sp/>until<sp/>the<sp/>tx<sp/>callback<sp/>has<sp/>been<sp/>called<sp/>with<sp/>a<sp/>byte<sp/>count<sp/>equal<sp/>to</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>that<sp/>passed<sp/>to<sp/>UART2_write()).</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Enabling<sp/>the<sp/>Receiver<sp/>#</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>example<sp/>code<sp/>enables<sp/>the<sp/>collection<sp/>of<sp/>data<sp/>into<sp/>the<sp/>RX<sp/>ring<sp/>buffer</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/><sp/>\a<sp/>before<sp/>the<sp/>first<sp/>call<sp/>to<sp/>UART2_read():</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/><sp/>UART2_rxEnable(uart);</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/><sp/>Note<sp/>that<sp/>this<sp/>call<sp/>is<sp/>not<sp/>necessary<sp/>if<sp/>the<sp/>first<sp/>UART2_read()<sp/>is<sp/>called</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>time<sp/>to<sp/>prevent<sp/>the<sp/>RX<sp/>FIFO<sp/>from<sp/>overrun,<sp/>or<sp/>if<sp/>flow<sp/>control<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Reading<sp/>and<sp/>Writing<sp/>Data<sp/>#</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>example<sp/>code<sp/>reads<sp/>one<sp/>byte<sp/>frome<sp/>the<sp/>UART<sp/>instance,<sp/>and<sp/>then<sp/>writes</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/><sp/>one<sp/>byte<sp/>back<sp/>to<sp/>the<sp/>same<sp/>instance:</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/><sp/>status<sp/>=<sp/>UART2_read(uart,<sp/>&amp;input,<sp/>1,<sp/>&amp;bytesRead);</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/><sp/>status<sp/>=<sp/>UART2_write(uart,<sp/>&amp;input,<sp/>1,<sp/>&amp;bytesWritten);</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>UART2<sp/>driver<sp/>allows<sp/>full<sp/>duplex<sp/>data<sp/>transfers.<sp/>Therefore,<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/>possible<sp/>to<sp/>call<sp/>UART2_read()<sp/>and<sp/>UART2_write()<sp/>at<sp/>the<sp/>same<sp/>time.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>is<sp/>not<sp/>possible,<sp/>however,</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>issue<sp/>multiple<sp/>concurrent<sp/>operations<sp/>in<sp/>the<sp/>same<sp/>direction.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/><sp/>For<sp/>example,<sp/>if<sp/>one<sp/>thread<sp/>calls<sp/>UART2_read(uart0,<sp/>buffer0...),</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/><sp/>any<sp/>other<sp/>thread<sp/>attempting<sp/>UART2_read(uart0,<sp/>buffer1...)<sp/>will<sp/>result<sp/>in</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/>an<sp/>error<sp/>of<sp/>UART2_STATUS_EINUSE,<sp/>until<sp/>all<sp/>the<sp/>data<sp/>from<sp/>the<sp/>first</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/><sp/>UART2_read()<sp/>has<sp/>been<sp/>transferred<sp/>to<sp/>buffer0.<sp/>This<sp/>applies<sp/>to<sp/>blocking,</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/>callback,<sp/>and<sp/>nonblocking<sp/>modes.<sp/>So<sp/>applications<sp/>must<sp/>either<sp/>synchronize</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/><sp/>UART2_read()<sp/>(or<sp/>UART2_write())<sp/>calls<sp/>that<sp/>use<sp/>the<sp/>same<sp/>UART<sp/>handle,<sp/>or</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/>check<sp/>for<sp/>the<sp/>UART2_STATUS_EINUSE<sp/>return<sp/>code<sp/>indicating<sp/>that<sp/>a<sp/>transfer<sp/>is</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/><sp/>still<sp/>ongoing.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_UART2_Configuration</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Configuration</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>the<sp/>@ref<sp/>driver_configuration<sp/>&quot;Driver&apos;s<sp/>Configuration&quot;<sp/>section</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>driver<sp/>configuration<sp/>information.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/><sp/>============================================================================</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_UART2__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_UART2__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/dpl/ClockP.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/dpl/HwiP.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/dpl/SemaphoreP.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_ring_buf_8h" kindref="compound">ti/drivers/utils/RingBuf.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="_u_a_r_t2_8h_1ac5f6195c8ac1d8153e1c6a9ef5516dc0" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_FLOWCTRL_NONE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="_u_a_r_t2_8h_1a642f979e86b7e33000bbe36ccc6ffeb7" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_FLOWCTRL_HARDWARE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="group___u_a_r_t2___s_t_a_t_u_s_1ga50f50c06775b7ee13f45fe80c93fb356" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_SUCCESS<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="group___u_a_r_t2___s_t_a_t_u_s_1ga2eafae271234b3df03442a2f5b1b7270" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_SREADTIMEOUT<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="group___u_a_r_t2___s_t_a_t_u_s_1ga056a6acd9fc1a49cb30c8baabecc35df" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_EFRAMING<sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="group___u_a_r_t2___s_t_a_t_u_s_1gaa3d362690c0ab4dd14e50f53737499a1" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_EPARITY<sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="group___u_a_r_t2___s_t_a_t_u_s_1ga4684c6671d256dc72b13ddb1eafd9971" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_EBREAK<sp/>(-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="group___u_a_r_t2___s_t_a_t_u_s_1gab410e4da00bc79fdbbe921e89a78ffeb" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_EOVERRUN<sp/>(-8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="group___u_a_r_t2___s_t_a_t_u_s_1ga0ec322208aa002ae4b058a410a387801" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_EINUSE<sp/>(-9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="group___u_a_r_t2___s_t_a_t_u_s_1gac2a4b2002f04d6caaeee837aa662e7d4" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_EINVALID<sp/>(-10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="group___u_a_r_t2___s_t_a_t_u_s_1gad3e0d7738225ce8f423e32e0c90d883e" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_EFAIL<sp/>(-11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="group___u_a_r_t2___s_t_a_t_u_s_1ga4cab16fd65127a1987a20caa0653476b" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_EMEMORY<sp/>(-12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="group___u_a_r_t2___s_t_a_t_u_s_1gaeb708c48cd2517f08660196f16d31a33" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_ETIMEOUT<sp/>(-13)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="group___u_a_r_t2___s_t_a_t_u_s_1gad528e61ecc06c90d5824796ce547ecb7" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_ECANCELLED<sp/>(-14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="group___u_a_r_t2___s_t_a_t_u_s_1ga02bfc05124702d98c0540896ead270a0" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_ENOTOPEN<sp/>(-15)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="group___u_a_r_t2___s_t_a_t_u_s_1ga30aee2c671977b6a716be98ac4c5e31c" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_STATUS_EAGAIN<sp/>(-16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="group___u_a_r_t2___e_v_e_n_t_1gaec853b83a56d8d4c77bbdd1952ec49c0" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_EVENT_OVERRUN<sp/>(0x08)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="group___u_a_r_t2___e_v_e_n_t_1gadf0b8f68bdef12f231caedbeecb1493d" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_EVENT_BREAK<sp/>(0x04)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="group___u_a_r_t2___e_v_e_n_t_1gafc9cbc204dd7234514a232e63d368cbb" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_EVENT_PARITY<sp/>(0x02)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="group___u_a_r_t2___e_v_e_n_t_1ga255f58922a2effc350ec1da9a6391284" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_EVENT_FRAMING<sp/>(0x01)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="group___u_a_r_t2___e_v_e_n_t_1ga163464c05ad93ebb5d05ec3d43e710fc" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_EVENT_TX_BEGIN<sp/>(0x10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="group___u_a_r_t2___e_v_e_n_t_1ga0e9f438cedde9a55899b41ea461c78f7" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_EVENT_TX_FINISHED<sp/>(0x20)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="_u_a_r_t2_8h_1ad94e3ea6008dfc427628433dc5ac6592" refkind="member"><highlight class="preprocessor">#define<sp/>UART2_WAIT_FOREVER<sp/>(~(0U))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_u_a_r_t2___config__" kindref="compound">UART2_Config_</ref><sp/>*<ref refid="_u_a_r_t2_8h_1abbf55a000a1ce4c24c15c03fbb610b60" kindref="member">UART2_Handle</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="_u_a_r_t2_8h_1a00d68ce47bb8b798f31c3338077d301a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_u_a_r_t2_8h_1a00d68ce47bb8b798f31c3338077d301a" kindref="member">UART2_Callback</ref>)(UART2_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userArg,<sp/>int_fast16_t<sp/>status);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="_u_a_r_t2_8h_1a50d9dec91001eb2649ac304bb3c809a3" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_u_a_r_t2_8h_1a50d9dec91001eb2649ac304bb3c809a3" kindref="member">UART2_EventCallback</ref>)(UART2_Handle<sp/>handle,<sp/>uint32_t<sp/>event,<sp/>uint32_t<sp/>data,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userArg);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489" refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a7d3f5d67bebb58f7ae475cce13779c8c" kindref="member">UART2_Mode_BLOCKING</ref>,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a2bf221b50ba7a639b06b592cfdccd5ed" kindref="member">UART2_Mode_CALLBACK</ref>,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref>,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Added<sp/>for<sp/>backwards<sp/>compatibility.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>UART2_Mode_POLLING<sp/>=<sp/><ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863a385b6370d2fa01027d19907c6e593e1b" kindref="member">UART2_Mode_NONBLOCKING</ref></highlight></codeline>
<codeline lineno="514"><highlight class="normal">}<sp/><ref refid="_u_a_r_t2_8h_1a5bfa1a3442db9943342497e519a08863" kindref="member">UART2_Mode</ref>;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="534" refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637da183a4bd9f538e511bbbd6d91e6889037" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637da183a4bd9f538e511bbbd6d91e6889037" kindref="member">UART2_ReadReturnMode_FULL</ref>,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637dae54481886c1c305f3f8fdf842bdb53c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637dae54481886c1c305f3f8fdf842bdb53c5" kindref="member">UART2_ReadReturnMode_PARTIAL</ref></highlight></codeline>
<codeline lineno="538"><highlight class="normal">}<sp/><ref refid="_u_a_r_t2_8h_1ab233d65776f6f909c674c5baae27637d" kindref="member">UART2_ReadReturnMode</ref>;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="545" refid="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547" refid="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515abf6427750460fb2f0d0cdfbd4a1dce9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515abf6427750460fb2f0d0cdfbd4a1dce9f" kindref="member">UART2_DataLen_5</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="548" refid="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515ab53fa866e596d2ea28672962b30ea0d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515ab53fa866e596d2ea28672962b30ea0d8" kindref="member">UART2_DataLen_6</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="549" refid="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515ae669912970cfcd98fc5c5702f6256571" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515ae669912970cfcd98fc5c5702f6256571" kindref="member">UART2_DataLen_7</ref><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="550" refid="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515abcb7ead4413215f0473c368f284ef729" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515abcb7ead4413215f0473c368f284ef729" kindref="member">UART2_DataLen_8</ref><sp/>=<sp/>3<sp/><sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal">}<sp/><ref refid="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515" kindref="member">UART2_DataLen</ref>;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="_u_a_r_t2_8h_1ae0d2d6413d7e338fd053569d848c239f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560" refid="_u_a_r_t2_8h_1ae0d2d6413d7e338fd053569d848c239faa707a48589e67b81ac5a2f22342070e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1ae0d2d6413d7e338fd053569d848c239faa707a48589e67b81ac5a2f22342070e9" kindref="member">UART2_StopBits_1</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="561" refid="_u_a_r_t2_8h_1ae0d2d6413d7e338fd053569d848c239fa59f4de55d4d1844a50efc38f0e99bc84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1ae0d2d6413d7e338fd053569d848c239fa59f4de55d4d1844a50efc38f0e99bc84" kindref="member">UART2_StopBits_2</ref><sp/>=<sp/>1<sp/><sp/></highlight></codeline>
<codeline lineno="562"><highlight class="normal">}<sp/><ref refid="_u_a_r_t2_8h_1ae0d2d6413d7e338fd053569d848c239f" kindref="member">UART2_StopBits</ref>;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571" refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994dafef829752e4d035a457dce76f23cec19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994dafef829752e4d035a457dce76f23cec19" kindref="member">UART2_Parity_NONE</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="572" refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994da7e4737a62b3bb4385542849b38a4c058" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994da7e4737a62b3bb4385542849b38a4c058" kindref="member">UART2_Parity_EVEN</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="573" refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994da4a98084e16b8754a068fe9fb11c17ba5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994da4a98084e16b8754a068fe9fb11c17ba5" kindref="member">UART2_Parity_ODD</ref><sp/><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="574" refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994dafc82a57ded8fec31003fe0b6520f1fa0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994dafc82a57ded8fec31003fe0b6520f1fa0" kindref="member">UART2_Parity_ZERO</ref><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="575" refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994dae95a66e405093bb4a4c4f071facfa1c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994dae95a66e405093bb4a4c4f071facfa1c9" kindref="member">UART2_Parity_ONE</ref><sp/><sp/>=<sp/>4<sp/><sp/></highlight></codeline>
<codeline lineno="576"><highlight class="normal">}<sp/><ref refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994d" kindref="member">UART2_Parity</ref>;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="586" refid="struct_u_a_r_t2___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="588" refid="struct_u_a_r_t2___params_1a6dd95ee323c2aabf14b1aa82e27bc7a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>UART2_Mode<sp/><ref refid="struct_u_a_r_t2___params_1a6dd95ee323c2aabf14b1aa82e27bc7a3" kindref="member">readMode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="589" refid="struct_u_a_r_t2___params_1a7ee665634b02989a5a506dce0b51d298" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>UART2_Mode<sp/><ref refid="struct_u_a_r_t2___params_1a7ee665634b02989a5a506dce0b51d298" kindref="member">writeMode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="590" refid="struct_u_a_r_t2___params_1a72feec1f368666cc1d330400b0eec1c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a00d68ce47bb8b798f31c3338077d301a" kindref="member">UART2_Callback</ref><sp/><ref refid="struct_u_a_r_t2___params_1a72feec1f368666cc1d330400b0eec1c7" kindref="member">readCallback</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="591" refid="struct_u_a_r_t2___params_1aadcf916de5cdd5591997d289f03ccfdd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a00d68ce47bb8b798f31c3338077d301a" kindref="member">UART2_Callback</ref><sp/><ref refid="struct_u_a_r_t2___params_1aadcf916de5cdd5591997d289f03ccfdd" kindref="member">writeCallback</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="592" refid="struct_u_a_r_t2___params_1abfcb7f671ba82b840a854a65e4312e40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a50d9dec91001eb2649ac304bb3c809a3" kindref="member">UART2_EventCallback</ref><sp/><ref refid="struct_u_a_r_t2___params_1abfcb7f671ba82b840a854a65e4312e40" kindref="member">eventCallback</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="593" refid="struct_u_a_r_t2___params_1a643c515467eb4b0676956703810d0a31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_u_a_r_t2___params_1a643c515467eb4b0676956703810d0a31" kindref="member">eventMask</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="594" refid="struct_u_a_r_t2___params_1a6932346cebafafca64fd705d5416b32a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>UART2_ReadReturnMode<sp/><ref refid="struct_u_a_r_t2___params_1a6932346cebafafca64fd705d5416b32a" kindref="member">readReturnMode</ref>;<sp/></highlight></codeline>
<codeline lineno="595" refid="struct_u_a_r_t2___params_1a52da516a384dd7b59d8570ac05562f9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_u_a_r_t2___params_1a52da516a384dd7b59d8570ac05562f9e" kindref="member">baudRate</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="596" refid="struct_u_a_r_t2___params_1aed9521ee8f72ce949f611b37b9fc20ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a6c14675701ba732f156c2eea7e3f6515" kindref="member">UART2_DataLen</ref><sp/><ref refid="struct_u_a_r_t2___params_1aed9521ee8f72ce949f611b37b9fc20ba" kindref="member">dataLength</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="597" refid="struct_u_a_r_t2___params_1a32a2799eac42264531c0885ce4c79b71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1ae0d2d6413d7e338fd053569d848c239f" kindref="member">UART2_StopBits</ref><sp/><ref refid="struct_u_a_r_t2___params_1a32a2799eac42264531c0885ce4c79b71" kindref="member">stopBits</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="598" refid="struct_u_a_r_t2___params_1aeab242e0d26c1a6faf3e9bdc799de916" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t2_8h_1a259cb78d1b403c91619af5153a84994d" kindref="member">UART2_Parity</ref><sp/><ref refid="struct_u_a_r_t2___params_1aeab242e0d26c1a6faf3e9bdc799de916" kindref="member">parityType</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="599" refid="struct_u_a_r_t2___params_1a309c74a40012a74de35b6e916b625bc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_u_a_r_t2___params_1a309c74a40012a74de35b6e916b625bc0" kindref="member">userArg</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal">}<sp/><ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref>;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="preprocessor">#define<sp/>UART2_BASE_OBJECT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="604"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART2<sp/>state<sp/>variable<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="605"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="606"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="607"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>overrunCount;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="608"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART2_Mode<sp/>readMode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="609"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART2_Mode<sp/>writeMode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="610"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART2_ReadReturnMode<sp/>readReturnMode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="611"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>opened;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="612"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>txEnabled;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="613"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>rxEnabled;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="614"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>rxCancelled;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="615"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>txCancelled;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="616"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>readTimedOut;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="617"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>writeTimedOut;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="618"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>overrunActive;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="619"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>inReadCallback;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="620"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>readCallbackPending;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="621"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>inWriteCallback;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="622"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>writeCallbackPending;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="623"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>readToRingbuf;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="624"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>state;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="625"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="626"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>HwiP_Struct<sp/>hwi;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="627"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint32_t<sp/>baudRate;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="628"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>UART2_DataLen<sp/>dataLength;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="629"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>UART2_StopBits<sp/>stopBits;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="630"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>UART2_Parity<sp/>parityType;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="631"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int32_t<sp/>rxStatus;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="632"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int32_t<sp/>txStatus;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="633"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>UART2_EventCallback<sp/>eventCallback;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="634"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint32_t<sp/>eventMask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="635"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>*userArg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="636"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="637"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>read<sp/>variables<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RingBuf_Object<sp/>rxBuffer;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>bool<sp/>readInUse;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="640"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>*readBuf;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="641"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/>readSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="642"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/>readCount;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="643"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/>rxSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="644"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/>bytesRead;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>SemaphoreP_Struct<sp/>readSem;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="646"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>UART2_Callback<sp/>readCallback;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="647"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="648"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>write<sp/>variables<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="649"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RingBuf_Object<sp/>txBuffer;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="650"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>volatile<sp/>bool<sp/>writeInUse;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="651"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>unsigned<sp/>char<sp/>*writeBuf;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="652"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/>writeSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="653"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/>writeCount;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="654"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/>txSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/>bytesWritten;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="656"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>SemaphoreP_Struct<sp/>writeSem;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="657"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>UART2_Callback<sp/>writeCallback;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="658"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="659"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>Power<sp/>management<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="660"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>powerMgrId;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="661"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="668"><highlight class="preprocessor">typedef<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal">{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>UART2_BASE_OBJECT</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}<sp/>UART2_Object;</highlight></codeline>
<codeline lineno="675"><highlight class="preprocessor">#define<sp/>UART2_BASE_HWATTRS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="676"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint32_t<sp/>baseAddr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="678"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="679"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>intNum;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="680"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="681"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint8_t<sp/>intPriority;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="682"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="683"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>*rxBufPtr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="684"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="685"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/>rxBufSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="686"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="687"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>*txBufPtr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="688"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="689"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/>txBufSize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="691"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint32_t<sp/>flowControl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="692"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="693"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint32_t<sp/>rxPin;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="694"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="695"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint32_t<sp/>txPin;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="696"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="697"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint32_t<sp/>ctsPin;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="698"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="699"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint32_t<sp/>rtsPin;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="700"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="706"><highlight class="preprocessor">typedef<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>UART2_BASE_HWATTRS</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}<sp/>UART2_HWAttrs;</highlight></codeline>
<codeline lineno="719" refid="struct_u_a_r_t2___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_u_a_r_t2___config__" kindref="compound">UART2_Config_</ref></highlight></codeline>
<codeline lineno="720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="722" refid="struct_u_a_r_t2___config___1a9c5eb1b5db22e3b8aa9319713376b78f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_u_a_r_t2___config___1a9c5eb1b5db22e3b8aa9319713376b78f" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="725" refid="struct_u_a_r_t2___config___1ab10f5818195e1fcd0344b654687d1f97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_u_a_r_t2___config___1ab10f5818195e1fcd0344b654687d1f97" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="726"><highlight class="normal">}<sp/><ref refid="_u_a_r_t2_8h_1a5a9ed8d3be24bf0ba355ec100f9eabbd" kindref="member">UART2_Config</ref>;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t2___config__" kindref="compound">UART2_Config</ref><sp/><ref refid="_u_a_r_t2_8h_1a80d75291c42d2471b3c38dce6b6bdb0a" kindref="member">UART2_config</ref>[];</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint_least8_t<sp/><ref refid="_u_a_r_t2_8h_1a9a11a7ad983146f408d8deb22b764710" kindref="member">UART2_count</ref>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_a_r_t2_8h_1a2a82f370c2f15ececc5b03fbba65bcde" kindref="member">UART2_close</ref>(UART2_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_a_r_t2_8h_1a63fc2eca3cffea172c99d152f7d4ebd9" kindref="member">UART2_flushRx</ref>(UART2_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_u_a_r_t2_8h_1a7740082039bb86c1ae0284422ccbd32b" kindref="member">UART2_getRxCount</ref>(UART2_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UART2_Handle<sp/><ref refid="_u_a_r_t2_8h_1a03b76166f16518bc1cdf85fdf6aa206b" kindref="member">UART2_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_a_r_t2_8h_1a8fd27db3b9bcca2fc88f65b2d26895d5" kindref="member">UART2_Params_init</ref>(<ref refid="struct_u_a_r_t2___params" kindref="compound">UART2_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_u_a_r_t2_8h_1a3406839adde44077da387c89fa9ddb0d" kindref="member">UART2_read</ref>(UART2_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*bytesRead);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>__attribute__((weak))</highlight></codeline>
<codeline lineno="883"><highlight class="normal">UART2_readFull(UART2_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*bytesRead);</highlight></codeline>
<codeline lineno="965"><highlight class="normal">extern<sp/>int_fast16_t<sp/><ref refid="_u_a_r_t2_8h_1a0f025f78353515c8b0050f9d41596969" kindref="member">UART2_readTimeout</ref>(UART2_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*bytesRead,</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal">extern<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_a_r_t2_8h_1aa8302b9b2d54d3f8a428a9225e267a41" kindref="member">UART2_readCancel</ref>(UART2_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal">extern<sp/>int_fast16_t<sp/><ref refid="_u_a_r_t2_8h_1a85ec2c5906ad36adc14cddd011b3b7cf" kindref="member">UART2_write</ref>(UART2_Handle<sp/>handle,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*bytesWritten);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">extern<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_a_r_t2_8h_1a96db1cdb4fd1a5bfa856ead55297d95e" kindref="member">UART2_rxDisable</ref>(UART2_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal">extern<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_a_r_t2_8h_1a4db9af45d9e95b8d93996432ddc124e2" kindref="member">UART2_rxEnable</ref>(UART2_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal">extern<sp/>int_fast16_t<sp/><ref refid="_u_a_r_t2_8h_1adc4b4c351fc4fb2663d6737a0cd4c7db" kindref="member">UART2_writeTimeout</ref>(UART2_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*bytesWritten,</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal">extern<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_a_r_t2_8h_1a7052ce61a02ae90920d11c9bacddbf1e" kindref="member">UART2_writeCancel</ref>(UART2_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_UART2__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/UART2.h"/>
  </compounddef>
</doxygen>
