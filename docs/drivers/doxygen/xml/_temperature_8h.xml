<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_temperature_8h" kind="file" language="C++">
    <compoundname>Temperature.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="_list_8h" local="no">ti/drivers/utils/List.h</includes>
    <includedby refid="_power_c_c26_x2_8h" local="no">PowerCC26X2.h</includedby>
    <includedby refid="_temperature_c_c26_x2_8h" local="no">TemperatureCC26X2.h</includedby>
    <incdepgraph>
      <node id="1410">
        <label>stdbool.h</label>
      </node>
      <node id="1412">
        <label>stdint.h</label>
      </node>
      <node id="1411">
        <label>stddef.h</label>
      </node>
      <node id="1413">
        <label>ti/drivers/utils/List.h</label>
        <link refid="_list_8h"/>
        <childnode refid="1412" relation="include">
        </childnode>
        <childnode refid="1410" relation="include">
        </childnode>
        <childnode refid="1411" relation="include">
        </childnode>
      </node>
      <node id="1409">
        <label>Temperature.h</label>
        <link refid="_temperature_8h"/>
        <childnode refid="1410" relation="include">
        </childnode>
        <childnode refid="1411" relation="include">
        </childnode>
        <childnode refid="1412" relation="include">
        </childnode>
        <childnode refid="1413" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1415">
        <label>PowerCC26X2.h</label>
        <link refid="_power_c_c26_x2_8h"/>
        <childnode refid="1416" relation="include">
        </childnode>
      </node>
      <node id="1417">
        <label>TemperatureCC26X2.h</label>
        <link refid="_temperature_c_c26_x2_8h"/>
      </node>
      <node id="1416">
        <label>ADCBufCC26X2.h</label>
        <link refid="_a_d_c_buf_c_c26_x2_8h"/>
      </node>
      <node id="1414">
        <label>Temperature.h</label>
        <link refid="_temperature_8h"/>
        <childnode refid="1415" relation="include">
        </childnode>
        <childnode refid="1417" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_temperature___notify_obj" prot="public">Temperature_NotifyObj</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_temperature_8h_1a83521cb2f95fcfcbc85b5abac08b5ecd" prot="public" static="no">
        <name>Temperature_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common Temperature status code reservation offset. Temperature driver implementations should offset status codes with Temperature_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>TemperatureXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>Temperature_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TemperatureXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>Temperature_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TemperatureXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>Temperature_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="261" column="9" bodyfile="source/ti/drivers/Temperature.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_temperature_8h_1afb1bf035404a59ddf1ae8b6c0c6bfe3c" prot="public" static="no">
        <name>Temperature_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return Temperature_STATUS_SUCCESS if the function was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="269" column="9" bodyfile="source/ti/drivers/Temperature.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_temperature_8h_1aa80b3df221507b536c62070650ee383d" prot="public" static="no">
        <name>Temperature_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return Temperature_STATUS_ERROR if the function was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="277" column="9" bodyfile="source/ti/drivers/Temperature.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_temperature_8h_1adcb56ac4fa37327cd11c5b3ff5f8bd6f" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* Temperature_NotifyFxn) (int16_t currentTemperature, int16_t thresholdTemperature, uintptr_t clientArg, Temperature_NotifyObj *notifyObject)</definition>
        <argsstring>)(int16_t currentTemperature, int16_t thresholdTemperature, uintptr_t clientArg, Temperature_NotifyObj *notifyObject)</argsstring>
        <name>Temperature_NotifyFxn</name>
        <briefdescription>
<para>Function prototype for a notification callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">currentTemperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Current chip temperature</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">thresholdTemperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature threshold that caused this notification callback.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clientArg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument provided by the application during registration.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[in/out]</parametername>
</parameternamelist>
<parameterdescription>
<para>notifyObject The notification object that was registered previously. This pointer may be used to register the notification again with updated inputs from within the notification callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="306" column="1" bodyfile="source/ti/drivers/Temperature.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_temperature_8h_1a77ed988c7e67988686d0f04c2d2246af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Temperature_init</definition>
        <argsstring>(void)</argsstring>
        <name>Temperature_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function initializes the Temperature driver. </para>        </briefdescription>
        <detaileddescription>
<para>This function initializes the internal state of the Temperature driver. It must be called before calling any other Temperature functions. Calling this function multiple times will only have an effect the first time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_temperature_8h_1a7c1fb8e6900fc21f146614c1a6a1d843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t Temperature_getTemperature</definition>
        <argsstring>(void)</argsstring>
        <name>Temperature_getTemperature</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current temperature in degrees C. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current temperature in degrees C </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_temperature_8h_1a6e061692e79590b06c0cfbb0c64cf474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Temperature_registerNotifyHigh</definition>
        <argsstring>(Temperature_NotifyObj *notifyObject, int16_t thresholdHigh, Temperature_NotifyFxn notifyFxn, uintptr_t clientArg)</argsstring>
        <name>Temperature_registerNotifyHigh</name>
        <param>
          <type><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref> *</type>
          <declname>notifyObject</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>thresholdHigh</declname>
        </param>
        <param>
          <type><ref refid="_temperature_8h_1adcb56ac4fa37327cd11c5b3ff5f8bd6f" kindref="member">Temperature_NotifyFxn</ref></type>
          <declname>notifyFxn</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>clientArg</declname>
        </param>
        <briefdescription>
<para>Registers a notification with a high threshold. </para>        </briefdescription>
        <detaileddescription>
<para>This function registers a Temperature notification with a high threshold. Once the chip temperature rises above <computeroutput>thresholdHigh</computeroutput>, <computeroutput>notifyFxn</computeroutput> is called and the notification is automatically unregistered.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifyObject</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure to be initialized. After returning, it will contain the data necessary to issue a notification callback. The memory of the structure must persist while the notification is registered.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">thresholdHigh</parametername>
</parameternamelist>
<parameterdescription>
<para>Threshold temperature in degrees C</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">notifyFxn</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function that is called once the chip temperature rises above <computeroutput>thresholdHigh</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clientArg</parametername>
</parameternamelist>
<parameterdescription>
<para>Application-specified argument</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_temperature_8h_1afb1bf035404a59ddf1ae8b6c0c6bfe3c" kindref="member">Temperature_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The notification was successfully registered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_temperature_8h_1aa80b3df221507b536c62070650ee383d" kindref="member">Temperature_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There was an error during registration.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><ref refid="_temperature_8h_1a77ed988c7e67988686d0f04c2d2246af" kindref="member">Temperature_init()</ref> called </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_temperature_8h_1ac121a63550c7ebb75764cb24f34787d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Temperature_registerNotifyLow</definition>
        <argsstring>(Temperature_NotifyObj *notifyObject, int16_t thresholdLow, Temperature_NotifyFxn notifyFxn, uintptr_t clientArg)</argsstring>
        <name>Temperature_registerNotifyLow</name>
        <param>
          <type><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref> *</type>
          <declname>notifyObject</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>thresholdLow</declname>
        </param>
        <param>
          <type><ref refid="_temperature_8h_1adcb56ac4fa37327cd11c5b3ff5f8bd6f" kindref="member">Temperature_NotifyFxn</ref></type>
          <declname>notifyFxn</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>clientArg</declname>
        </param>
        <briefdescription>
<para>Registers a notification with a low threshold. </para>        </briefdescription>
        <detaileddescription>
<para>This function registers a Temperature notification with a low threshold. Once the chip temperature falls below <computeroutput>thresholdLow</computeroutput>, <computeroutput>notifyFxn</computeroutput> is called and the notification is automatically unregistered.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifyObject</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure to be initialized. After returning, it will contain the data necessary to issue a notification callback. The memory of the structure must persist while the notification is registered.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">thresholdLow</parametername>
</parameternamelist>
<parameterdescription>
<para>Threshold temperature in degrees C</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">notifyFxn</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function that is called once the chip temperature falls below <computeroutput>thresholdLow</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clientArg</parametername>
</parameternamelist>
<parameterdescription>
<para>Application-specified argument</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_temperature_8h_1afb1bf035404a59ddf1ae8b6c0c6bfe3c" kindref="member">Temperature_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The notification was successfully registered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_temperature_8h_1aa80b3df221507b536c62070650ee383d" kindref="member">Temperature_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There was an error during registration.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><ref refid="_temperature_8h_1a77ed988c7e67988686d0f04c2d2246af" kindref="member">Temperature_init()</ref> called </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_temperature_8h_1a67658618e0e4313e825904f13996631f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Temperature_registerNotifyRange</definition>
        <argsstring>(Temperature_NotifyObj *notifyObject, int16_t thresholdHigh, int16_t thresholdLow, Temperature_NotifyFxn notifyFxn, uintptr_t clientArg)</argsstring>
        <name>Temperature_registerNotifyRange</name>
        <param>
          <type><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref> *</type>
          <declname>notifyObject</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>thresholdHigh</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>thresholdLow</declname>
        </param>
        <param>
          <type><ref refid="_temperature_8h_1adcb56ac4fa37327cd11c5b3ff5f8bd6f" kindref="member">Temperature_NotifyFxn</ref></type>
          <declname>notifyFxn</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>clientArg</declname>
        </param>
        <briefdescription>
<para>Registers a notification with both a high and low threshold. </para>        </briefdescription>
        <detaileddescription>
<para>This function registers a Temperature notification with a high and low threshold. Once the chip temperature rises above <computeroutput>thresholdHigh</computeroutput> or falls below <computeroutput>thresholdLow</computeroutput>, <computeroutput>notifyFxn</computeroutput> is called and the notification is automatically unregistered.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifyObject</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure to be initialized. After returning, it will contain the data necessary to issue a notification callback. The memory of the structure must persist while the notification is registered.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">thresholdHigh</parametername>
</parameternamelist>
<parameterdescription>
<para>High threshold temperature in degrees C</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">thresholdLow</parametername>
</parameternamelist>
<parameterdescription>
<para>Low threshold temperature in degrees C</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">notifyFxn</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function that is called once the chip temperature falls below <computeroutput>thresholdLow</computeroutput>, or rises above <computeroutput>thresholdHigh</computeroutput>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clientArg</parametername>
</parameternamelist>
<parameterdescription>
<para>Application-specified argument</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_temperature_8h_1afb1bf035404a59ddf1ae8b6c0c6bfe3c" kindref="member">Temperature_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The notification was successfully registered </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_temperature_8h_1aa80b3df221507b536c62070650ee383d" kindref="member">Temperature_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There was an error during registration</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><ref refid="_temperature_8h_1a77ed988c7e67988686d0f04c2d2246af" kindref="member">Temperature_init()</ref> called </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_temperature_8h_1a73f2c54715b16a2d19c23431d53a85a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t Temperature_unregisterNotify</definition>
        <argsstring>(Temperature_NotifyObj *notifyObject)</argsstring>
        <name>Temperature_unregisterNotify</name>
        <param>
          <type><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref> *</type>
          <declname>notifyObject</declname>
        </param>
        <briefdescription>
<para>Unregisters a currently registered notification. </para>        </briefdescription>
        <detaileddescription>
<para>This function unregisters a currently registered notification. It should not be called on a <computeroutput>notifyObject</computeroutput> that is not currently registered.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifyObject</parametername>
</parameternamelist>
<parameterdescription>
<para>Notification to unregister.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_temperature_8h_1afb1bf035404a59ddf1ae8b6c0c6bfe3c" kindref="member">Temperature_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The notification was successfully unregistered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_temperature_8h_1aa80b3df221507b536c62070650ee383d" kindref="member">Temperature_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There was an error during unregistration.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>Register <computeroutput>notifyObject</computeroutput> with <ref refid="_temperature_8h_1a6e061692e79590b06c0cfbb0c64cf474" kindref="member">Temperature_registerNotifyHigh()</ref>, <ref refid="_temperature_8h_1ac121a63550c7ebb75764cb24f34787d0" kindref="member">Temperature_registerNotifyLow()</ref>, or <ref refid="_temperature_8h_1a67658618e0e4313e825904f13996631f" kindref="member">Temperature_registerNotifyRange()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_temperature_8h_1a356080ee9da43e65d2ff0c3b384ff0ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t Temperature_getThresholdHigh</definition>
        <argsstring>(Temperature_NotifyObj *notifyObject)</argsstring>
        <name>Temperature_getThresholdHigh</name>
        <param>
          <type><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref> *</type>
          <declname>notifyObject</declname>
        </param>
        <briefdescription>
<para>Get the high threshold of a notification. </para>        </briefdescription>
        <detaileddescription>
<para>This function should not be called on a <computeroutput>notifyObject</computeroutput> registered with <ref refid="_temperature_8h_1ac121a63550c7ebb75764cb24f34787d0" kindref="member">Temperature_registerNotifyLow()</ref>. The high threshold value returned in that case will be a device-specific invalid temperature.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifyObject</parametername>
</parameternamelist>
<parameterdescription>
<para>Notification to get the high threshold of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>High threshold in degrees C.</para></simplesect>
<simplesect kind="pre"><para>Register <computeroutput>notifyObject</computeroutput> with <ref refid="_temperature_8h_1a6e061692e79590b06c0cfbb0c64cf474" kindref="member">Temperature_registerNotifyHigh()</ref>, or <ref refid="_temperature_8h_1a67658618e0e4313e825904f13996631f" kindref="member">Temperature_registerNotifyRange()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_temperature_8h_1a98e59edd29fac53006b60964d1e62a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t Temperature_getThresholdLow</definition>
        <argsstring>(Temperature_NotifyObj *notifyObject)</argsstring>
        <name>Temperature_getThresholdLow</name>
        <param>
          <type><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref> *</type>
          <declname>notifyObject</declname>
        </param>
        <briefdescription>
<para>Get the low threshold of a notification. </para>        </briefdescription>
        <detaileddescription>
<para>This function should not be called on a <computeroutput>notifyObject</computeroutput> registered with <ref refid="_temperature_8h_1a6e061692e79590b06c0cfbb0c64cf474" kindref="member">Temperature_registerNotifyHigh()</ref>. The low threshold value returned in that case will be a device-specific invalid temperature.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifyObject</parametername>
</parameternamelist>
<parameterdescription>
<para>Notification to get the low threshold of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Low threshold in degrees C.</para></simplesect>
<simplesect kind="pre"><para>Register <computeroutput>notifyObject</computeroutput> with <ref refid="_temperature_8h_1ac121a63550c7ebb75764cb24f34787d0" kindref="member">Temperature_registerNotifyLow()</ref>, or <ref refid="_temperature_8h_1a67658618e0e4313e825904f13996631f" kindref="member">Temperature_registerNotifyRange()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="495" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_temperature_8h_1ae22c546ad0c9cffe274c3f980eb419e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Temperature_getThresholdRange</definition>
        <argsstring>(Temperature_NotifyObj *notifyObject, int16_t *thresholdHigh, int16_t *thresholdLow)</argsstring>
        <name>Temperature_getThresholdRange</name>
        <param>
          <type><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref> *</type>
          <declname>notifyObject</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>thresholdHigh</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>thresholdLow</declname>
        </param>
        <briefdescription>
<para>Get the high and low threshold of a notification. </para>        </briefdescription>
        <detaileddescription>
<para>This function should not be called on a <computeroutput>notifyObject</computeroutput> registered with <ref refid="_temperature_8h_1ac121a63550c7ebb75764cb24f34787d0" kindref="member">Temperature_registerNotifyLow()</ref> or <ref refid="_temperature_8h_1a6e061692e79590b06c0cfbb0c64cf474" kindref="member">Temperature_registerNotifyHigh()</ref>. The unconfigured threshold value returned in that case will be a device-specific invalid temperature.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifyObject</parametername>
</parameternamelist>
<parameterdescription>
<para>Notification to get the high and low threshold of.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">thresholdHigh</parametername>
</parameternamelist>
<parameterdescription>
<para>High threshold value in degrees C written back by this function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">thresholdLow</parametername>
</parameternamelist>
<parameterdescription>
<para>Low threshold value in degrees C written back by this function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>Register <computeroutput>notifyObject</computeroutput> with <ref refid="_temperature_8h_1a67658618e0e4313e825904f13996631f" kindref="member">Temperature_registerNotifyRange()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_temperature_8h_1a43b325ff38ce9aa920eca3d60285ef8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t Temperature_getClientArg</definition>
        <argsstring>(Temperature_NotifyObj *notifyObject)</argsstring>
        <name>Temperature_getClientArg</name>
        <param>
          <type><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref> *</type>
          <declname>notifyObject</declname>
        </param>
        <briefdescription>
<para>Get the application-provided clientArg of a notification. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifyObject</parametername>
</parameternamelist>
<parameterdescription>
<para>Notification to get the clientArg of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The clientArg provided during registration.</para></simplesect>
<simplesect kind="pre"><para>Register <computeroutput>notifyObject</computeroutput> with <ref refid="_temperature_8h_1a6e061692e79590b06c0cfbb0c64cf474" kindref="member">Temperature_registerNotifyHigh()</ref>, <ref refid="_temperature_8h_1ac121a63550c7ebb75764cb24f34787d0" kindref="member">Temperature_registerNotifyLow()</ref>, or <ref refid="_temperature_8h_1a67658618e0e4313e825904f13996631f" kindref="member">Temperature_registerNotifyRange()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="527" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_temperature_8h_1ac48e56151bc6c260f605dbe58dabe736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_temperature_8h_1adcb56ac4fa37327cd11c5b3ff5f8bd6f" kindref="member">Temperature_NotifyFxn</ref></type>
        <definition>Temperature_NotifyFxn Temperature_getNotifyFxn</definition>
        <argsstring>(Temperature_NotifyObj *notifyObject)</argsstring>
        <name>Temperature_getNotifyFxn</name>
        <param>
          <type><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref> *</type>
          <declname>notifyObject</declname>
        </param>
        <briefdescription>
<para>Get the notifyFxn provided during registration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notifyObject</parametername>
</parameternamelist>
<parameterdescription>
<para>Notification to get the notifyFxn of.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The notifyFxn provided during registration</para></simplesect>
<simplesect kind="pre"><para>Register <computeroutput>notifyObject</computeroutput> with <ref refid="_temperature_8h_1a6e061692e79590b06c0cfbb0c64cf474" kindref="member">Temperature_registerNotifyHigh()</ref>, <ref refid="_temperature_8h_1ac121a63550c7ebb75764cb24f34787d0" kindref="member">Temperature_registerNotifyLow()</ref>, or <ref refid="_temperature_8h_1a67658618e0e4313e825904f13996631f" kindref="member">Temperature_registerNotifyRange()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/Temperature.h" line="539" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Temperature driver. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_temperature_8h_1ti_drivers_Temperature_Overview"/><heading level="1">Overview</heading>
</para><para>The Temperature driver provides services related to measuring and reacting to the current temperature of the chip and changes to it.</para><para>The two main services provided are:<itemizedlist>
<listitem><para>Getting the current temperature</para></listitem><listitem><para>Providing notification callbacks when the temperature changes</para></listitem></itemizedlist>
</para><para><anchor id="_temperature_8h_1ti_drivers_Temperature_Usage"/><heading level="1">Usage</heading>
</para><para><heading level="2">Initialisation</heading>
</para><para>Unlike most drivers, there is only a single instance of the temperature driver that is always available once <ref refid="_temperature_8h_1a77ed988c7e67988686d0f04c2d2246af" kindref="member">Temperature_init()</ref> is called. <ref refid="_temperature_8h_1a77ed988c7e67988686d0f04c2d2246af" kindref="member">Temperature_init()</ref> should be called once before using other Temperature driver APIs. Subsequent <ref refid="_temperature_8h_1a77ed988c7e67988686d0f04c2d2246af" kindref="member">Temperature_init()</ref> calls will have no effect.</para><para><heading level="2">Getting the Current Temperature</heading>
</para><para>The most basic function of the driver is to provide the current temperature and return it. It is encoded as a signed integer in degrees C.</para><para><heading level="2">Notifications</heading>
</para><para>The other major function of the Temperature driver is to notify the application when the temperature changes and crosses an application-defined threshold.</para><para>There are three default usecases for this:<itemizedlist>
<listitem><para>High threshold. The application will receive a notification callback when currentTemperature &gt;= thresholdHigh.</para></listitem><listitem><para>Low threshold. The application will receive a notification callback when currentTemperature &lt;= thresholdLow.</para></listitem><listitem><para>Range threshold. The application will receive a notification callback when currentTemperature &gt;= thresholdHigh || currentTemperature &lt;= thresholdLow. This setup addresses usecases where a notification is required when the temperature changes by a certain amount regardless of whether it is up or down. Adjusting clock offsets based on temperature is a good example of this.</para></listitem></itemizedlist>
</para><para><heading level="3">Registering Notifications</heading>
</para><para>There are three functions that register a notification for the application:<itemizedlist>
<listitem><para><ref refid="_temperature_8h_1a6e061692e79590b06c0cfbb0c64cf474" kindref="member">Temperature_registerNotifyHigh()</ref></para></listitem><listitem><para><ref refid="_temperature_8h_1ac121a63550c7ebb75764cb24f34787d0" kindref="member">Temperature_registerNotifyLow()</ref></para></listitem><listitem><para><ref refid="_temperature_8h_1a67658618e0e4313e825904f13996631f" kindref="member">Temperature_registerNotifyRange()</ref></para></listitem></itemizedlist>
</para><para>Multiple notifications may be registered. The different parts of the application and drivers that need to respond to a temperature change do not need to know of one another. Each notification must have its own <ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref> and must be registered individually.</para><para><heading level="3">Notification Callbacks</heading>
</para><para>Once the chip temperature crosses the smallest high threshold or largest low threshold amongst the registered notifications, the driver will iterate over the entire list of registered notification and check which ones have triggered. Notifications that have triggered are removed from the list of registered notifications and thus are no longer registered. Their callback function is then invoked.</para><para>If an application wishes to reregister a notification that just triggered and was unregistered, it may register it again from within the notification callback or another context.</para><para>It is possible to determine whether the high or low threshold triggered the notification callback as follows:<itemizedlist>
<listitem><para>currentTemperature &lt;= thresholdTemperature: Low threshold triggered</para></listitem><listitem><para>currentTemperature &gt;= thresholdTemperature: High threshold triggered This information is only reasonably useful when registering a notification with both a high and low threshold using <ref refid="_temperature_8h_1a67658618e0e4313e825904f13996631f" kindref="member">Temperature_registerNotifyRange()</ref>. Even then, the expected basic usecase only cares about the current temperature and adding an offset to it when registering the notification again.</para></listitem></itemizedlist>
</para><para><heading level="3">Unregistering Notifications</heading>
</para><para>Registered notifications are unregistered in two ways:<itemizedlist>
<listitem><para>Automatically when a notification triggers</para></listitem><listitem><para>By calling <ref refid="_temperature_8h_1a73f2c54715b16a2d19c23431d53a85a7" kindref="member">Temperature_unregisterNotify()</ref></para></listitem></itemizedlist>
</para><para>Unregistered notifications may be registered again at any time.</para><para><heading level="1">Measured vs True Temperature</heading>
</para><para>While the driver aims to supply and act on an accurate absolute temperature, there will be differences between the measured vs the true temperature due to inherent variances in the manufacturing process. The nature of these differences varies by device family.</para><para>Examples of such differences:<itemizedlist>
<listitem><para>A constant per-chip offset between the measured and the true temperature</para></listitem><listitem><para>An temperature dependent per-chip offset between the measured and the true temperature</para></listitem><listitem><para>A variance in the measured temperature when measuring multiple times at the same chip temperature</para></listitem></itemizedlist>
</para><para>It is strongly recommended to read the device-specific Temperature driver documentation for details of the temperature sensor characteristics and how they might affect choices of threshold values.</para><para><anchor id="_temperature_8h_1ti_drivers_Temperature_Synopsis"/><heading level="1">Synopsis</heading>
</para><para><anchor id="_temperature_8h_1ti_drivers_Temperature_Synopsis_Code"/><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/Temperature.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>WINDOW_DELTA<sp/>10</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Temperature_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">currentTemperature<sp/>=<sp/>Temperature_getTemperature();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>Temperature_registerNotifyRange(&amp;notifyObject,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>+<sp/>WINDOW_DELTA,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>-<sp/>WINDOW_DELTA,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myNotifyFxn,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clientArg);</highlight></codeline>
</programlisting></para><para><anchor id="_temperature_8h_1ti_drivers_Temperature_Examples"/><heading level="1">Examples</heading>
</para><para><heading level="2">Register a High Threshold Notification</heading>
</para><para><programlisting><codeline><highlight class="normal">//<sp/>The<sp/>notification<sp/>will<sp/>trigger<sp/>when<sp/>the<sp/>temperature<sp/>reaches<sp/>40<sp/>C</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>THRESHOLD_CUTOFF<sp/>40</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/Temperature.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>thresholdNotifyFxn(int16_t<sp/>currentTemperature,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>thresholdTemperature,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>clientArg,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Temperature_NotifyObj<sp/>*notifyObject)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Post<sp/>a<sp/>semaphore,<sp/>set<sp/>a<sp/>flag,<sp/>or<sp/>otherwise<sp/>act<sp/>upon<sp/>the<sp/>temperature</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>change.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>Temperature<sp/>driver<sp/>and<sp/>register<sp/>a<sp/>notification.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Temperature_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>status<sp/>=<sp/>Temperature_registerNotifyHigh(notifyObject,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>THRESHOLD_CUTOFF,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thresholdNotifyFxn,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>!=<sp/>Temperature_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="2">Register a Range Threshold Notification and Reregister in Callback</heading>
</para><para><programlisting><codeline><highlight class="normal">#define<sp/>THRESHOLD_DELTA<sp/>5</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/Temperature.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>deltaNotificationFxn(int16_t<sp/>currentTemperature,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>thresholdTemperature,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>clientArg,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Temperature_NotifyObj<sp/>*notifyObject)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int_fast16_t<sp/>status;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>Temperature_registerNotifyRange(notifyObject,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>+<sp/>THRESHOLD_DELTA,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>-<sp/>THRESHOLD_DELTA,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaNotificationFxn,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(status<sp/>!=<sp/>Temperature_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>Temperature<sp/>driver<sp/>and<sp/>register<sp/>a<sp/>notification.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Temperature_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int16_t<sp/>currentTemperature<sp/>=<sp/>Temperature_getTemperature();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>status<sp/>=<sp/>Temperature_registerNotifyRange(notifyObject,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>+<sp/>THRESHOLD_DELTA,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>-<sp/>THRESHOLD_DELTA,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaNotificationFxn,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020-2021,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Temperature.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Temperature<sp/>driver</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Temperature_Overview</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview<sp/>#</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>Temperature<sp/>driver<sp/>provides<sp/>services<sp/>related<sp/>to<sp/>measuring<sp/>and<sp/>reacting</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>the<sp/>current<sp/>temperature<sp/>of<sp/>the<sp/>chip<sp/>and<sp/>changes<sp/>to<sp/>it.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>two<sp/>main<sp/>services<sp/>provided<sp/>are:</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Getting<sp/>the<sp/>current<sp/>temperature</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Providing<sp/>notification<sp/>callbacks<sp/>when<sp/>the<sp/>temperature<sp/>changes</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Temperature_Usage</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage<sp/>#</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Initialisation<sp/>#</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>Unlike<sp/>most<sp/>drivers,<sp/>there<sp/>is<sp/>only<sp/>a<sp/>single<sp/>instance<sp/>of<sp/>the<sp/>temperature</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>driver<sp/>that<sp/>is<sp/>always<sp/>available<sp/>once<sp/>#Temperature_init()<sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>#Temperature_init()<sp/>should<sp/>be<sp/>called<sp/>once<sp/>before<sp/>using<sp/>other<sp/>Temperature</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>driver<sp/>APIs.<sp/>Subsequent<sp/>#Temperature_init()<sp/>calls<sp/>will<sp/>have<sp/>no<sp/>effect.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Getting<sp/>the<sp/>Current<sp/>Temperature<sp/>#</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>most<sp/>basic<sp/>function<sp/>of<sp/>the<sp/>driver<sp/>is<sp/>to<sp/>provide<sp/>the<sp/>current<sp/>temperature</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>return<sp/>it.<sp/>It<sp/>is<sp/>encoded<sp/>as<sp/>a<sp/>signed<sp/>integer<sp/>in<sp/>degrees<sp/>C.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Notifications<sp/>#</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>other<sp/>major<sp/>function<sp/>of<sp/>the<sp/>Temperature<sp/>driver<sp/>is<sp/>to<sp/>notify<sp/>the</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>application<sp/>when<sp/>the<sp/>temperature<sp/>changes<sp/>and<sp/>crosses<sp/>an<sp/>application-defined</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>threshold.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>There<sp/>are<sp/>three<sp/>default<sp/>usecases<sp/>for<sp/>this:</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>High<sp/>threshold.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>application<sp/>will<sp/>receive<sp/>a<sp/>notification<sp/>callback<sp/>when</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>&gt;=<sp/>thresholdHigh.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Low<sp/>threshold.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>application<sp/>will<sp/>receive<sp/>a<sp/>notification<sp/>callback<sp/>when</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>&lt;=<sp/>thresholdLow.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Range<sp/>threshold.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>application<sp/>will<sp/>receive<sp/>a<sp/>notification<sp/>callback<sp/>when</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>&gt;=<sp/>thresholdHigh<sp/>||<sp/>currentTemperature<sp/>&lt;=</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thresholdLow.<sp/>This<sp/>setup<sp/>addresses<sp/>usecases</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>a<sp/>notification<sp/>is<sp/>required<sp/>when<sp/>the<sp/>temperature<sp/>changes<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>certain<sp/>amount<sp/>regardless<sp/>of<sp/>whether<sp/>it<sp/>is<sp/>up<sp/>or<sp/>down.<sp/>Adjusting</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock<sp/>offsets<sp/>based<sp/>on<sp/>temperature<sp/>is<sp/>a<sp/>good<sp/>example<sp/>of<sp/>this.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Registering<sp/>Notifications</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>There<sp/>are<sp/>three<sp/>functions<sp/>that<sp/>register<sp/>a<sp/>notification<sp/>for<sp/>the<sp/>application:</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>#Temperature_registerNotifyHigh()</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>#Temperature_registerNotifyLow()</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>#Temperature_registerNotifyRange()</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>Multiple<sp/>notifications<sp/>may<sp/>be<sp/>registered.<sp/>The<sp/>different<sp/>parts<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>application<sp/>and<sp/>drivers<sp/>that<sp/>need<sp/>to<sp/>respond<sp/>to<sp/>a<sp/>temperature<sp/>change<sp/>do<sp/>not</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>need<sp/>to<sp/>know<sp/>of<sp/>one<sp/>another.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>Each<sp/>notification<sp/>must<sp/>have<sp/>its<sp/>own<sp/>#Temperature_NotifyObj<sp/>and<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/>registered<sp/>individually.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Notification<sp/>Callbacks</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>Once<sp/>the<sp/>chip<sp/>temperature<sp/>crosses<sp/>the<sp/>smallest<sp/>high<sp/>threshold<sp/>or<sp/>largest</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>low<sp/>threshold<sp/>amongst<sp/>the<sp/>registered<sp/>notifications,<sp/>the<sp/>driver<sp/>will</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>iterate<sp/>over<sp/>the<sp/>entire<sp/>list<sp/>of<sp/>registered<sp/>notification<sp/>and<sp/>check<sp/>which</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>ones<sp/>have<sp/>triggered.<sp/>Notifications<sp/>that<sp/>have<sp/>triggered<sp/>are<sp/>removed<sp/>from</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>list<sp/>of<sp/>registered<sp/>notifications<sp/>and<sp/>thus<sp/>are<sp/>no<sp/>longer<sp/>registered.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>Their<sp/>callback<sp/>function<sp/>is<sp/>then<sp/>invoked.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>an<sp/>application<sp/>wishes<sp/>to<sp/>reregister<sp/>a<sp/>notification<sp/>that<sp/>just<sp/>triggered</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>was<sp/>unregistered,<sp/>it<sp/>may<sp/>register<sp/>it<sp/>again<sp/>from<sp/>within<sp/>the<sp/>notification</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>callback<sp/>or<sp/>another<sp/>context.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>is<sp/>possible<sp/>to<sp/>determine<sp/>whether<sp/>the<sp/>high<sp/>or<sp/>low<sp/>threshold<sp/>triggered</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>notification<sp/>callback<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>currentTemperature<sp/>&lt;=<sp/>thresholdTemperature:<sp/>Low<sp/>threshold<sp/>triggered</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>currentTemperature<sp/>&gt;=<sp/>thresholdTemperature:<sp/>High<sp/>threshold<sp/>triggered</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>information<sp/>is<sp/>only<sp/>reasonably<sp/>useful<sp/>when<sp/>registering<sp/>a<sp/>notification</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>with<sp/>both<sp/>a<sp/>high<sp/>and<sp/>low<sp/>threshold<sp/>using<sp/>#Temperature_registerNotifyRange().</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>Even<sp/>then,<sp/>the<sp/>expected<sp/>basic<sp/>usecase<sp/>only<sp/>cares<sp/>about<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>temperature<sp/>and<sp/>adding<sp/>an<sp/>offset<sp/>to<sp/>it<sp/>when<sp/>registering<sp/>the<sp/>notification</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>again.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Unregistering<sp/>Notifications</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>Registered<sp/>notifications<sp/>are<sp/>unregistered<sp/>in<sp/>two<sp/>ways:</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Automatically<sp/>when<sp/>a<sp/>notification<sp/>triggers</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>By<sp/>calling<sp/>#Temperature_unregisterNotify()</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>Unregistered<sp/>notifications<sp/>may<sp/>be<sp/>registered<sp/>again<sp/>at<sp/>any<sp/>time.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Measured<sp/>vs<sp/>True<sp/>Temperature</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>While<sp/>the<sp/>driver<sp/>aims<sp/>to<sp/>supply<sp/>and<sp/>act<sp/>on<sp/>an<sp/>accurate<sp/>absolute<sp/>temperature,</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>there<sp/>will<sp/>be<sp/>differences<sp/>between<sp/>the<sp/>measured<sp/>vs<sp/>the<sp/>true<sp/>temperature<sp/>due</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>inherent<sp/>variances<sp/>in<sp/>the<sp/>manufacturing<sp/>process.<sp/>The<sp/>nature<sp/>of<sp/>these</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/>differences<sp/>varies<sp/>by<sp/>device<sp/>family.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/>Examples<sp/>of<sp/>such<sp/>differences:</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>A<sp/>constant<sp/>per-chip<sp/>offset<sp/>between<sp/>the<sp/>measured<sp/>and<sp/>the<sp/>true</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temperature</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>An<sp/>temperature<sp/>dependent<sp/>per-chip<sp/>offset<sp/>between<sp/>the<sp/>measured<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>true<sp/>temperature</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>A<sp/>variance<sp/>in<sp/>the<sp/>measured<sp/>temperature<sp/>when<sp/>measuring<sp/>multiple<sp/>times</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at<sp/>the<sp/>same<sp/>chip<sp/>temperature</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>is<sp/>strongly<sp/>recommended<sp/>to<sp/>read<sp/>the<sp/>device-specific<sp/>Temperature<sp/>driver</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>documentation<sp/>for<sp/>details<sp/>of<sp/>the<sp/>temperature<sp/>sensor<sp/>characteristics<sp/>and</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/>how<sp/>they<sp/>might<sp/>affect<sp/>choices<sp/>of<sp/>threshold<sp/>values.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Temperature_Synopsis</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Synopsis<sp/>#</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Temperature_Synopsis_Code</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/Temperature.h&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>WINDOW_DELTA<sp/>10</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/>Temperature_init();</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>currentTemperature<sp/>=<sp/>Temperature_getTemperature();</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>Temperature_registerNotifyRange(&amp;notifyObject,</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>+<sp/>WINDOW_DELTA,</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>-<sp/>WINDOW_DELTA,</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myNotifyFxn,</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clientArg);</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_Temperature_Examples</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Examples<sp/>#</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Register<sp/>a<sp/>High<sp/>Threshold<sp/>Notification<sp/>#</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>The<sp/>notification<sp/>will<sp/>trigger<sp/>when<sp/>the<sp/>temperature<sp/>reaches<sp/>40<sp/>C</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>THRESHOLD_CUTOFF<sp/>40</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/Temperature.h&gt;</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>thresholdNotifyFxn(int16_t<sp/>currentTemperature,</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>thresholdTemperature,</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>clientArg,</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Temperature_NotifyObj<sp/>*notifyObject)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>Post<sp/>a<sp/>semaphore,<sp/>set<sp/>a<sp/>flag,<sp/>or<sp/>otherwise<sp/>act<sp/>upon<sp/>the<sp/>temperature</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>change.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/>...</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Initialize<sp/>the<sp/>Temperature<sp/>driver<sp/>and<sp/>register<sp/>a<sp/>notification.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/>Temperature_init();</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>status<sp/>=<sp/>Temperature_registerNotifyHigh(notifyObject,</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>THRESHOLD_CUTOFF,</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thresholdNotifyFxn,</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(status<sp/>!=<sp/>Temperature_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Register<sp/>a<sp/>Range<sp/>Threshold<sp/>Notification<sp/>and<sp/>Reregister<sp/>in<sp/>Callback<sp/>#</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>THRESHOLD_DELTA<sp/>5</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/Temperature.h&gt;</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>deltaNotificationFxn(int16_t<sp/>currentTemperature,</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>thresholdTemperature,</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>clientArg,</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Temperature_NotifyObj<sp/>*notifyObject)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>status;</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>Temperature_registerNotifyRange(notifyObject,</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>+<sp/>THRESHOLD_DELTA,</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>-<sp/>THRESHOLD_DELTA,</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaNotificationFxn,</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status<sp/>!=<sp/>Temperature_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Initialize<sp/>the<sp/>Temperature<sp/>driver<sp/>and<sp/>register<sp/>a<sp/>notification.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/><sp/>Temperature_init();</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/><sp/>int16_t<sp/>currentTemperature<sp/>=<sp/>Temperature_getTemperature();</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>status<sp/>=<sp/>Temperature_registerNotifyRange(notifyObject,</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>+<sp/>THRESHOLD_DELTA,</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTemperature<sp/>-<sp/>THRESHOLD_DELTA,</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaNotificationFxn,</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_Temperature__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_Temperature__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_list_8h" kindref="compound">ti/drivers/utils/List.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="_temperature_8h_1a83521cb2f95fcfcbc85b5abac08b5ecd" refkind="member"><highlight class="preprocessor">#define<sp/>Temperature_STATUS_RESERVED<sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="_temperature_8h_1afb1bf035404a59ddf1ae8b6c0c6bfe3c" refkind="member"><highlight class="preprocessor">#define<sp/>Temperature_STATUS_SUCCESS<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="_temperature_8h_1aa80b3df221507b536c62070650ee383d" refkind="member"><highlight class="preprocessor">#define<sp/>Temperature_STATUS_ERROR<sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@cond</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>Type<sp/>declaration<sp/>for<sp/>the<sp/>notification<sp/>object<sp/>made<sp/>separately<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>struct<sp/>definition<sp/>because<sp/>of<sp/>the<sp/>circular<sp/>dependency<sp/>between</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>#Temperature_NotifyFxn()<sp/>and<sp/>#Temperature_NotifyObj.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref><sp/><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@endcond<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="_temperature_8h_1adcb56ac4fa37327cd11c5b3ff5f8bd6f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_temperature_8h_1adcb56ac4fa37327cd11c5b3ff5f8bd6f" kindref="member">Temperature_NotifyFxn</ref>)(int16_t<sp/>currentTemperature,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>thresholdTemperature,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="struct_temperature___notify_obj_1aa3f3d0a781bc001a1082d06cfff01bb2" kindref="member">clientArg</ref>,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref><sp/>*notifyObject);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="struct_temperature___notify_obj" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref></highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322" refid="struct_temperature___notify_obj_1ad72af01693986ac68a5a3a291cb585ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/><ref refid="struct_temperature___notify_obj_1ad72af01693986ac68a5a3a291cb585ce" kindref="member">link</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="323" refid="struct_temperature___notify_obj_1a26b7b23f50dd1e001e5bf43c43220327" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_temperature_8h_1adcb56ac4fa37327cd11c5b3ff5f8bd6f" kindref="member">Temperature_NotifyFxn</ref><sp/><ref refid="struct_temperature___notify_obj_1a26b7b23f50dd1e001e5bf43c43220327" kindref="member">notifyFxn</ref>;<sp/></highlight></codeline>
<codeline lineno="324" refid="struct_temperature___notify_obj_1a9d31f0b7abe2343412ade63cd5940cc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/><ref refid="struct_temperature___notify_obj_1a9d31f0b7abe2343412ade63cd5940cc8" kindref="member">thresholdHigh</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="325" refid="struct_temperature___notify_obj_1a1df6b683778a2d1f3cd5eb38e6b97f9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/><ref refid="struct_temperature___notify_obj_1a1df6b683778a2d1f3cd5eb38e6b97f9a" kindref="member">thresholdLow</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="326" refid="struct_temperature___notify_obj_1aa3f3d0a781bc001a1082d06cfff01bb2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="struct_temperature___notify_obj_1aa3f3d0a781bc001a1082d06cfff01bb2" kindref="member">clientArg</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="327" refid="struct_temperature___notify_obj_1ad7a2e67af5fc177c2e07ba553ba72b57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_temperature___notify_obj_1ad7a2e67af5fc177c2e07ba553ba72b57" kindref="member">isRegistered</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal">};</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_temperature_8h_1a77ed988c7e67988686d0f04c2d2246af" kindref="member">Temperature_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">int16_t<sp/><ref refid="_temperature_8h_1a7c1fb8e6900fc21f146614c1a6a1d843" kindref="member">Temperature_getTemperature</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">int_fast16_t<sp/><ref refid="_temperature_8h_1a6e061692e79590b06c0cfbb0c64cf474" kindref="member">Temperature_registerNotifyHigh</ref>(<ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref><sp/>*notifyObject,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/><ref refid="struct_temperature___notify_obj_1a9d31f0b7abe2343412ade63cd5940cc8" kindref="member">thresholdHigh</ref>,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_temperature_8h_1adcb56ac4fa37327cd11c5b3ff5f8bd6f" kindref="member">Temperature_NotifyFxn</ref><sp/><ref refid="struct_temperature___notify_obj_1a26b7b23f50dd1e001e5bf43c43220327" kindref="member">notifyFxn</ref>,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>clientArg);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">int_fast16_t<sp/><ref refid="_temperature_8h_1ac121a63550c7ebb75764cb24f34787d0" kindref="member">Temperature_registerNotifyLow</ref>(<ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref><sp/>*notifyObject,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/><ref refid="struct_temperature___notify_obj_1a1df6b683778a2d1f3cd5eb38e6b97f9a" kindref="member">thresholdLow</ref>,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_temperature_8h_1adcb56ac4fa37327cd11c5b3ff5f8bd6f" kindref="member">Temperature_NotifyFxn</ref><sp/><ref refid="struct_temperature___notify_obj_1a26b7b23f50dd1e001e5bf43c43220327" kindref="member">notifyFxn</ref>,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>clientArg);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">int_fast16_t<sp/><ref refid="_temperature_8h_1a67658618e0e4313e825904f13996631f" kindref="member">Temperature_registerNotifyRange</ref>(<ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref><sp/>*notifyObject,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/><ref refid="struct_temperature___notify_obj_1a9d31f0b7abe2343412ade63cd5940cc8" kindref="member">thresholdHigh</ref>,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/><ref refid="struct_temperature___notify_obj_1a1df6b683778a2d1f3cd5eb38e6b97f9a" kindref="member">thresholdLow</ref>,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_temperature_8h_1adcb56ac4fa37327cd11c5b3ff5f8bd6f" kindref="member">Temperature_NotifyFxn</ref><sp/><ref refid="struct_temperature___notify_obj_1a26b7b23f50dd1e001e5bf43c43220327" kindref="member">notifyFxn</ref>,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>clientArg);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">int_fast16_t<sp/><ref refid="_temperature_8h_1a73f2c54715b16a2d19c23431d53a85a7" kindref="member">Temperature_unregisterNotify</ref>(<ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref><sp/>*notifyObject);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">int16_t<sp/><ref refid="_temperature_8h_1a356080ee9da43e65d2ff0c3b384ff0ff" kindref="member">Temperature_getThresholdHigh</ref>(<ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref><sp/>*notifyObject);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal">int16_t<sp/><ref refid="_temperature_8h_1a98e59edd29fac53006b60964d1e62a42" kindref="member">Temperature_getThresholdLow</ref>(<ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref><sp/>*notifyObject);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_temperature_8h_1ae22c546ad0c9cffe274c3f980eb419e7" kindref="member">Temperature_getThresholdRange</ref>(<ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref><sp/>*notifyObject,<sp/>int16_t<sp/>*<ref refid="struct_temperature___notify_obj_1a9d31f0b7abe2343412ade63cd5940cc8" kindref="member">thresholdHigh</ref>,<sp/>int16_t<sp/>*<ref refid="struct_temperature___notify_obj_1a1df6b683778a2d1f3cd5eb38e6b97f9a" kindref="member">thresholdLow</ref>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal">uintptr_t<sp/><ref refid="_temperature_8h_1a43b325ff38ce9aa920eca3d60285ef8b" kindref="member">Temperature_getClientArg</ref>(<ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref><sp/>*notifyObject);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><ref refid="_temperature_8h_1adcb56ac4fa37327cd11c5b3ff5f8bd6f" kindref="member">Temperature_NotifyFxn</ref><sp/><ref refid="_temperature_8h_1ac48e56151bc6c260f605dbe58dabe736" kindref="member">Temperature_getNotifyFxn</ref>(<ref refid="struct_temperature___notify_obj" kindref="compound">Temperature_NotifyObj</ref><sp/>*notifyObject);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_Temperature__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/Temperature.h"/>
  </compounddef>
</doxygen>
