<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_p_w_m_timer_c_c26_x_x_8h" kind="file" language="C++">
    <compoundname>PWMTimerCC26XX.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="_p_w_m_8h" local="no">ti/drivers/PWM.h</includes>
    <includes refid="_g_p_timer_c_c26_x_x_8h" local="no">ti/drivers/timer/GPTimerCC26XX.h</includes>
    <incdepgraph>
      <node id="1209">
        <label>stdbool.h</label>
      </node>
      <node id="1208">
        <label>stdint.h</label>
      </node>
      <node id="1207">
        <label>PWMTimerCC26XX.h</label>
        <link refid="_p_w_m_timer_c_c26_x_x_8h"/>
        <childnode refid="1208" relation="include">
        </childnode>
        <childnode refid="1209" relation="include">
        </childnode>
        <childnode refid="1210" relation="include">
        </childnode>
        <childnode refid="1211" relation="include">
        </childnode>
      </node>
      <node id="1216">
        <label>DeviceFamily_constructPath(driverlib/event.h)</label>
      </node>
      <node id="1218">
        <label>DeviceFamily_constructPath(driverlib/timer.h)</label>
      </node>
      <node id="1212">
        <label>stddef.h</label>
      </node>
      <node id="1215">
        <label>DeviceFamily_constructPath(inc/hw_gpt.h)</label>
      </node>
      <node id="1214">
        <label>ti/devices/DeviceFamily.h</label>
      </node>
      <node id="1213">
        <label>ti/drivers/dpl/HwiP.h</label>
      </node>
      <node id="1210">
        <label>ti/drivers/PWM.h</label>
        <link refid="_p_w_m_8h"/>
        <childnode refid="1208" relation="include">
        </childnode>
      </node>
      <node id="1211">
        <label>ti/drivers/timer/GPTimerCC26XX.h</label>
        <link refid="_g_p_timer_c_c26_x_x_8h"/>
        <childnode refid="1208" relation="include">
        </childnode>
        <childnode refid="1209" relation="include">
        </childnode>
        <childnode refid="1212" relation="include">
        </childnode>
        <childnode refid="1213" relation="include">
        </childnode>
        <childnode refid="1214" relation="include">
        </childnode>
        <childnode refid="1215" relation="include">
        </childnode>
        <childnode refid="1216" relation="include">
        </childnode>
        <childnode refid="1217" relation="include">
        </childnode>
        <childnode refid="1218" relation="include">
        </childnode>
      </node>
      <node id="1217">
        <label>DeviceFamily_constructPath(driverlib/ioc.h)</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_p_w_m_timer_c_c26_x_x___hw_attrs" prot="public">PWMTimerCC26XX_HwAttrs</innerclass>
    <innerclass refid="struct_p_w_m_timer_c_c26_x_x___object" prot="public">PWMTimerCC26XX_Object</innerclass>
      <sectiondef kind="user-defined">
      <header>PWMTimerCC26XX specific control commands and arguments</header>
      <memberdef kind="define" id="_p_w_m_timer_c_c26_x_x_8h_1af011898e1f39f5c46e5bee16da53f893" prot="public" static="no">
        <name>PWMTimerCC26XX_CMD_DEBUG_STALL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Timer debug stall mode (stop PWM output debugger halts CPU) When enabled, PWM output will be HIGH when CPU is halted </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pwm/PWMTimerCC26XX.h" line="149" column="9" bodyfile="source/ti/drivers/pwm/PWMTimerCC26XX.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arguments for PWMTimerCC26XX_CMD_DEBUG_STALL</header>
      <memberdef kind="define" id="_p_w_m_timer_c_c26_x_x_8h_1a89d7c2f8674a7adb6d904b9cfb94c509" prot="public" static="no">
        <name>CMD_ARG_DEBUG_STALL_OFF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pwm/PWMTimerCC26XX.h" line="154" column="9" bodyfile="source/ti/drivers/pwm/PWMTimerCC26XX.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_timer_c_c26_x_x_8h_1a922b8318640c67c3c20a4e991e9b486d" prot="public" static="no">
        <name>CMD_ARG_DEBUG_STALL_ON</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pwm/PWMTimerCC26XX.h" line="155" column="9" bodyfile="source/ti/drivers/pwm/PWMTimerCC26XX.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_p_w_m_timer_c_c26_x_x_8h_1a5d7ba49f8ef49f03deac6494bd0fc18e" prot="public" static="no">
        <type>struct <ref refid="struct_p_w_m_timer_c_c26_x_x___hw_attrs" kindref="compound">PWMTimerCC26XX_HwAttrs</ref></type>
        <definition>typedef struct PWMTimerCC26XX_HwAttrs  PWMTimerCC26XX_HwAttrs</definition>
        <argsstring></argsstring>
        <name>PWMTimerCC26XX_HwAttrs</name>
        <briefdescription>
<para>PWMTimer26XX Hardware attributes. </para>        </briefdescription>
        <detaileddescription>
<para>These fields are used by the driver to set up underlying GPIO and GPTimer driver statically. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pwm/PWMTimerCC26XX.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_timer_c_c26_x_x_8h_1a655ae995c6140ecdc5e97abf2f89c8ab" prot="public" static="no">
        <type>struct <ref refid="struct_p_w_m_timer_c_c26_x_x___object" kindref="compound">PWMTimerCC26XX_Object</ref></type>
        <definition>typedef struct PWMTimerCC26XX_Object  PWMTimerCC26XX_Object</definition>
        <argsstring></argsstring>
        <name>PWMTimerCC26XX_Object</name>
        <briefdescription>
<para>PWMTimer26XX Object. </para>        </briefdescription>
        <detaileddescription>
<para>These fields are used by the driver to store and modify PWM configuration during run-time. The application must not edit any member variables of this structure. Appplications should also not access member variables of this structure as backwards compatibility is not guaranteed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pwm/PWMTimerCC26XX.h" line="196" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_p_w_m_timer_c_c26_x_x_8h_1af4a829750f9974fb6944f7d17fc7512d" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_p_w_m___fxn_table" kindref="compound">PWM_FxnTable</ref></type>
        <definition>const PWM_FxnTable PWMTimerCC26XX_fxnTable</definition>
        <argsstring></argsstring>
        <name>PWMTimerCC26XX_fxnTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/pwm/PWMTimerCC26XX.h" line="161" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PWM driver implementation for CC26XX/CC13XX. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><heading level="1">Overview</heading>
</para><para>The general PWM API should be used in application code, i.e. <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> should be used instead of PWMTimerCC26XX_open(). The board file will define the device specific config, and casting in the general API will ensure that the correct device specific functions are called.</para><para><heading level="1">General Behavior</heading>
</para><para>Before using PWM on CC26XX:<itemizedlist>
<listitem><para>The Timer HW is configured and system dependencies (for example IOs, power, etc.) are set by calling <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></listitem></itemizedlist>
</para><para><heading level="1">Error handling</heading>
</para><para>If unsupported arguments are provided to an API returning an error code, the PWM configuration will <emphasis>not</emphasis> be updated and PWM will stay in the mode it was already configured to.</para><para><heading level="1">Power Management</heading>
</para><para>The TI-RTOS power management framework will try to put the device into the most power efficient mode whenever possible. Please see the technical reference manual for further details on each power mode.</para><para>The <ref refid="_p_w_m_timer_c_c26_x_x_8h" kindref="compound">PWMTimerCC26XX.h</ref> driver is not explicitly setting a power constraint when the PWM is running to prevent standby as this is assumed to be done in the underlying GPTimer driver. The following statements are valid:<itemizedlist>
<listitem><para>After <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>: The device is still allowed to enter Standby. When the device is active the underlying GPTimer peripheral will be enabled and clocked.</para></listitem><listitem><para>After <ref refid="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" kindref="member">PWM_start()</ref>: The device can only go to Idle power mode since the high-frequency clock is needed for PWM operation:</para></listitem><listitem><para>After <ref refid="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" kindref="member">PWM_stop()</ref>: Conditions are equal as for after PWM_open</para></listitem><listitem><para>After <ref refid="_p_w_m_8h_1a0e0f5899b067d27653db566fb148db11" kindref="member">PWM_close()</ref>: The underlying GPTimer is turned off and the device is allowed to go to standby.</para></listitem></itemizedlist>
</para><para><heading level="1">Accuracy</heading>
</para><para>The PWM output period and duty cycle are limited by the underlying timer. In PWM mode the timer is effectively 24 bits which results in a minimum frequency of 48MHz / (2^24-1) = 2.86Hz (349.525ms) The driver will round off the configured duty and period to a value limited by the timer resolution and the application is responsible for selecting duty and period that works with the underlying timer if high accuracy is needed.</para><para>The effect of this is most visible when using high output frequencies as the available duty cycle resolution is reduced correspondingly. For a 24MHz PWM only a 0%/50%/100% duty is available as the timer uses only counts 0 and 1. Similarly for a 12MHz period the duty cycle will be limited to a 12.5% resolution.</para><para><simplesect kind="note"><para>The PWM signals are generated using the high-frequency clock as a source. The internal RC oscillator is the source of the high frequency clock, but may not be accurate enough for certain applications. If very high-accuracy outputs are needed, the application should request using the external HF crystal: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/Power.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/power/PowerCC26XX.h&gt;</highlight></codeline>
<codeline><highlight class="normal">Power_setDependency(PowerCC26XX_XOSC_HF);</highlight></codeline>
</programlisting></para></simplesect>
<heading level="1">Limitations</heading>
</para><para><itemizedlist>
<listitem><para>The PWM output can currently not be synchronized with other PWM outputs</para></listitem><listitem><para>The PWM driver does not support updating duty and period using DMA.</para></listitem><listitem><para>Changes to the timer period are applied immediately, which can cause pulses to be too long or short unless period changes are applied close to a timeout. Does not apply to duty cycle, which is applied on timeout. <heading level="1">PWM usage</heading>
</para></listitem></itemizedlist>
</para><para><heading level="2">Basic PWM output</heading>
</para><para>The below example will output a 8MHz PWM signal with 50% duty cycle. <programlisting><codeline><highlight class="normal">PWM_Handle<sp/>pwmHandle;</highlight></codeline>
<codeline><highlight class="normal">PWM_Params<sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PWM_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.idleLevel<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_IDLE_LOW;</highlight></codeline>
<codeline><highlight class="normal">params.periodUnits<sp/><sp/><sp/><sp/>=<sp/>PWM_PERIOD_HZ;</highlight></codeline>
<codeline><highlight class="normal">params.periodValue<sp/><sp/><sp/><sp/>=<sp/>8e6;</highlight></codeline>
<codeline><highlight class="normal">params.dutyUnits<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_DUTY_FRACTION;</highlight></codeline>
<codeline><highlight class="normal">params.dutyValue<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_DUTY_FRACTION_MAX<sp/>/<sp/>2;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">pwmHandle<sp/>=<sp/>PWM_open(CONFIG_PWM0,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">if(pwmHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Log_error0(&quot;Failed<sp/>to<sp/>open<sp/>PWM&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Task_exit();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">PWM_start(pwmHandle);</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2021,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!*****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>PWMTimerCC26XX.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>PWM<sp/>driver<sp/>implementation<sp/>for<sp/>CC26XX/CC13XX</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview<sp/>#</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>The<sp/>general<sp/>PWM<sp/>API<sp/>should<sp/>be<sp/>used<sp/>in<sp/>application<sp/>code,<sp/>i.e.<sp/>PWM_open()</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>should<sp/>be<sp/>used<sp/>instead<sp/>of<sp/>PWMTimerCC26XX_open().<sp/>The<sp/>board<sp/>file<sp/>will<sp/>define<sp/>the<sp/>device</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>specific<sp/>config,<sp/>and<sp/>casting<sp/>in<sp/>the<sp/>general<sp/>API<sp/>will<sp/>ensure<sp/>that<sp/>the<sp/>correct</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>device<sp/>specific<sp/>functions<sp/>are<sp/>called.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>#<sp/>General<sp/>Behavior<sp/>#</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Before<sp/>using<sp/>PWM<sp/>on<sp/>CC26XX:</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>The<sp/>Timer<sp/>HW<sp/>is<sp/>configured<sp/>and<sp/>system<sp/>dependencies<sp/>(for<sp/>example<sp/>IOs,</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>power,<sp/>etc.)<sp/>are<sp/>set<sp/>by<sp/>calling<sp/>PWM_open().</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>#<sp/>Error<sp/>handling<sp/>#</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>If<sp/>unsupported<sp/>arguments<sp/>are<sp/>provided<sp/>to<sp/>an<sp/>API<sp/>returning<sp/>an<sp/>error<sp/>code,<sp/>the</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>PWM<sp/>configuration<sp/>will<sp/>*not*<sp/>be<sp/>updated<sp/>and<sp/>PWM<sp/>will<sp/>stay<sp/>in<sp/>the<sp/>mode<sp/>it</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>was<sp/>already<sp/>configured<sp/>to.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>#<sp/>Power<sp/>Management<sp/>#</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>The<sp/>TI-RTOS<sp/>power<sp/>management<sp/>framework<sp/>will<sp/>try<sp/>to<sp/>put<sp/>the<sp/>device<sp/>into<sp/>the<sp/>most</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>power<sp/>efficient<sp/>mode<sp/>whenever<sp/>possible.<sp/>Please<sp/>see<sp/>the<sp/>technical<sp/>reference</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>manual<sp/>for<sp/>further<sp/>details<sp/>on<sp/>each<sp/>power<sp/>mode.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>PWMTimerCC26XX.h<sp/>driver<sp/>is<sp/>not<sp/>explicitly<sp/>setting<sp/>a<sp/>power<sp/>constraint<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>PWM<sp/>is<sp/>running<sp/>to<sp/>prevent<sp/>standby<sp/>as<sp/>this<sp/>is<sp/>assumed<sp/>to<sp/>be<sp/>done<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>underlying<sp/>GPTimer<sp/>driver.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>following<sp/>statements<sp/>are<sp/>valid:</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>After<sp/>PWM_open():<sp/>The<sp/>device<sp/>is<sp/>still<sp/>allowed<sp/>to<sp/>enter<sp/>Standby.<sp/>When<sp/>the</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device<sp/>is<sp/>active<sp/>the<sp/>underlying<sp/>GPTimer<sp/>peripheral<sp/>will</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>enabled<sp/>and<sp/>clocked.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>After<sp/>PWM_start():<sp/>The<sp/>device<sp/>can<sp/>only<sp/>go<sp/>to<sp/>Idle<sp/>power<sp/>mode<sp/>since<sp/>the</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>high-frequency<sp/>clock<sp/>is<sp/>needed<sp/>for<sp/>PWM<sp/>operation:</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>After<sp/>PWM_stop():<sp/><sp/>Conditions<sp/>are<sp/>equal<sp/>as<sp/>for<sp/>after<sp/>PWM_open</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>After<sp/>PWM_close():<sp/>The<sp/>underlying<sp/>GPTimer<sp/>is<sp/>turned<sp/>off<sp/>and<sp/>the<sp/>device</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>allowed<sp/>to<sp/>go<sp/>to<sp/>standby.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Accuracy<sp/>#</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>PWM<sp/>output<sp/>period<sp/>and<sp/>duty<sp/>cycle<sp/>are<sp/>limited<sp/>by<sp/>the<sp/>underlying<sp/>timer.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>PWM<sp/>mode<sp/>the<sp/>timer<sp/>is<sp/>effectively<sp/>24<sp/>bits<sp/>which<sp/>results<sp/>in<sp/>a<sp/>minimum</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>frequency<sp/>of<sp/>48MHz<sp/>/<sp/>(2^24-1)<sp/>=<sp/>2.86Hz<sp/>(349.525ms)</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>driver<sp/>will<sp/>round<sp/>off<sp/>the<sp/>configured<sp/>duty<sp/>and<sp/>period<sp/>to<sp/>a<sp/>value<sp/>limited</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>by<sp/>the<sp/>timer<sp/>resolution<sp/>and<sp/>the<sp/>application<sp/>is<sp/>responsible<sp/>for<sp/>selecting</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/>duty<sp/>and<sp/>period<sp/>that<sp/>works<sp/>with<sp/>the<sp/>underlying<sp/>timer<sp/>if<sp/>high<sp/>accuracy<sp/>is</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>needed.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>effect<sp/>of<sp/>this<sp/>is<sp/>most<sp/>visible<sp/>when<sp/>using<sp/>high<sp/>output<sp/>frequencies<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>available<sp/>duty<sp/>cycle<sp/>resolution<sp/>is<sp/>reduced<sp/>correspondingly.<sp/>For<sp/>a<sp/>24MHz<sp/>PWM</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>only<sp/>a<sp/>0%/50%/100%<sp/>duty<sp/>is<sp/>available<sp/>as<sp/>the<sp/>timer<sp/>uses<sp/>only<sp/>counts<sp/>0<sp/>and<sp/>1.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>Similarly<sp/>for<sp/>a<sp/>12MHz<sp/>period<sp/>the<sp/>duty<sp/>cycle<sp/>will<sp/>be<sp/>limited<sp/>to<sp/>a<sp/>12.5%</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>resolution.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>The<sp/>PWM<sp/>signals<sp/>are<sp/>generated<sp/>using<sp/>the<sp/>high-frequency<sp/>clock<sp/>as</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>source.<sp/>The<sp/>internal<sp/>RC<sp/>oscillator<sp/>is<sp/>the<sp/>source<sp/>of<sp/>the<sp/>high<sp/>frequency</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>clock,<sp/>but<sp/>may<sp/>not<sp/>be<sp/>accurate<sp/>enough<sp/>for<sp/>certain<sp/>applications.<sp/>If<sp/>very</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>high-accuracy<sp/>outputs<sp/>are<sp/>needed,<sp/>the<sp/>application<sp/>should<sp/>request<sp/>using</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>external<sp/>HF<sp/>crystal:</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/Power.h&gt;</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/power/PowerCC26XX.h&gt;</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>Power_setDependency(PowerCC26XX_XOSC_HF);</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Limitations<sp/>#</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>The<sp/>PWM<sp/>output<sp/>can<sp/>currently<sp/>not<sp/>be<sp/>synchronized<sp/>with<sp/>other<sp/>PWM<sp/>outputs</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>The<sp/>PWM<sp/>driver<sp/>does<sp/>not<sp/>support<sp/>updating<sp/>duty<sp/>and<sp/>period<sp/>using<sp/>DMA.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Changes<sp/>to<sp/>the<sp/>timer<sp/>period<sp/>are<sp/>applied<sp/>immediately,<sp/>which<sp/>can<sp/>cause</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>pulses<sp/>to<sp/>be<sp/>too<sp/>long<sp/>or<sp/>short<sp/>unless<sp/>period<sp/>changes<sp/>are<sp/>applied<sp/>close</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>to<sp/>a<sp/>timeout.<sp/>Does<sp/>not<sp/>apply<sp/>to<sp/>duty<sp/>cycle,<sp/>which<sp/>is<sp/>applied<sp/>on<sp/>timeout.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>PWM<sp/>usage<sp/>#</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Basic<sp/>PWM<sp/>output<sp/>##</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>below<sp/>example<sp/>will<sp/>output<sp/>a<sp/>8MHz<sp/>PWM<sp/>signal<sp/>with<sp/>50%<sp/>duty<sp/>cycle.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/>PWM_Handle<sp/>pwmHandle;</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>PWM_Params<sp/>params;</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>PWM_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>params.idleLevel<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_IDLE_LOW;</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>params.periodUnits<sp/><sp/><sp/><sp/>=<sp/>PWM_PERIOD_HZ;</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>params.periodValue<sp/><sp/><sp/><sp/>=<sp/>8e6;</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>params.dutyUnits<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_DUTY_FRACTION;</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>params.dutyValue<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_DUTY_FRACTION_MAX<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>pwmHandle<sp/>=<sp/>PWM_open(CONFIG_PWM0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>if(pwmHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Log_error0(&quot;Failed<sp/>to<sp/>open<sp/>PWM&quot;);</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Task_exit();</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>PWM_start(pwmHandle);</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*******************************************************************************</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_pwm__PWMTimerCC26XX_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_pwm__PWMTimerCC26XX_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_p_w_m_8h" kindref="compound">ti/drivers/PWM.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_g_p_timer_c_c26_x_x_8h" kindref="compound">ti/drivers/timer/GPTimerCC26XX.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="_p_w_m_timer_c_c26_x_x_8h_1af011898e1f39f5c46e5bee16da53f893" refkind="member"><highlight class="preprocessor">#define<sp/>PWMTimerCC26XX_CMD_DEBUG_STALL<sp/>PWM_CMD_RESERVED<sp/>+<sp/>0<sp/></highlight></codeline>
<codeline lineno="154" refid="_p_w_m_timer_c_c26_x_x_8h_1a89d7c2f8674a7adb6d904b9cfb94c509" refkind="member"><highlight class="preprocessor">#define<sp/>CMD_ARG_DEBUG_STALL_OFF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)<sp/>GPTimerCC26XX_DEBUG_STALL_OFF<sp/></highlight></codeline>
<codeline lineno="155" refid="_p_w_m_timer_c_c26_x_x_8h_1a922b8318640c67c3c20a4e991e9b486d" refkind="member"><highlight class="preprocessor">#define<sp/>CMD_ARG_DEBUG_STALL_ON<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)<sp/>GPTimerCC26XX_DEBUG_STALL_ON<sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/><sp/>@}<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PWM<sp/>function<sp/>table<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_p_w_m___fxn_table" kindref="compound">PWM_FxnTable</ref><sp/><ref refid="_p_w_m_timer_c_c26_x_x_8h_1af4a829750f9974fb6944f7d17fc7512d" kindref="member">PWMTimerCC26XX_fxnTable</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="struct_p_w_m_timer_c_c26_x_x___hw_attrs" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_w_m_timer_c_c26_x_x___hw_attrs" kindref="compound">PWMTimerCC26XX_HwAttrs</ref></highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171" refid="struct_p_w_m_timer_c_c26_x_x___hw_attrs_1a0d95dc4336982b94db36f665cc78824c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_p_w_m_timer_c_c26_x_x___hw_attrs_1a0d95dc4336982b94db36f665cc78824c" kindref="member">pwmPin</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172" refid="struct_p_w_m_timer_c_c26_x_x___hw_attrs_1a82c34a1970bf960c04b72f28ecebe1c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_p_w_m_timer_c_c26_x_x___hw_attrs_1a82c34a1970bf960c04b72f28ecebe1c8" kindref="member">gpTimerUnit</ref>;<sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal">}<sp/><ref refid="_p_w_m_timer_c_c26_x_x_8h_1a5d7ba49f8ef49f03deac6494bd0fc18e" kindref="member">PWMTimerCC26XX_HwAttrs</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="struct_p_w_m_timer_c_c26_x_x___object" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_w_m_timer_c_c26_x_x___object" kindref="compound">PWMTimerCC26XX_Object</ref></highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186" refid="struct_p_w_m_timer_c_c26_x_x___object_1a441df1ad70adabb3de769358d301416c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_p_w_m_timer_c_c26_x_x___object_1a441df1ad70adabb3de769358d301416c" kindref="member">isOpen</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187" refid="struct_p_w_m_timer_c_c26_x_x___object_1ab3d97daf91d574c8e6d495a5d0229c4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_p_w_m_timer_c_c26_x_x___object_1ab3d97daf91d574c8e6d495a5d0229c4f" kindref="member">isRunning</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="188" refid="struct_p_w_m_timer_c_c26_x_x___object_1aa844c8a863f84a9775dbabb0241b41fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a11aa442e82549992c98729216d64fd63" kindref="member">PWM_Period_Units</ref><sp/><ref refid="struct_p_w_m_timer_c_c26_x_x___object_1aa844c8a863f84a9775dbabb0241b41fd" kindref="member">periodUnit</ref>;<sp/></highlight></codeline>
<codeline lineno="189" refid="struct_p_w_m_timer_c_c26_x_x___object_1ad725c417ec82ce43ae3d37d7c6fbb204" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_p_w_m_timer_c_c26_x_x___object_1ad725c417ec82ce43ae3d37d7c6fbb204" kindref="member">periodValue</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190" refid="struct_p_w_m_timer_c_c26_x_x___object_1ae502cdc25152927e72670c6d89d26fa9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_p_w_m_timer_c_c26_x_x___object_1ae502cdc25152927e72670c6d89d26fa9" kindref="member">periodCounts</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="191" refid="struct_p_w_m_timer_c_c26_x_x___object_1aa1dc95a5203db4aa57210b66d75827fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1abc7bc5565f2767cf9f06c1572044a8ee" kindref="member">PWM_Duty_Units</ref><sp/><ref refid="struct_p_w_m_timer_c_c26_x_x___object_1aa1dc95a5203db4aa57210b66d75827fe" kindref="member">dutyUnit</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="192" refid="struct_p_w_m_timer_c_c26_x_x___object_1ab32ceff831d4f1c28fea0dcd51694c60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_p_w_m_timer_c_c26_x_x___object_1ab32ceff831d4f1c28fea0dcd51694c60" kindref="member">dutyValue</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193" refid="struct_p_w_m_timer_c_c26_x_x___object_1a212dc0c3c4ae31c8bc285add11ee31a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_p_w_m_timer_c_c26_x_x___object_1a212dc0c3c4ae31c8bc285add11ee31a8" kindref="member">dutyCounts</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="194" refid="struct_p_w_m_timer_c_c26_x_x___object_1ad185ce1a42838b87b520ba3ca066ccc1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a5a40c7014745d15b0c1a604dae5593f9" kindref="member">PWM_IdleLevel</ref><sp/><ref refid="struct_p_w_m_timer_c_c26_x_x___object_1ad185ce1a42838b87b520ba3ca066ccc1" kindref="member">idleLevel</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195" refid="struct_p_w_m_timer_c_c26_x_x___object_1a8ccd272d60d7cae93d6ab39d50b3a175" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_g_p_timer_c_c26_x_x___config" kindref="compound">GPTimerCC26XX_Handle</ref><sp/><ref refid="struct_p_w_m_timer_c_c26_x_x___object_1a8ccd272d60d7cae93d6ab39d50b3a175" kindref="member">hTimer</ref>;<sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal">}<sp/><ref refid="_p_w_m_timer_c_c26_x_x_8h_1a655ae995c6140ecdc5e97abf2f89c8ab" kindref="member">PWMTimerCC26XX_Object</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_driver_pwm_PWMTimerCC26XX_include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/pwm/PWMTimerCC26XX.h"/>
  </compounddef>
</doxygen>
