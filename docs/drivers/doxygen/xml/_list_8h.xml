<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_list_8h" kind="file" language="C++">
    <compoundname>List.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includedby refid="_i2_s_8h" local="no">I2S.h</includedby>
    <includedby refid="_power_8h" local="no">Power.h</includedby>
    <includedby refid="_temperature_8h" local="no">Temperature.h</includedby>
    <includedby refid="_secure_callback_8h" local="no">SecureCallback.h</includedby>
    <incdepgraph>
      <node id="1024">
        <label>stdbool.h</label>
      </node>
      <node id="1023">
        <label>stdint.h</label>
      </node>
      <node id="1025">
        <label>stddef.h</label>
      </node>
      <node id="1022">
        <label>List.h</label>
        <link refid="_list_8h"/>
        <childnode refid="1023" relation="include">
        </childnode>
        <childnode refid="1024" relation="include">
        </childnode>
        <childnode refid="1025" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1030">
        <label>ADCCC26XX.h</label>
        <link refid="_a_d_c_c_c26_x_x_8h"/>
      </node>
      <node id="1052">
        <label>TimerCC26XX.h</label>
        <link refid="_timer_c_c26_x_x_8h"/>
      </node>
      <node id="1042">
        <label>UART2CC26X2.h</label>
        <link refid="_u_a_r_t2_c_c26_x2_8h"/>
      </node>
      <node id="1037">
        <label>AESGCMCC26XX.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x_x_8h"/>
      </node>
      <node id="1036">
        <label>AESGCMCC26X4.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x4_8h"/>
      </node>
      <node id="1063">
        <label>AESCTRCC26X4_s.h</label>
        <link refid="_a_e_s_c_t_r_c_c26_x4__s_8h"/>
      </node>
      <node id="1069">
        <label>TRNGCC26X4_s.h</label>
        <link refid="_t_r_n_g_c_c26_x4__s_8h"/>
        <childnode refid="1070" relation="include">
        </childnode>
      </node>
      <node id="1049">
        <label>PowerCC26X2.h</label>
        <link refid="_power_c_c26_x2_8h"/>
        <childnode refid="1031" relation="include">
        </childnode>
      </node>
      <node id="1039">
        <label>UDMACC26XX.h</label>
        <link refid="_u_d_m_a_c_c26_x_x_8h"/>
        <childnode refid="1031" relation="include">
        </childnode>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1041" relation="include">
        </childnode>
        <childnode refid="1042" relation="include">
        </childnode>
      </node>
      <node id="1068">
        <label>SHA2CC26X4_s.h</label>
        <link refid="_s_h_a2_c_c26_x4__s_8h"/>
      </node>
      <node id="1062">
        <label>AESCMACCC26X4_s.h</label>
        <link refid="_a_e_s_c_m_a_c_c_c26_x4__s_8h"/>
      </node>
      <node id="1034">
        <label>AESCCMCC26XX.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x_x_8h"/>
      </node>
      <node id="1066">
        <label>ECDHCC26X4_s.h</label>
        <link refid="_e_c_d_h_c_c26_x4__s_8h"/>
      </node>
      <node id="1051">
        <label>Timer.h</label>
        <link refid="_timer_8h"/>
        <childnode refid="1052" relation="include">
        </childnode>
        <childnode refid="1053" relation="include">
        </childnode>
      </node>
      <node id="1038">
        <label>DACCC26X2.h</label>
        <link refid="_d_a_c_c_c26_x2_8h"/>
      </node>
      <node id="1035">
        <label>AESECBCC26XX.h</label>
        <link refid="_a_e_s_e_c_b_c_c26_x_x_8h"/>
      </node>
      <node id="1033">
        <label>AESCCMCC26X4.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x4_8h"/>
      </node>
      <node id="1040">
        <label>SPICC26X2DMA.h</label>
        <link refid="_s_p_i_c_c26_x2_d_m_a_8h"/>
      </node>
      <node id="1067">
        <label>ECDSACC26X4_s.h</label>
        <link refid="_e_c_d_s_a_c_c26_x4__s_8h"/>
      </node>
      <node id="1048">
        <label>PDMCC26XX_util.h</label>
        <link refid="_p_d_m_c_c26_x_x__util_8h"/>
      </node>
      <node id="1070">
        <label>TRNGCC26X4_ns.h</label>
        <link refid="_t_r_n_g_c_c26_x4__ns_8h"/>
      </node>
      <node id="1058">
        <label>TemperatureCC26X2.h</label>
        <link refid="_temperature_c_c26_x2_8h"/>
      </node>
      <node id="1044">
        <label>ECDSACC26X2.h</label>
        <link refid="_e_c_d_s_a_c_c26_x2_8h"/>
      </node>
      <node id="1054">
        <label>TRNGCC26XX.h</label>
        <link refid="_t_r_n_g_c_c26_x_x_8h"/>
        <childnode refid="1055" relation="include">
        </childnode>
        <childnode refid="1044" relation="include">
        </childnode>
        <childnode refid="1056" relation="include">
        </childnode>
      </node>
      <node id="1028">
        <label>I2SCC26XX.h</label>
        <link refid="_i2_s_c_c26_x_x_8h"/>
      </node>
      <node id="1027">
        <label>I2S.h</label>
        <link refid="_i2_s_8h"/>
        <childnode refid="1028" relation="include">
        </childnode>
      </node>
      <node id="1031">
        <label>ADCBufCC26X2.h</label>
        <link refid="_a_d_c_buf_c_c26_x2_8h"/>
      </node>
      <node id="1043">
        <label>ECDHCC26X2.h</label>
        <link refid="_e_c_d_h_c_c26_x2_8h"/>
      </node>
      <node id="1046">
        <label>I2CCC26XX.h</label>
        <link refid="_i2_c_c_c26_x_x_8h"/>
      </node>
      <node id="1059">
        <label>SecureCallback.h</label>
        <link refid="_secure_callback_8h"/>
        <childnode refid="1060" relation="include">
        </childnode>
        <childnode refid="1061" relation="include">
        </childnode>
        <childnode refid="1062" relation="include">
        </childnode>
        <childnode refid="1063" relation="include">
        </childnode>
        <childnode refid="1064" relation="include">
        </childnode>
        <childnode refid="1065" relation="include">
        </childnode>
        <childnode refid="1066" relation="include">
        </childnode>
        <childnode refid="1067" relation="include">
        </childnode>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1069" relation="include">
        </childnode>
      </node>
      <node id="1045">
        <label>ECJPAKECC26X2.h</label>
        <link refid="_e_c_j_p_a_k_e_c_c26_x2_8h"/>
      </node>
      <node id="1064">
        <label>AESECBCC26X4_s.h</label>
        <link refid="_a_e_s_e_c_b_c_c26_x4__s_8h"/>
      </node>
      <node id="1061">
        <label>AESCCMCC26X4_s.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x4__s_8h"/>
      </node>
      <node id="1032">
        <label>ADCBufCC26XX.h</label>
        <link refid="_a_d_c_buf_c_c26_x_x_8h"/>
      </node>
      <node id="1029">
        <label>Power.h</label>
        <link refid="_power_8h"/>
        <childnode refid="1030" relation="include">
        </childnode>
        <childnode refid="1031" relation="include">
        </childnode>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1033" relation="include">
        </childnode>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
        <childnode refid="1036" relation="include">
        </childnode>
        <childnode refid="1037" relation="include">
        </childnode>
        <childnode refid="1038" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
        <childnode refid="1043" relation="include">
        </childnode>
        <childnode refid="1044" relation="include">
        </childnode>
        <childnode refid="1045" relation="include">
        </childnode>
        <childnode refid="1046" relation="include">
        </childnode>
        <childnode refid="1028" relation="include">
        </childnode>
        <childnode refid="1047" relation="include">
        </childnode>
        <childnode refid="1048" relation="include">
        </childnode>
        <childnode refid="1049" relation="include">
        </childnode>
        <childnode refid="1050" relation="include">
        </childnode>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1041" relation="include">
        </childnode>
        <childnode refid="1051" relation="include">
        </childnode>
        <childnode refid="1054" relation="include">
        </childnode>
      </node>
      <node id="1060">
        <label>AESCBCCC26X4_s.h</label>
        <link refid="_a_e_s_c_b_c_c_c26_x4__s_8h"/>
      </node>
      <node id="1041">
        <label>SPICC26X4DMA.h</label>
        <link refid="_s_p_i_c_c26_x4_d_m_a_8h"/>
      </node>
      <node id="1056">
        <label>RNGCC26XX.h</label>
        <link refid="_r_n_g_c_c26_x_x_8h"/>
      </node>
      <node id="1026">
        <label>List.h</label>
        <link refid="_list_8h"/>
        <childnode refid="1027" relation="include">
        </childnode>
        <childnode refid="1029" relation="include">
        </childnode>
        <childnode refid="1057" relation="include">
        </childnode>
        <childnode refid="1059" relation="include">
        </childnode>
      </node>
      <node id="1055">
        <label>ECDSACC26X1.h</label>
        <link refid="_e_c_d_s_a_c_c26_x1_8h"/>
      </node>
      <node id="1050">
        <label>PowerCC26XX.h</label>
        <link refid="_power_c_c26_x_x_8h"/>
        <childnode refid="1030" relation="include">
        </childnode>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1038" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
        <childnode refid="1047" relation="include">
        </childnode>
        <childnode refid="1048" relation="include">
        </childnode>
        <childnode refid="1049" relation="include">
        </childnode>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1041" relation="include">
        </childnode>
      </node>
      <node id="1057">
        <label>Temperature.h</label>
        <link refid="_temperature_8h"/>
        <childnode refid="1049" relation="include">
        </childnode>
        <childnode refid="1058" relation="include">
        </childnode>
      </node>
      <node id="1065">
        <label>AESGCMCC26X4_s.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x4__s_8h"/>
      </node>
      <node id="1053">
        <label>TimerSupport.h</label>
        <link refid="_timer_support_8h"/>
      </node>
      <node id="1047">
        <label>PDMCC26XX.h</label>
        <link refid="_p_d_m_c_c26_x_x_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_list___elem__" prot="public">List_Elem_</innerclass>
    <innerclass refid="struct_list___list" prot="public">List_List</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" prot="public" static="no">
        <type>struct <ref refid="struct_list___elem__" kindref="compound">List_Elem_</ref></type>
        <definition>typedef struct List_Elem_  List_Elem</definition>
        <argsstring></argsstring>
        <name>List_Elem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/List.h" line="130" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_list_8h_1a32d4e53da70142cec310cfa0006f146a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void List_clearList</definition>
        <argsstring>(List_List *list)</argsstring>
        <name>List_clearList</name>
        <param>
          <type><ref refid="struct_list___list" kindref="compound">List_List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Function to initialize the contents of a <ref refid="struct_list___list" kindref="compound">List_List</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="struct_list___list" kindref="compound">List_List</ref> structure that will be used to maintain a linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/List.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_list_8h_1ae60fe07328af331a850bd6bb25ecafee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool List_empty</definition>
        <argsstring>(List_List *list)</argsstring>
        <name>List_empty</name>
        <param>
          <type><ref refid="struct_list___list" kindref="compound">List_List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Function to test whether a linked list is empty. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a linked list</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if empty, false if not empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/List.h" line="153" column="1" bodyfile="source/ti/drivers/utils/List.h" bodystart="153" bodyend="156"/>
        <references refid="struct_list___list_1ac6fe915aed884adffb39b7c5538b4b37" compoundref="_list_8h" startline="134">List_List::head</references>
        <references refid="_list_8h_1ac8c9babb4481314e3f0cce444f7fbade">List_get</references>
      </memberdef>
      <memberdef kind="function" id="_list_8h_1ac8c9babb4481314e3f0cce444f7fbade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref> *</type>
        <definition>List_Elem* List_get</definition>
        <argsstring>(List_List *list)</argsstring>
        <name>List_get</name>
        <param>
          <type><ref refid="struct_list___list" kindref="compound">List_List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Function to atomically get the first elem in a linked list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a linked list</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer the first elem in the linked list or NULL if empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/List.h" line="165" column="1"/>
        <referencedby refid="_list_8h_1ae60fe07328af331a850bd6bb25ecafee" compoundref="_list_8h" startline="153" endline="156">List_empty</referencedby>
      </memberdef>
      <memberdef kind="function" id="_list_8h_1a7eeb8ffe91673aa56fdd1c552c6435b6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref> *</type>
        <definition>static List_Elem* List_head</definition>
        <argsstring>(List_List *list)</argsstring>
        <name>List_head</name>
        <param>
          <type><ref refid="struct_list___list" kindref="compound">List_List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Function to return the head of a linked list. </para>        </briefdescription>
        <detaileddescription>
<para>This function does not remove the head, it simply returns a pointer to it. This function is typically used when traversing a linked list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the linked list</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the first elem in the linked list or NULL if empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/List.h" line="177" column="1" bodyfile="source/ti/drivers/utils/List.h" bodystart="177" bodyend="180"/>
        <references refid="struct_list___list_1ac6fe915aed884adffb39b7c5538b4b37" compoundref="_list_8h" startline="134">List_List::head</references>
        <references refid="_list_8h_1a0725acc51893e377f5ee9225dd6fcd26">List_insert</references>
      </memberdef>
      <memberdef kind="function" id="_list_8h_1a0725acc51893e377f5ee9225dd6fcd26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void List_insert</definition>
        <argsstring>(List_List *list, List_Elem *newElem, List_Elem *curElem)</argsstring>
        <name>List_insert</name>
        <param>
          <type><ref refid="struct_list___list" kindref="compound">List_List</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref> *</type>
          <declname>newElem</declname>
        </param>
        <param>
          <type><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref> *</type>
          <declname>curElem</declname>
        </param>
        <briefdescription>
<para>Function to insert an elem into a linked list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the linked list</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newElem</parametername>
</parameternamelist>
<parameterdescription>
<para>New elem to insert</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curElem</parametername>
</parameternamelist>
<parameterdescription>
<para>Elem to insert the newElem in front of. This value cannot be NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/List.h" line="192" column="1"/>
        <referencedby refid="_list_8h_1a7eeb8ffe91673aa56fdd1c552c6435b6" compoundref="_list_8h" startline="177" endline="180">List_head</referencedby>
      </memberdef>
      <memberdef kind="function" id="_list_8h_1a1683e4f9d2462f12dd60d0f810075ab5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref> *</type>
        <definition>static List_Elem* List_next</definition>
        <argsstring>(List_Elem *elem)</argsstring>
        <name>List_next</name>
        <param>
          <type><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref> *</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Function to return the next elem in a linked list. </para>        </briefdescription>
        <detaileddescription>
<para>This function does not remove the elem, it simply returns a pointer to next one. This function is typically used when traversing a linked list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Elem in the list</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the next elem in linked list or NULL if at the end </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/List.h" line="204" column="1" bodyfile="source/ti/drivers/utils/List.h" bodystart="204" bodyend="207"/>
        <references refid="struct_list___elem___1a3472db6d50d5191700bdf1670fdef9c5" compoundref="_list_8h" startline="128">List_Elem_::next</references>
      </memberdef>
      <memberdef kind="function" id="_list_8h_1af0834d0f68b1adcf8c1d4f2fb10276fc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref> *</type>
        <definition>static List_Elem* List_prev</definition>
        <argsstring>(List_Elem *elem)</argsstring>
        <name>List_prev</name>
        <param>
          <type><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref> *</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Function to return the prev elem in a linked list. </para>        </briefdescription>
        <detaileddescription>
<para>This function does not remove the elem, it simply returns a pointer to prev one. This function is typically used when traversing a linked list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Elem in the list</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the prev elem in linked list or NULL if at the beginning </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/List.h" line="219" column="1" bodyfile="source/ti/drivers/utils/List.h" bodystart="219" bodyend="222"/>
        <references refid="_list_8h_1a1608b5d7dc712fcf01dc5d837e22078a">List_put</references>
        <references refid="_list_8h_1a1194d8eead79730c5da10e36b60f7044">List_putHead</references>
        <references refid="_list_8h_1a480146af207e00199372c66edb4d9960">List_remove</references>
        <references refid="struct_list___elem___1ae18320a0fdbf1d4044518fde458c0c3e" compoundref="_list_8h" startline="129">List_Elem_::prev</references>
      </memberdef>
      <memberdef kind="function" id="_list_8h_1a1608b5d7dc712fcf01dc5d837e22078a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void List_put</definition>
        <argsstring>(List_List *list, List_Elem *elem)</argsstring>
        <name>List_put</name>
        <param>
          <type><ref refid="struct_list___list" kindref="compound">List_List</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref> *</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Function to atomically put an elem onto the end of a linked list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the linked list</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to place onto the end of the linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/List.h" line="231" column="1"/>
        <referencedby refid="_list_8h_1af0834d0f68b1adcf8c1d4f2fb10276fc" compoundref="_list_8h" startline="219" endline="222">List_prev</referencedby>
      </memberdef>
      <memberdef kind="function" id="_list_8h_1a1194d8eead79730c5da10e36b60f7044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void List_putHead</definition>
        <argsstring>(List_List *list, List_Elem *elem)</argsstring>
        <name>List_putHead</name>
        <param>
          <type><ref refid="struct_list___list" kindref="compound">List_List</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref> *</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Function to atomically put an elem onto the head of a linked list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the linked list</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to place onto the beginning of the linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/List.h" line="240" column="1"/>
        <referencedby refid="_list_8h_1af0834d0f68b1adcf8c1d4f2fb10276fc" compoundref="_list_8h" startline="219" endline="222">List_prev</referencedby>
      </memberdef>
      <memberdef kind="function" id="_list_8h_1a480146af207e00199372c66edb4d9960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void List_remove</definition>
        <argsstring>(List_List *list, List_Elem *elem)</argsstring>
        <name>List_remove</name>
        <param>
          <type><ref refid="struct_list___list" kindref="compound">List_List</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref> *</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Function to remove an elem from a linked list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the linked list</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>Element to be removed from a linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/List.h" line="249" column="1"/>
        <referencedby refid="_list_8h_1af0834d0f68b1adcf8c1d4f2fb10276fc" compoundref="_list_8h" startline="219" endline="222">List_prev</referencedby>
      </memberdef>
      <memberdef kind="function" id="_list_8h_1a04432014c20d52c680076e3613aa68da" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref> *</type>
        <definition>static List_Elem* List_tail</definition>
        <argsstring>(List_List *list)</argsstring>
        <name>List_tail</name>
        <param>
          <type><ref refid="struct_list___list" kindref="compound">List_List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Function to return the tail of a linked list. </para>        </briefdescription>
        <detaileddescription>
<para>This function does not remove the tail, it simply returns a pointer to it. This function is typically used when traversing a linked list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the linked list</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the last elem in the linked list or NULL if empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/utils/List.h" line="261" column="1" bodyfile="source/ti/drivers/utils/List.h" bodystart="261" bodyend="264"/>
        <references refid="struct_list___list_1aaa078249706663590a38d168b115171e" compoundref="_list_8h" startline="135">List_List::tail</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Linked List interface for use in drivers. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para>This module provides simple doubly-link list implementation. There are two main structures:<itemizedlist>
<listitem><para><ref refid="struct_list___list" kindref="compound">List_List</ref>: The structure that holds the start of a linked list. There is no API to create one. It is up to the driver to provide the structure itself.</para></listitem><listitem><para><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref>: The structure that must be in the structure that is placed onto a linked list. Generally it is the first field in the structure. For example: <programlisting><codeline><highlight class="normal">typedef<sp/>struct<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_Elem<sp/>elem;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>*buffer;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>MyStruct;</highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para>The following shows how to create a linked list with three elements.</para><para><programlisting><codeline><highlight class="normal">+<sp/>denotes<sp/>null-terminated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_______<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_______<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_______<sp/><sp/><sp/><sp/><sp/><sp/>_______</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|_______|-----&gt;|_______|-----&gt;|_______|---&gt;|_______|--//---,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>,----|_______|<sp/><sp/><sp/><sp/>,-|_______|&lt;-----|_______|&lt;---|_______|&lt;-//-,<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>List<sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><sp/><sp/>elem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elem<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>|_____________________________________________________________|</highlight></codeline>
</programlisting></para><para>The APIs <ref refid="_list_8h_1ac8c9babb4481314e3f0cce444f7fbade" kindref="member">List_get</ref>, <ref refid="_list_8h_1a1608b5d7dc712fcf01dc5d837e22078a" kindref="member">List_put</ref>, and <ref refid="_list_8h_1a1194d8eead79730c5da10e36b60f7044" kindref="member">List_putHead</ref> are atomic. The other APIs are not necessarily atomic. In other words, when traversing a linked list, it is up to the application to provide thread-safety (e.g. HwiP_disable/restore or MutexP_pend/post).</para><para>Initializing and adding an element to the tail and removing it <programlisting><codeline><highlight class="normal">typedef<sp/>struct<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_Elem<sp/>elem;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>*buffer;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>MyStruct;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">List_List<sp/>list;</highlight></codeline>
<codeline><highlight class="normal">MyStruct<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal">MyStruct<sp/>*bar;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">List_clearList(&amp;list);</highlight></codeline>
<codeline><highlight class="normal">List_put(&amp;list,<sp/>(List_Elem<sp/>*)&amp;foo);</highlight></codeline>
<codeline><highlight class="normal">bar<sp/>=<sp/>(MyStruct<sp/>*)List_get(&amp;list);</highlight></codeline>
</programlisting></para><para>The <ref refid="_list_8h_1a1608b5d7dc712fcf01dc5d837e22078a" kindref="member">List_put</ref> and <ref refid="_list_8h_1ac8c9babb4481314e3f0cce444f7fbade" kindref="member">List_get</ref> APIs are used to maintain a first-in first-out (FIFO) linked list.</para><para>The <ref refid="_list_8h_1a1194d8eead79730c5da10e36b60f7044" kindref="member">List_putHead</ref> and <ref refid="_list_8h_1ac8c9babb4481314e3f0cce444f7fbade" kindref="member">List_get</ref> APIs are used to maintain a last-in first-out (LIFO) linked list.</para><para>Traversing a list from head to tail. Note: thread-safety calls are not shown here. <programlisting><codeline><highlight class="normal">List_List<sp/>list;</highlight></codeline>
<codeline><highlight class="normal">List_Elem<sp/>*temp;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">for<sp/>(temp<sp/>=<sp/>List_head(&amp;list);<sp/>temp<sp/>!=<sp/>NULL;<sp/>temp<sp/>=<sp/>List_next(temp))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>printf(&quot;address<sp/>=<sp/>0x%x\n&quot;,<sp/>temp);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Traversing a list from tail to head. Note: thread-safety calls are not shown here. <programlisting><codeline><highlight class="normal">List_List<sp/>list;</highlight></codeline>
<codeline><highlight class="normal">List_Elem<sp/>*temp;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">for<sp/>(temp<sp/>=<sp/>List_tail(&amp;list);<sp/>temp<sp/>!=<sp/>NULL;<sp/>temp<sp/>=<sp/>List_prev(temp))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>printf(&quot;address<sp/>=<sp/>0x%x\n&quot;,<sp/>temp);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_utils_List__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_utils_List__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="struct_list___elem__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_list___elem__" kindref="compound">List_Elem_</ref></highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128" refid="struct_list___elem___1a3472db6d50d5191700bdf1670fdef9c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_list___elem__" kindref="compound">List_Elem_</ref><sp/>*<ref refid="struct_list___elem___1a3472db6d50d5191700bdf1670fdef9c5" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="129" refid="struct_list___elem___1ae18320a0fdbf1d4044518fde458c0c3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_list___elem__" kindref="compound">List_Elem_</ref><sp/>*<ref refid="struct_list___elem___1ae18320a0fdbf1d4044518fde458c0c3e" kindref="member">prev</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}<sp/><ref refid="_list_8h_1aec4cbba21ef101a3efe07001550f9ebd" kindref="member">List_Elem</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="struct_list___list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134" refid="struct_list___list_1ac6fe915aed884adffb39b7c5538b4b37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*<ref refid="struct_list___list_1ac6fe915aed884adffb39b7c5538b4b37" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="135" refid="struct_list___list_1aaa078249706663590a38d168b115171e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*<ref refid="struct_list___list_1aaa078249706663590a38d168b115171e" kindref="member">tail</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}<sp/><ref refid="struct_list___list" kindref="compound">List_List</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_list_8h_1a32d4e53da70142cec310cfa0006f146a" kindref="member">List_clearList</ref>(<ref refid="struct_list___list" kindref="compound">List_List</ref><sp/>*list);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="_list_8h_1ae60fe07328af331a850bd6bb25ecafee" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_list_8h_1ae60fe07328af331a850bd6bb25ecafee" kindref="member">List_empty</ref>(<ref refid="struct_list___list" kindref="compound">List_List</ref><sp/>*list)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(list-&gt;<ref refid="struct_list___list_1ac6fe915aed884adffb39b7c5538b4b37" kindref="member">head</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*<ref refid="_list_8h_1ac8c9babb4481314e3f0cce444f7fbade" kindref="member">List_get</ref>(<ref refid="struct_list___list" kindref="compound">List_List</ref><sp/>*list);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="_list_8h_1a7eeb8ffe91673aa56fdd1c552c6435b6" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*<ref refid="_list_8h_1a7eeb8ffe91673aa56fdd1c552c6435b6" kindref="member">List_head</ref>(<ref refid="struct_list___list" kindref="compound">List_List</ref><sp/>*list)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(list-&gt;<ref refid="struct_list___list_1ac6fe915aed884adffb39b7c5538b4b37" kindref="member">head</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_list_8h_1a0725acc51893e377f5ee9225dd6fcd26" kindref="member">List_insert</ref>(<ref refid="struct_list___list" kindref="compound">List_List</ref><sp/>*list,<sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*newElem,<sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*curElem);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="_list_8h_1a1683e4f9d2462f12dd60d0f810075ab5" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*<ref refid="_list_8h_1a1683e4f9d2462f12dd60d0f810075ab5" kindref="member">List_next</ref>(<ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*elem)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(elem-&gt;<ref refid="struct_list___elem___1a3472db6d50d5191700bdf1670fdef9c5" kindref="member">next</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="_list_8h_1af0834d0f68b1adcf8c1d4f2fb10276fc" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*<ref refid="_list_8h_1af0834d0f68b1adcf8c1d4f2fb10276fc" kindref="member">List_prev</ref>(<ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*elem)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(elem-&gt;<ref refid="struct_list___elem___1ae18320a0fdbf1d4044518fde458c0c3e" kindref="member">prev</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_list_8h_1a1608b5d7dc712fcf01dc5d837e22078a" kindref="member">List_put</ref>(<ref refid="struct_list___list" kindref="compound">List_List</ref><sp/>*list,<sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*elem);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_list_8h_1a1194d8eead79730c5da10e36b60f7044" kindref="member">List_putHead</ref>(<ref refid="struct_list___list" kindref="compound">List_List</ref><sp/>*list,<sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*elem);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_list_8h_1a480146af207e00199372c66edb4d9960" kindref="member">List_remove</ref>(<ref refid="struct_list___list" kindref="compound">List_List</ref><sp/>*list,<sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*elem);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="_list_8h_1a04432014c20d52c680076e3613aa68da" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_list___elem__" kindref="compound">List_Elem</ref><sp/>*<ref refid="_list_8h_1a04432014c20d52c680076e3613aa68da" kindref="member">List_tail</ref>(<ref refid="struct_list___list" kindref="compound">List_List</ref><sp/>*list)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(list-&gt;<ref refid="struct_list___list_1aaa078249706663590a38d168b115171e" kindref="member">tail</ref>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_utils_List__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/utils/List.h"/>
  </compounddef>
</doxygen>
