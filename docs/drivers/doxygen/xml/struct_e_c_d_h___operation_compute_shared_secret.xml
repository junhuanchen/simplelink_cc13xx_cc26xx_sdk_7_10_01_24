<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="struct_e_c_d_h___operation_compute_shared_secret" kind="struct" language="C++" prot="public">
    <compoundname>ECDH_OperationComputeSharedSecret</compoundname>
    <includes refid="_e_c_d_h_8h" local="no">ECDH.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_e_c_d_h___operation_compute_shared_secret_1a48ec0ce4a2973bfee8b4a402e3f7c764" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_e_c_c_params___curve_params" kindref="compound">ECCParams_CurveParams</ref> *</type>
        <definition>const ECCParams_CurveParams* ECDH_OperationComputeSharedSecret::curve</definition>
        <argsstring></argsstring>
        <name>curve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the elliptic curve parameters for myPrivateKey. If ECDH_generateKey() was used, this should be the same private key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/ECDH.h" line="610" column="1" bodyfile="source/ti/drivers/ECDH.h" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_d_h___operation_compute_shared_secret_1a52a819338fa7c1fc28af71a7da788295" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>const CryptoKey* ECDH_OperationComputeSharedSecret::myPrivateKey</definition>
        <argsstring></argsstring>
        <name>myPrivateKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the private ECC key which will be used in to compute the shared secret. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/ECDH.h" line="613" column="1" bodyfile="source/ti/drivers/ECDH.h" bodystart="613" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_d_h___operation_compute_shared_secret_1a6540f4e6832e4af2c59e37e1f88a0184" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>const CryptoKey* ECDH_OperationComputeSharedSecret::theirPublicKey</definition>
        <argsstring></argsstring>
        <name>theirPublicKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the public key of the party with whom the shared secret will be generated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/ECDH.h" line="616" column="1" bodyfile="source/ti/drivers/ECDH.h" bodystart="616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_d_h___operation_compute_shared_secret_1a245268db012d1faa33c350c2166a63cf" prot="public" static="no" mutable="no">
        <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
        <definition>CryptoKey* ECDH_OperationComputeSharedSecret::sharedSecret</definition>
        <argsstring></argsstring>
        <name>sharedSecret</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> which has been initialized blank. The shared secret will be placed here. The formatting byte will be filled in by the driver if the keyMaterialEndianness requires it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/ECDH.h" line="619" column="1" bodyfile="source/ti/drivers/ECDH.h" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_e_c_d_h___operation_compute_shared_secret_1a62ac27c77f37045ba0aa040086c66b18" prot="public" static="no" mutable="no">
        <type><ref refid="_e_c_d_h_8h_1a8880579dac7ee8d0f2c3ddf2306ca9fb" kindref="member">ECDH_KeyMaterialEndianness</ref></type>
        <definition>ECDH_KeyMaterialEndianness ECDH_OperationComputeSharedSecret::keyMaterialEndianness</definition>
        <argsstring></argsstring>
        <name>keyMaterialEndianness</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All keyMaterials, including myPrivate, theirPublicKey, and sharedSecret are either in big-endian (default) or little- endian format </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/ECDH.h" line="624" column="1" bodyfile="source/ti/drivers/ECDH.h" bodystart="624" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Struct containing the parameters required to compute the shared secret. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="708">
        <label>CryptoKey</label>
        <link refid="struct_crypto_key"/>
        <childnode refid="709" relation="usage">
          <edgelabel>plaintext</edgelabel>
        </childnode>
        <childnode refid="710" relation="usage">
          <edgelabel>keyStore</edgelabel>
        </childnode>
      </node>
      <node id="707">
        <label>ECCParams_CurveParams</label>
        <link refid="struct_e_c_c_params___curve_params"/>
      </node>
      <node id="709">
        <label>CryptoKey_Plaintext</label>
        <link refid="struct_crypto_key___plaintext"/>
      </node>
      <node id="706">
        <label>ECDH_OperationComputeSharedSecret</label>
        <link refid="struct_e_c_d_h___operation_compute_shared_secret"/>
        <childnode refid="707" relation="usage">
          <edgelabel>curve</edgelabel>
        </childnode>
        <childnode refid="708" relation="usage">
          <edgelabel>theirPublicKey</edgelabel>
          <edgelabel>myPrivateKey</edgelabel>
          <edgelabel>sharedSecret</edgelabel>
        </childnode>
      </node>
      <node id="710">
        <label>CryptoKey_KeyStore</label>
        <link refid="struct_crypto_key___key_store"/>
      </node>
    </collaborationgraph>
    <location file="source/ti/drivers/ECDH.h" line="609" column="1" bodyfile="source/ti/drivers/ECDH.h" bodystart="608" bodyend="628"/>
    <listofallmembers>
      <member refid="struct_e_c_d_h___operation_compute_shared_secret_1a48ec0ce4a2973bfee8b4a402e3f7c764" prot="public" virt="non-virtual"><scope>ECDH_OperationComputeSharedSecret</scope><name>curve</name></member>
      <member refid="struct_e_c_d_h___operation_compute_shared_secret_1a62ac27c77f37045ba0aa040086c66b18" prot="public" virt="non-virtual"><scope>ECDH_OperationComputeSharedSecret</scope><name>keyMaterialEndianness</name></member>
      <member refid="struct_e_c_d_h___operation_compute_shared_secret_1a52a819338fa7c1fc28af71a7da788295" prot="public" virt="non-virtual"><scope>ECDH_OperationComputeSharedSecret</scope><name>myPrivateKey</name></member>
      <member refid="struct_e_c_d_h___operation_compute_shared_secret_1a245268db012d1faa33c350c2166a63cf" prot="public" virt="non-virtual"><scope>ECDH_OperationComputeSharedSecret</scope><name>sharedSecret</name></member>
      <member refid="struct_e_c_d_h___operation_compute_shared_secret_1a6540f4e6832e4af2c59e37e1f88a0184" prot="public" virt="non-virtual"><scope>ECDH_OperationComputeSharedSecret</scope><name>theirPublicKey</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
