<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_a_e_s_c_m_a_c_8h" kind="file" language="C++">
    <compoundname>AESCMAC.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="_a_e_s_common_8h" local="no">ti/drivers/AESCommon.h</includes>
    <includes refid="_crypto_key_8h" local="no">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</includes>
    <includedby refid="_a_e_s_c_m_a_c_c_c26_x4__ns_8h" local="no">AESCMACCC26X4_ns.h</includedby>
    <includedby refid="_a_e_s_c_m_a_c_c_c26_x4__s_8h" local="no">AESCMACCC26X4_s.h</includedby>
    <includedby refid="_a_e_s_c_m_a_c_c_c26_x_x_8h" local="no">AESCMACCC26XX.h</includedby>
    <incdepgraph>
      <node id="181">
        <label>stdbool.h</label>
      </node>
      <node id="184">
        <label>ti/drivers/AESCommon.h</label>
        <link refid="_a_e_s_common_8h"/>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
      </node>
      <node id="183">
        <label>stdint.h</label>
      </node>
      <node id="185">
        <label>ti/drivers/cryptoutils/cryptokey/CryptoKey.h</label>
        <link refid="_crypto_key_8h"/>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
      </node>
      <node id="182">
        <label>stddef.h</label>
      </node>
      <node id="180">
        <label>AESCMAC.h</label>
        <link refid="_a_e_s_c_m_a_c_8h"/>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="188">
        <label>AESCMACCC26X4_s.h</label>
        <link refid="_a_e_s_c_m_a_c_c_c26_x4__s_8h"/>
      </node>
      <node id="187">
        <label>AESCMACCC26X4_ns.h</label>
        <link refid="_a_e_s_c_m_a_c_c_c26_x4__ns_8h"/>
      </node>
      <node id="189">
        <label>AESCMACCC26XX.h</label>
        <link refid="_a_e_s_c_m_a_c_c_c26_x_x_8h"/>
      </node>
      <node id="186">
        <label>AESCMAC.h</label>
        <link refid="_a_e_s_c_m_a_c_8h"/>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_a_e_s_c_m_a_c___operation" prot="public">AESCMAC_Operation</innerclass>
    <innerclass refid="struct_a_e_s_c_m_a_c___params" prot="public">AESCMAC_Params</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_a_e_s_c_m_a_c_8h_1acf6ab0a1d37cacfa3ea286283350be2e" prot="public" static="no">
        <name>AESCMAC_STATUS_RESERVED</name>
        <initializer><ref refid="_a_e_s_common_8h_1a4896831b1a3a4ead39a3c58eb13a05f5" kindref="member">AES_STATUS_RESERVED</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common CMAC status code reservation offset. CMAC driver implementations should offset status codes with <ref refid="_a_e_s_c_m_a_c_8h_1acf6ab0a1d37cacfa3ea286283350be2e" kindref="member">AESCMAC_STATUS_RESERVED</ref> growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>AESCMACXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>AESCMAC_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>AESCMACXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>AESCMAC_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>AESCMACXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>AESCMAC_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="524" column="9" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_m_a_c_8h_1a716cd36c2e310e4753a635f85e8388e0" prot="public" static="no">
        <name>AESCMAC_STATUS_SUCCESS</name>
        <initializer><ref refid="_a_e_s_common_8h_1a40238be3b30c09acbb966b8cf64d8db6" kindref="member">AES_STATUS_SUCCESS</ref></initializer>
        <briefdescription>
<para>Successful status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return <ref refid="_a_e_s_c_m_a_c_8h_1a716cd36c2e310e4753a635f85e8388e0" kindref="member">AESCMAC_STATUS_SUCCESS</ref> if the function was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="532" column="9" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_m_a_c_8h_1a30a1dcf01290f2f160cc6f9ba165d571" prot="public" static="no">
        <name>AESCMAC_STATUS_ERROR</name>
        <initializer><ref refid="_a_e_s_common_8h_1ac6963a06e1923ad116a23c0e1a17dba8" kindref="member">AES_STATUS_ERROR</ref></initializer>
        <briefdescription>
<para>Generic error status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return <ref refid="_a_e_s_c_m_a_c_8h_1a30a1dcf01290f2f160cc6f9ba165d571" kindref="member">AESCMAC_STATUS_ERROR</ref> if the function was not executed successfully and no more pertinent error code could be returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="540" column="9" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_m_a_c_8h_1a4eec841783b4db4109ecb39c393e9978" prot="public" static="no">
        <name>AESCMAC_STATUS_RESOURCE_UNAVAILABLE</name>
        <initializer><ref refid="_a_e_s_common_8h_1a4720c275153144c20096dc2d85f93889" kindref="member">AES_STATUS_RESOURCE_UNAVAILABLE</ref></initializer>
        <briefdescription>
<para>An error status code returned if the hardware or software resource is currently unavailable. </para>        </briefdescription>
        <detaileddescription>
<para>CMAC driver implementations may have hardware or software limitations on how many clients can simultaneously perform operations. This status code is returned if the mutual exclusion mechanism signals that an operation cannot currently be performed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="550" column="9" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_m_a_c_8h_1a46bf60a60cab851889382ecf546c2a52" prot="public" static="no">
        <name>AESCMAC_STATUS_MAC_INVALID</name>
        <initializer><ref refid="_a_e_s_common_8h_1a145da39116c94a54f073894402508d53" kindref="member">AES_STATUS_MAC_INVALID</ref></initializer>
        <briefdescription>
<para>The MAC verification failed. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return <ref refid="_a_e_s_c_m_a_c_8h_1a46bf60a60cab851889382ecf546c2a52" kindref="member">AESCMAC_STATUS_MAC_INVALID</ref> if the MAC computed for the provided (key, message) pair did not match the MAC provided. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="558" column="9" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="558" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_m_a_c_8h_1abc28a0974aa103ed0f24aefbf3a77408" prot="public" static="no">
        <name>AESCMAC_STATUS_CANCELED</name>
        <initializer><ref refid="_a_e_s_common_8h_1aa8d5ff0dd5cde60089ac5d84cfb4a702" kindref="member">AES_STATUS_CANCELED</ref></initializer>
        <briefdescription>
<para>The ongoing operation was canceled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="563" column="9" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_m_a_c_8h_1a7cdb7b6ea1f5485d8f2d1560ae3693aa" prot="public" static="no">
        <name>AESCMAC_STATUS_KEYSTORE_INVALID_ID</name>
        <initializer><ref refid="_a_e_s_common_8h_1aeaab212abda07968840db525e114d1ae" kindref="member">AES_STATUS_KEYSTORE_INVALID_ID</ref></initializer>
        <briefdescription>
<para>The operation tried to load a key from the keystore using an invalid key ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="568" column="9" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_m_a_c_8h_1ab69a463455edb1e59c09e5562491fa60" prot="public" static="no">
        <name>AESCMAC_STATUS_KEYSTORE_GENERIC_ERROR</name>
        <initializer><ref refid="_a_e_s_common_8h_1a89e9ed71ffb10f4f6d5b52b8afbd4389" kindref="member">AES_STATUS_KEYSTORE_GENERIC_ERROR</ref></initializer>
        <briefdescription>
<para>The key store module returned a generic error. See key store documentation for additional details. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="574" column="9" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="574" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_m_a_c_8h_1a5b10301188ba1acfd0881fe2f07641f1" prot="public" static="no">
        <name>AESCMAC_STATUS_UNALIGNED_IO_NOT_SUPPORTED</name>
        <initializer><ref refid="_a_e_s_common_8h_1ab367c0137dd8d9bda4107b1545bfdb12" kindref="member">AES_STATUS_UNALIGNED_IO_NOT_SUPPORTED</ref></initializer>
        <briefdescription>
<para>The operation does not support non-word-aligned input. </para>        </briefdescription>
        <detaileddescription>
<para>AESCMAC driver implementations may have restrictions on the alignment of input data due to performance limitations of the hardware. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="582" column="9" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_m_a_c_8h_1a8c299b832ab317bf55445e5fa5930b1b" prot="public" static="no">
        <name>AESCMAC_OP_CODE_MASK</name>
        <initializer>0x0F /* bits 0-3 */</initializer>
        <briefdescription>
<para>Mask for the operation code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="689" column="9" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_m_a_c_8h_1a073eaba0e9fb2c822065dcf3256b4a9e" prot="public" static="no">
        <name>AESCMAC_OP_FLAG_SIGN</name>
        <initializer>0x10 /* bit 4 */</initializer>
        <briefdescription>
<para>Flag indicating a sign operation. If this bit is not set, then it is a verify operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="705" column="9" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_m_a_c_8h_1a5abf0f9750e2aee67dfcfaf57f9ddfbc" prot="public" static="no">
        <name>AESCMAC_OP_FLAGS_MASK</name>
        <initializer>(<ref refid="_a_e_s_c_m_a_c_8h_1a073eaba0e9fb2c822065dcf3256b4a9e" kindref="member">AESCMAC_OP_FLAG_SIGN</ref> | AESCMAC_OP_FLAG_VERIFY)</initializer>
        <briefdescription>
<para>Mask for all valid operation flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="710" column="9" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="710" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49" prot="public" static="no">
        <name>AESCMAC_ReturnBehavior</name>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a3cf61f12fc25a4733957941c73d3484f" prot="public">
          <name>AESCMAC_RETURN_BEHAVIOR_CALLBACK</name>
          <initializer>= AES_RETURN_BEHAVIOR_CALLBACK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will return immediately while the MAC operation goes on in the background. The registered callback function is called after the operation completes. The context the callback function is called (task, HWI, SWI) is implementation-dependent. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49adeb161ec7470cfac648f9cbbf9c98fa7" prot="public">
          <name>AESCMAC_RETURN_BEHAVIOR_BLOCKING</name>
          <initializer>= AES_RETURN_BEHAVIOR_BLOCKING</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will block while the MAC operation goes on in the background. MAC operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a0deb89354e0bfd2dbe4cd85b872cc49d" prot="public">
          <name>AESCMAC_RETURN_BEHAVIOR_POLLING</name>
          <initializer>= AES_RETURN_BEHAVIOR_POLLING</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will continuously poll a flag while MAC operation goes on in the background. MAC operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The return behavior of AESCMAC functions. </para>        </briefdescription>
        <detaileddescription>
<para>Not all AESCMAC operations exhibit the specified return behavior. Functions that do not require significant computation and cannot offload that computation to a background thread behave like regular functions. Which functions exhibit the specified return behavior is not implementation dependent. Specifically, a software-backed implementation run on the same CPU as the application will emulate the return behavior while not actually offloading the computation to the background thread.</para><para>AESCMAC functions exhibiting the specified return behavior have restrictions on the context from which they may be called.</para><para><table rows="4" cols="4"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Task </para></entry><entry thead="yes"><para>Hwi </para></entry><entry thead="yes"><para>Swi  </para></entry></row>
<row>
<entry thead="no"><para>AESCMAC_RETURN_BEHAVIOR_CALLBACK </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
<row>
<entry thead="no"><para>AESCMAC_RETURN_BEHAVIOR_BLOCKING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>AESCMAC_RETURN_BEHAVIOR_POLLING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="623" column="1" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="622" bodyend="641"/>
      </memberdef>
      <memberdef kind="enum" id="_a_e_s_c_m_a_c_8h_1abaad4def712e02a8451f275575c2771c" prot="public" static="no">
        <name>AESCMAC_OperationalMode</name>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1abaad4def712e02a8451f275575c2771ca47871bfa3fae7ec4879f1b8ed2be82a2" prot="public">
          <name>AESCMAC_OPMODE_CMAC</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CMAC operational mode </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1abaad4def712e02a8451f275575c2771ca96ef3aaada660cb0a90ff538ca46dbd6" prot="public">
          <name>AESCMAC_OPMODE_CBCMAC</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CBC-MAC operational mode </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Defines the operation modes for the AESCMAC driver. </para>        </briefdescription>
        <detaileddescription>
<para>By default, the driver will use CMAC to sign and verify messages. To use CBC-MAC instead of CMAC, set the operationalMode in <ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> accordingly before calling <ref refid="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" kindref="member">AESCMAC_open</ref> or <ref refid="_a_e_s_c_m_a_c_8h_1adb2e43be898013e7704539b35fd1122b" kindref="member">AESCMAC_construct</ref>. The operational mode persists throughout the existance of the driver instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="653" column="1" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="652" bodyend="656"/>
      </memberdef>
      <memberdef kind="enum" id="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64" prot="public" static="no">
        <name>AESCMAC_OperationCode</name>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64a960efb62599541f8c3f3bfe249c52093" prot="public">
          <name>AESCMAC_OP_CODE_ONE_STEP</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64ae5626683d890e6f927a686b5ee857902" prot="public">
          <name>AESCMAC_OP_CODE_SEGMENTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64a9f1a87b2cabf2b9becc191f39a873422" prot="public">
          <name>AESCMAC_OP_CODE_FINALIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for the operation codes supported by the driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="695" column="1" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="694" bodyend="699"/>
      </memberdef>
      <memberdef kind="enum" id="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4" prot="public" static="no">
        <name>AESCMAC_OperationType</name>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a82ef82226f904674817d64bc9e120cf0" prot="public">
          <name>AESCMAC_OP_TYPE_SIGN</name>
          <initializer>= AESCMAC_OP_CODE_ONE_STEP |  0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a5a063beb68806ff44ef3b5b9e900e45d" prot="public">
          <name>AESCMAC_OP_TYPE_VERIFY</name>
          <initializer>= AESCMAC_OP_CODE_ONE_STEP</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a7aef02634ae85a5ecdf32e3549fcd536" prot="public">
          <name>AESCMAC_OP_TYPE_SEGMENTED_SIGN</name>
          <initializer>= AESCMAC_OP_CODE_SEGMENTED |  0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4afe83dda2e22eccebf42823d17047bba8" prot="public">
          <name>AESCMAC_OP_TYPE_SEGMENTED_VERIFY</name>
          <initializer>= AESCMAC_OP_CODE_SEGMENTED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a467760efa59a29c7aedb4006ad5df30b" prot="public">
          <name>AESCMAC_OP_TYPE_FINALIZE_SIGN</name>
          <initializer>= AESCMAC_OP_CODE_FINALIZE |  0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a2ed5f5574a90dc9ab7928d617e7fbe37" prot="public">
          <name>AESCMAC_OP_TYPE_FINALIZE_VERIFY</name>
          <initializer>= AESCMAC_OP_CODE_FINALIZE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for the operation types supported by the driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="716" column="1" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="715" bodyend="723"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_a_e_s_c_m_a_c_8h_1aae722d07db97cac3578b07d258c675af" prot="public" static="no">
        <type><ref refid="struct_a_e_s_common___config" kindref="compound">AESCommon_Config</ref></type>
        <definition>typedef AESCommon_Config AESCMAC_Config</definition>
        <argsstring></argsstring>
        <name>AESCMAC_Config</name>
        <briefdescription>
<para>CMAC Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="_a_e_s_c_m_a_c_8h_1aae722d07db97cac3578b07d258c675af" kindref="member">AESCMAC_Config</ref> structure contains a set of pointers used to characterize the CMAC driver implementation.</para><para>This structure needs to be defined before calling <ref refid="_a_e_s_c_m_a_c_8h_1a0ac06b20096a85dae71a51a8afaa9f7b" kindref="member">AESCMAC_init()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_a_e_s_c_m_a_c_8h_1a0ac06b20096a85dae71a51a8afaa9f7b" kindref="member">AESCMAC_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="595" column="1" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" prot="public" static="no">
        <type><ref refid="_a_e_s_c_m_a_c_8h_1aae722d07db97cac3578b07d258c675af" kindref="member">AESCMAC_Config</ref> *</type>
        <definition>typedef AESCMAC_Config* AESCMAC_Handle</definition>
        <argsstring></argsstring>
        <name>AESCMAC_Handle</name>
        <briefdescription>
<para>A handle that is returned from an <ref refid="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" kindref="member">AESCMAC_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="600" column="1" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_e_s_c_m_a_c_8h_1a8e592c44859616fb36f7f43e207721c5" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* AESCMAC_CallbackFxn) (AESCMAC_Handle handle, int_fast16_t returnValue, AESCMAC_Operation *operation, AESCMAC_OperationType operationType)</definition>
        <argsstring>)(AESCMAC_Handle handle, int_fast16_t returnValue, AESCMAC_Operation *operation, AESCMAC_OperationType operationType)</argsstring>
        <name>AESCMAC_CallbackFxn</name>
        <briefdescription>
<para>The definition of a callback function used by the AESCMAC driver when used in <ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a3cf61f12fc25a4733957941c73d3484f" kindref="member">AESCMAC_RETURN_BEHAVIOR_CALLBACK</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the client that started the AESCMAC operation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of the AESCMAC operation. May contain an error code. Informs the application of why the callback function was called.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an operation struct.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operationType</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates which operation the callback refers to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="739" column="1" bodyfile="source/ti/drivers/AESCMAC.h" bodystart="739" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_a_e_s_c_m_a_c_8h_1a699d7920a95aecb01b239a79dbafad69" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref></type>
        <definition>const AESCMAC_Params AESCMAC_defaultParams</definition>
        <argsstring></argsstring>
        <name>AESCMAC_defaultParams</name>
        <briefdescription>
<para>Default <ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="_a_e_s_c_m_a_c_8h_1aa26eecc95d2e7346381ec0f25585808c" kindref="member">AESCMAC_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="770" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1a0ac06b20096a85dae71a51a8afaa9f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCMAC_init</definition>
        <argsstring>(void)</argsstring>
        <name>AESCMAC_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initializes the CMAC module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The AESCMAC_config structure must exist and be persistent before this function can be called. This function must also be called before any other CMAC driver APIs. This function call does not modify any peripheral registers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="780" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1aa26eecc95d2e7346381ec0f25585808c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCMAC_Params_init</definition>
        <argsstring>(AESCMAC_Params *params)</argsstring>
        <name>AESCMAC_Params_init</name>
        <param>
          <type><ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initializes the <ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: returnBehavior = AESCMAC_RETURN_BEHAVIOR_BLOCKING operationalMode = AESCMAC_OPMODE_CMAC callbackFxn = NULL timeout = SemaphoreP_WAIT_FOREVER custom = NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="795" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1af007baaace0903303c5330c4e554b409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCMAC_Operation_init</definition>
        <argsstring>(AESCMAC_Operation *operation)</argsstring>
        <name>AESCMAC_Operation_init</name>
        <param>
          <type><ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Initializes an <ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are all zeros. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="805" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref></type>
        <definition>AESCMAC_Handle AESCMAC_open</definition>
        <argsstring>(uint_least8_t index, const AESCMAC_Params *params)</argsstring>
        <name>AESCMAC_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Opens a given AESCMAC peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> <emphasis>operationalMode</emphasis> may be set to enable CBC-MAC mode but the default is CMAC mode</para></simplesect>
<simplesect kind="pre"><para>AESCMAC driver has been initialized using <ref refid="_a_e_s_c_m_a_c_8h_1a0ac06b20096a85dae71a51a8afaa9f7b" kindref="member">AESCMAC_init()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the CMAC indexed into the AESCMAC_config table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a parameter block, if NULL it will use default values</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref> on success or a NULL on an error or if it has been opened already.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_e_s_c_m_a_c_8h_1a0ac06b20096a85dae71a51a8afaa9f7b" kindref="member">AESCMAC_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_e_s_c_m_a_c_8h_1a837dea72a78384727b499fa857b58769" kindref="member">AESCMAC_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="827" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1a837dea72a78384727b499fa857b58769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCMAC_close</definition>
        <argsstring>(AESCMAC_Handle handle)</argsstring>
        <name>AESCMAC_close</name>
        <param>
          <type><ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Closes a AESCMAC peripheral specified by the CMAC handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" kindref="member">AESCMAC_open()</ref> or <ref refid="_a_e_s_c_m_a_c_8h_1adb2e43be898013e7704539b35fd1122b" kindref="member">AESCMAC_construct()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCMAC handle</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" kindref="member">AESCMAC_open()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_e_s_c_m_a_c_8h_1adb2e43be898013e7704539b35fd1122b" kindref="member">AESCMAC_construct()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="839" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1a66e34437c6d40bd66c5b9e18af915ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCMAC_setupSign</definition>
        <argsstring>(AESCMAC_Handle handle, const CryptoKey *key)</argsstring>
        <name>AESCMAC_setupSign</name>
        <param>
          <type><ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Prepares a segmented AESCMAC sign operation. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets up a segmented AESCMAC sign operation. After a segmented operation is setup, it must be completed with <ref refid="_a_e_s_c_m_a_c_8h_1a44bd04ec6b9bf7184d9dbf5bce223905" kindref="member">AESCMAC_finalize</ref> or cancelled with <ref refid="_a_e_s_c_m_a_c_8h_1a13efea02d256262dd655330eb204c96b" kindref="member">AESCMAC_cancelOperation</ref> before another operation can be started.</para><para><simplesect kind="pre"><para><ref refid="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" kindref="member">AESCMAC_open()</ref> or <ref refid="_a_e_s_c_m_a_c_8h_1adb2e43be898013e7704539b35fd1122b" kindref="member">AESCMAC_construct()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCMAC handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a previously initialized <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a716cd36c2e310e4753a635f85e8388e0" kindref="member">AESCMAC_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. Segmented data may now be added. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a30a1dcf01290f2f160cc6f9ba165d571" kindref="member">AESCMAC_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><ref refid="_a_e_s_c_m_a_c_8h_1acfef9cc89f0b9aaa2b901314bae727f2" kindref="member">AESCMAC_addData()</ref> or <ref refid="_a_e_s_c_m_a_c_8h_1a44bd04ec6b9bf7184d9dbf5bce223905" kindref="member">AESCMAC_finalize()</ref></para></simplesect>
<simplesect kind="see"><para><ref refid="_a_e_s_c_m_a_c_8h_1ad94897df19ac49d838cddec8c9d3afcb" kindref="member">AESCMAC_setupVerify()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="863" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1ad94897df19ac49d838cddec8c9d3afcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCMAC_setupVerify</definition>
        <argsstring>(AESCMAC_Handle handle, const CryptoKey *key)</argsstring>
        <name>AESCMAC_setupVerify</name>
        <param>
          <type><ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Prepares a segmented AESCMAC verify operation. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets up a segmented AESCMAC verify operation. After a segmented operation is setup, it must be completed with <ref refid="_a_e_s_c_m_a_c_8h_1a44bd04ec6b9bf7184d9dbf5bce223905" kindref="member">AESCMAC_finalize</ref> or cancelled with <ref refid="_a_e_s_c_m_a_c_8h_1a13efea02d256262dd655330eb204c96b" kindref="member">AESCMAC_cancelOperation</ref> before another operation can be started.</para><para><simplesect kind="pre"><para><ref refid="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" kindref="member">AESCMAC_open()</ref> or <ref refid="_a_e_s_c_m_a_c_8h_1adb2e43be898013e7704539b35fd1122b" kindref="member">AESCMAC_construct()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCMAC handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a previously initialized <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a716cd36c2e310e4753a635f85e8388e0" kindref="member">AESCMAC_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. Segmented data may now be added. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a30a1dcf01290f2f160cc6f9ba165d571" kindref="member">AESCMAC_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><ref refid="_a_e_s_c_m_a_c_8h_1acfef9cc89f0b9aaa2b901314bae727f2" kindref="member">AESCMAC_addData()</ref> or <ref refid="_a_e_s_c_m_a_c_8h_1a44bd04ec6b9bf7184d9dbf5bce223905" kindref="member">AESCMAC_finalize()</ref></para></simplesect>
<simplesect kind="see"><para><ref refid="_a_e_s_c_m_a_c_8h_1a66e34437c6d40bd66c5b9e18af915ce6" kindref="member">AESCMAC_setupSign()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="887" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1acfef9cc89f0b9aaa2b901314bae727f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCMAC_addData</definition>
        <argsstring>(AESCMAC_Handle handle, AESCMAC_Operation *operation)</argsstring>
        <name>AESCMAC_addData</name>
        <param>
          <type><ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Adds data to the current segmented operation. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>inputLength</emphasis> must be a non-zero multiple of the block size (16-bytes). <ref refid="_a_e_s_c_m_a_c_8h_1acfef9cc89f0b9aaa2b901314bae727f2" kindref="member">AESCMAC_addData()</ref> may be called an arbitrary number of times before finishing the operation with <ref refid="_a_e_s_c_m_a_c_8h_1a44bd04ec6b9bf7184d9dbf5bce223905" kindref="member">AESCMAC_finalize()</ref>.</para><para>This function blocks until the final MAC been computed. It returns immediately when <ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a3cf61f12fc25a4733957941c73d3484f" kindref="member">AESCMAC_RETURN_BEHAVIOR_CALLBACK</ref> is set.</para><para><simplesect kind="note"><para>None of the buffers provided as arguments may be altered by the application during an ongoing operation. Doing so can yield corrupted plaintext.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_e_s_c_m_a_c_8h_1a66e34437c6d40bd66c5b9e18af915ce6" kindref="member">AESCMAC_setupSign()</ref> or <ref refid="_a_e_s_c_m_a_c_8h_1ad94897df19ac49d838cddec8c9d3afcb" kindref="member">AESCMAC_setupVerify()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCMAC handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to CMAC operation structure()</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a716cd36c2e310e4753a635f85e8388e0" kindref="member">AESCMAC_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a30a1dcf01290f2f160cc6f9ba165d571" kindref="member">AESCMAC_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a4eec841783b4db4109ecb39c393e9978" kindref="member">AESCMAC_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a5b10301188ba1acfd0881fe2f07641f1" kindref="member">AESCMAC_STATUS_UNALIGNED_IO_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The input buffer was not word-aligned.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><ref refid="_a_e_s_c_m_a_c_8h_1acfef9cc89f0b9aaa2b901314bae727f2" kindref="member">AESCMAC_addData()</ref> or <ref refid="_a_e_s_c_m_a_c_8h_1a44bd04ec6b9bf7184d9dbf5bce223905" kindref="member">AESCMAC_finalize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="917" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1a44bd04ec6b9bf7184d9dbf5bce223905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCMAC_finalize</definition>
        <argsstring>(AESCMAC_Handle handle, AESCMAC_Operation *operation)</argsstring>
        <name>AESCMAC_finalize</name>
        <param>
          <type><ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Finalizes the current segmented operation. </para>        </briefdescription>
        <detaileddescription>
<para>For sign operations: This function computes and writes back the final MAC <emphasis>mac</emphasis> of length <emphasis>macLength</emphasis>.</para><para>For verify operations: This function uses the provided MAC <emphasis>mac</emphasis> to authenticate an input message. The return value indicates whether the authentication was successful.</para><para><simplesect kind="note"><para>Finalizing without additional input data is not supported. If finalization is attempted with <emphasis>inputLength</emphasis> of zero, <ref refid="_a_e_s_c_m_a_c_8h_1a30a1dcf01290f2f160cc6f9ba165d571" kindref="member">AESCMAC_STATUS_ERROR</ref> will be returned and the caller must either retry finalization with data or terminate the segmented operation by calling <ref refid="_a_e_s_c_m_a_c_8h_1a13efea02d256262dd655330eb204c96b" kindref="member">AESCMAC_cancelOperation</ref>.</para></simplesect>
<simplesect kind="note"><para>None of the buffers provided as arguments may be altered by the application during an ongoing operation. Doing so can yield corrupted plaintext.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_e_s_c_m_a_c_8h_1acfef9cc89f0b9aaa2b901314bae727f2" kindref="member">AESCMAC_addData()</ref> or <ref refid="_a_e_s_c_m_a_c_8h_1a66e34437c6d40bd66c5b9e18af915ce6" kindref="member">AESCMAC_setupSign()</ref> or <ref refid="_a_e_s_c_m_a_c_8h_1ad94897df19ac49d838cddec8c9d3afcb" kindref="member">AESCMAC_setupVerify()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCMAC handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to CMAC operation structure()</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a716cd36c2e310e4753a635f85e8388e0" kindref="member">AESCMAC_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>In <ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49adeb161ec7470cfac648f9cbbf9c98fa7" kindref="member">AESCMAC_RETURN_BEHAVIOR_BLOCKING</ref> and <ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a0deb89354e0bfd2dbe4cd85b872cc49d" kindref="member">AESCMAC_RETURN_BEHAVIOR_POLLING</ref>, this means the MAC was generated successfully. In <ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a3cf61f12fc25a4733957941c73d3484f" kindref="member">AESCMAC_RETURN_BEHAVIOR_CALLBACK</ref>, this means the operation started successfully. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a30a1dcf01290f2f160cc6f9ba165d571" kindref="member">AESCMAC_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a4eec841783b4db4109ecb39c393e9978" kindref="member">AESCMAC_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a46bf60a60cab851889382ecf546c2a52" kindref="member">AESCMAC_STATUS_MAC_INVALID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The provided MAC did not match the generated MAC. This return value is only valid for verify operations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a5b10301188ba1acfd0881fe2f07641f1" kindref="member">AESCMAC_STATUS_UNALIGNED_IO_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The input buffer was not word-aligned. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="957" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1af2a169d5e503f148313be4c6f4c4c510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCMAC_oneStepSign</definition>
        <argsstring>(AESCMAC_Handle handle, AESCMAC_Operation *operation, CryptoKey *key)</argsstring>
        <name>AESCMAC_oneStepSign</name>
        <param>
          <type><ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Performs a AESCMAC signature in one call. </para>        </briefdescription>
        <detaileddescription>
<para>This function uses the provided key to authenticate an input message. The resulting output is a message authentication code.</para><para><simplesect kind="note"><para>None of the buffers provided as arguments may be altered by the application during an ongoing operation. Doing so can yield corrupted plaintext.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" kindref="member">AESCMAC_open()</ref> or <ref refid="_a_e_s_c_m_a_c_8h_1adb2e43be898013e7704539b35fd1122b" kindref="member">AESCMAC_construct()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCMAC handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to AESCMAC operation structure</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a previously initialized <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a716cd36c2e310e4753a635f85e8388e0" kindref="member">AESCMAC_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>In <ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49adeb161ec7470cfac648f9cbbf9c98fa7" kindref="member">AESCMAC_RETURN_BEHAVIOR_BLOCKING</ref> and <ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a0deb89354e0bfd2dbe4cd85b872cc49d" kindref="member">AESCMAC_RETURN_BEHAVIOR_POLLING</ref>, this means the MAC was generated successfully. In <ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a3cf61f12fc25a4733957941c73d3484f" kindref="member">AESCMAC_RETURN_BEHAVIOR_CALLBACK</ref>, this means the operation started successfully. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a30a1dcf01290f2f160cc6f9ba165d571" kindref="member">AESCMAC_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a4eec841783b4db4109ecb39c393e9978" kindref="member">AESCMAC_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a5b10301188ba1acfd0881fe2f07641f1" kindref="member">AESCMAC_STATUS_UNALIGNED_IO_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The input buffer was not word-aligned.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_a_e_s_c_m_a_c_8h_1ad6a43d83bc6f5d20af3308a6216e82ae" kindref="member">AESCMAC_oneStepVerify()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="988" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1ad6a43d83bc6f5d20af3308a6216e82ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCMAC_oneStepVerify</definition>
        <argsstring>(AESCMAC_Handle handle, AESCMAC_Operation *operation, CryptoKey *key)</argsstring>
        <name>AESCMAC_oneStepVerify</name>
        <param>
          <type><ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref> *</type>
          <declname>operation</declname>
        </param>
        <param>
          <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Performs a AESCMAC verification in one call. </para>        </briefdescription>
        <detaileddescription>
<para>This function verifies that the provided message authentication code matches the one generated by the provided key and input message.</para><para><simplesect kind="note"><para>None of the buffers provided as arguments may be altered by the application during an ongoing operation. Doing so can yield corrupted plaintext.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" kindref="member">AESCMAC_open()</ref> or <ref refid="_a_e_s_c_m_a_c_8h_1adb2e43be898013e7704539b35fd1122b" kindref="member">AESCMAC_construct()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCMAC handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to AESCMAC operation structure</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a previously initialized <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a716cd36c2e310e4753a635f85e8388e0" kindref="member">AESCMAC_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>In <ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49adeb161ec7470cfac648f9cbbf9c98fa7" kindref="member">AESCMAC_RETURN_BEHAVIOR_BLOCKING</ref> and <ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a0deb89354e0bfd2dbe4cd85b872cc49d" kindref="member">AESCMAC_RETURN_BEHAVIOR_POLLING</ref>, this means the MAC was verified successfully. In <ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a3cf61f12fc25a4733957941c73d3484f" kindref="member">AESCMAC_RETURN_BEHAVIOR_CALLBACK</ref>, this means the operation started successfully. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a30a1dcf01290f2f160cc6f9ba165d571" kindref="member">AESCMAC_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a4eec841783b4db4109ecb39c393e9978" kindref="member">AESCMAC_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a46bf60a60cab851889382ecf546c2a52" kindref="member">AESCMAC_STATUS_MAC_INVALID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The provided MAC did not match the generated MAC. This return value is only valid for verify operations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a5b10301188ba1acfd0881fe2f07641f1" kindref="member">AESCMAC_STATUS_UNALIGNED_IO_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The input buffer was not word-aligned.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_a_e_s_c_m_a_c_8h_1af2a169d5e503f148313be4c6f4c4c510" kindref="member">AESCMAC_oneStepSign()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="1021" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1a13efea02d256262dd655330eb204c96b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCMAC_cancelOperation</definition>
        <argsstring>(AESCMAC_Handle handle)</argsstring>
        <name>AESCMAC_cancelOperation</name>
        <param>
          <type><ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Cancels an ongoing AESCMAC operation. </para>        </briefdescription>
        <detaileddescription>
<para>Asynchronously cancels an AESCMAC operation. Only available when using AESCMAC_RETURN_BEHAVIOR_CALLBACK. The operation will terminate as though an error occurred. The return status code of the operation will be AESCMAC_STATUS_CANCELED.</para><para><simplesect kind="note"><para>Only the same thread that started an operation is permitted to cancel it. This function cannot be be called from an interrupt context or callback.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the operation to cancel</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_m_a_c_8h_1a716cd36c2e310e4753a635f85e8388e0" kindref="member">AESCMAC_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was canceled or the operation had already completed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="1038" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_m_a_c_8h_1adb2e43be898013e7704539b35fd1122b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref></type>
        <definition>AESCMAC_Handle AESCMAC_construct</definition>
        <argsstring>(AESCMAC_Config *config, const AESCMAC_Params *params)</argsstring>
        <name>AESCMAC_construct</name>
        <param>
          <type><ref refid="_a_e_s_c_m_a_c_8h_1aae722d07db97cac3578b07d258c675af" kindref="member">AESCMAC_Config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const <ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Constructs a new AESCMAC object. </para>        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" kindref="member">AESCMAC_open()</ref>, <ref refid="_a_e_s_c_m_a_c_8h_1adb2e43be898013e7704539b35fd1122b" kindref="member">AESCMAC_construct()</ref> does not require the hwAttrs and object to be allocated in a <ref refid="_a_e_s_c_m_a_c_8h_1aae722d07db97cac3578b07d258c675af" kindref="member">AESCMAC_Config</ref> array that is indexed into. Instead, the <ref refid="_a_e_s_c_m_a_c_8h_1aae722d07db97cac3578b07d258c675af" kindref="member">AESCMAC_Config</ref>, hwAttrs, and object can be allocated at any location. This allows for relatively simple run-time allocation of temporary driver instances on the stack or the heap. The drawback is that this makes it more difficult to write device-agnostic code. If you use an ifdef with DeviceFamily, you can choose the correct object and hwAttrs to allocate. That compilation unit will be tied to the device it was compiled for at this point. To change devices, recompilation of the application with a different DeviceFamily setting is necessary.</para><para><simplesect kind="note"><para><ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> <emphasis>operationalMode</emphasis> may be set to enable CBC-MAC mode but the default is CMAC mode</para></simplesect>
<simplesect kind="pre"><para>The object struct <computeroutput>config</computeroutput> points to must be zeroed out prior to calling this function. Otherwise, unexpected behavior may ensue.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_a_e_s_c_m_a_c_8h_1aae722d07db97cac3578b07d258c675af" kindref="member">AESCMAC_Config</ref> describing the location of the object and hwAttrs.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> to configure the driver instance.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a <ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref> on success or NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCMAC.h" line="1066" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>AESCMAC (CMAC and CBC-MAC) driver header. </para>    </briefdescription>
    <detaileddescription>
<para><anchor id="_a_e_s_c_m_a_c_8h_1ti_drivers_AESCMAC_Overview"/><heading level="1">Overview</heading>
</para><para>The Cipher-based Message Authentication Code (CMAC) and Cipher Block Chaining Message Authentication Code (CBC-MAC) are generic block cipher modes of operation. They can be used with any block cipher but this driver implementation uses AES.</para><para>Both CMAC and CBC-MAC create a message authentication code from a message of any practical length to provide authenticity and integrity assurances. CMAC is recommended over CBC-MAC because CBC-MAC is not secure for variable length messages.</para><para><heading level="2">CBC-MAC Drawbacks</heading>
</para><para>CBC-MAC is only secure for fixed-length messages. Any single key must only be used for messages of a fixed and known length. The CMAC algorithm, which is based on a variation of CBC-MAC at its core, was developed to address that security deficiency and is the MAC algorithm recommended by NIST.</para><para><anchor id="_a_e_s_c_m_a_c_8h_1ti_drivers_AESCMAC_Usage"/><heading level="1">CMAC Usage</heading>
</para><para><heading level="2">Before starting a CMAC operation</heading>
</para><para>Before starting a CMAC operation, the application must do the following:<itemizedlist>
<listitem><para>Call <ref refid="_a_e_s_c_m_a_c_8h_1a0ac06b20096a85dae71a51a8afaa9f7b" kindref="member">AESCMAC_init()</ref> to initialize the driver</para></listitem><listitem><para>Call <ref refid="_a_e_s_c_m_a_c_8h_1aa26eecc95d2e7346381ec0f25585808c" kindref="member">AESCMAC_Params_init()</ref> to initialize the <ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> to default values.</para></listitem><listitem><para>Modify the <ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> as desired</para></listitem><listitem><para>Call <ref refid="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" kindref="member">AESCMAC_open()</ref> to open an instance of the driver</para></listitem><listitem><para>Initialize a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. These opaque data structures are representations of keying material and its storage. Depending on how the keying material is stored (RAM or flash, key store), the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> must be initialized differently. The CMAC API can handle all types of <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. However, not all device-specific implementations support all types of <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. Devices without a key store will not support CryptoKeys with keying material stored in a key store for example. All devices support plaintext CryptoKeys.</para></listitem></itemizedlist>
</para><para><heading level="2">Starting a CMAC operation</heading>
</para><para>The <ref refid="_a_e_s_c_m_a_c_8h_1af2a169d5e503f148313be4c6f4c4c510" kindref="member">AESCMAC_oneStepSign</ref> and <ref refid="_a_e_s_c_m_a_c_8h_1ad6a43d83bc6f5d20af3308a6216e82ae" kindref="member">AESCMAC_oneStepVerify</ref> functions perform a CMAC operation in a single call. They will always be the most highly optimized routines with the least overhead and the fastest runtime. However, they require all plaintext or ciphertext to be available to the function at the start of the call. All devices support single call operations.</para><para><heading level="2">After the CMAC operation completes</heading>
</para><para>After the CMAC operation completes, the application should either start another operation or close the driver by calling <ref refid="_a_e_s_c_m_a_c_8h_1a837dea72a78384727b499fa857b58769" kindref="member">AESCMAC_close()</ref>.</para><para><anchor id="_a_e_s_c_m_a_c_8h_1ti_drivers_AESCMAC_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_a_e_s_c_m_a_c_8h_1ti_drivers_AESCMAC_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>CMAC<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/CMAC.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Define<sp/>name<sp/>for<sp/>CMAC<sp/>channel<sp/>index</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>AESCMAC_INSTANCE<sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>AESCMAC_open(AESCMAC_INSTANCE,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>symmetric<sp/>key</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>operation</highlight></codeline>
<codeline><highlight class="normal">AESCMAC_Operation_init(&amp;operation);</highlight></codeline>
<codeline><highlight class="normal">operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input;</highlight></codeline>
<codeline><highlight class="normal">operation.inputLength<sp/><sp/><sp/>=<sp/>sizeof(input);</highlight></codeline>
<codeline><highlight class="normal">operation.mac<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mac;</highlight></codeline>
<codeline><highlight class="normal">operation.macLength<sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(mac);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">signResult<sp/>=<sp/>AESCMAC_oneStepSign(handle,<sp/>&amp;operation,<sp/>&amp;cryptoKey);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_close(handle);</highlight></codeline>
</programlisting></para><para><anchor id="_a_e_s_c_m_a_c_8h_1ti_drivers_AESCMAC_Examples"/><heading level="2">Examples</heading>
</para><para>### Single call CMAC authentication with plaintext <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> in blocking return mode # <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/AESCMAC.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint8_t<sp/>message[16]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0x6B,<sp/>0xC1,<sp/>0xBE,<sp/>0xE2,<sp/>0x2E,<sp/>0x40,<sp/>0x9F,<sp/>0x96,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xE9,<sp/>0x3D,<sp/>0x7E,<sp/>0x11,<sp/>0x73,<sp/>0x93,<sp/>0x17,<sp/>0x2A};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>keyingMaterial[16]<sp/><sp/>=<sp/>{0x2B,<sp/>0x7E,<sp/>0x15,<sp/>0x16,<sp/>0x28,<sp/>0xAE,<sp/>0xD2,<sp/>0xA6,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xAB,<sp/>0xF7,<sp/>0x15,<sp/>0x88,<sp/>0x09,<sp/>0xCF,<sp/>0x4F,<sp/>0x3C};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>mac[16];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline><highlight class="normal">AESCMAC_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">AESCMAC_Operation<sp/>operation;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_Handle<sp/>handle<sp/>=<sp/>AESCMAC_open(0,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_Operation_init(&amp;operation);</highlight></codeline>
<codeline><highlight class="normal">operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input;</highlight></codeline>
<codeline><highlight class="normal">operation.inputLength<sp/><sp/>=<sp/>sizeof(input);</highlight></codeline>
<codeline><highlight class="normal">operation.mac<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mac;</highlight></codeline>
<codeline><highlight class="normal">operation.macLength<sp/><sp/><sp/><sp/>=<sp/>sizeof(mac);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>result<sp/>=<sp/>AESCMAC_oneStepSign(handle,<sp/>&amp;operation,<sp/>&amp;cryptoKey);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>!=<sp/>AESCMAC_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>resulting<sp/>MAC<sp/>should<sp/>equal<sp/>the<sp/>following<sp/>after<sp/>the<sp/>operation:</highlight></codeline>
<codeline><highlight class="normal">//<sp/>0x07,<sp/>0x0A,<sp/>0x16,<sp/>0xB4,<sp/>0x6B,<sp/>0x4D,<sp/>0x41,<sp/>0x44,</highlight></codeline>
<codeline><highlight class="normal">//<sp/>0xF7,<sp/>0x9B,<sp/>0xDD,<sp/>0x9D,<sp/>0xD0,<sp/>0x4A,<sp/>0x28,<sp/>0x7C</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_close(handle);</highlight></codeline>
</programlisting></para><para>### Single call CMAC verification with plaintext <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> in callback return mode # <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/AESCMAC.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>message[16]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0x6B,<sp/>0xC1,<sp/>0xBE,<sp/>0xE2,<sp/>0x2E,<sp/>0x40,<sp/>0x9F,<sp/>0x96,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xE9,<sp/>0x3D,<sp/>0x7E,<sp/>0x11,<sp/>0x73,<sp/>0x93,<sp/>0x17,<sp/>0x2A};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>keyingMaterial[16]<sp/><sp/>=<sp/>{0x2B,<sp/>0x7E,<sp/>0x15,<sp/>0x16,<sp/>0x28,<sp/>0xAE,<sp/>0xD2,<sp/>0xA6,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xAB,<sp/>0xF7,<sp/>0x15,<sp/>0x88,<sp/>0x09,<sp/>0xCF,<sp/>0x4F,<sp/>0x3C};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>expectedMac[16]<sp/><sp/><sp/><sp/><sp/>=<sp/>{0x07,<sp/>0x0A,<sp/>0x16,<sp/>0xB4,<sp/>0x6B,<sp/>0x4D,<sp/>0x41,<sp/>0x44,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xF7,<sp/>0x9B,<sp/>0xDD,<sp/>0x9D,<sp/>0xD0,<sp/>0x4A,<sp/>0x28,<sp/>0x7C};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>cmacCallback(AESCMAC_Handle<sp/>handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>returnValue)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(returnValue<sp/>!=<sp/>AESCMAC_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>cmacStartFunction(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCMAC_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCMAC_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCMAC_Operation<sp/>operation;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int_fast16_t<sp/>verificationResult;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCMAC_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.returnBehavior<sp/>=<sp/>AESCMAC_RETURN_BEHAVIOR_CALLBACK;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.callbackFxn<sp/>=<sp/>cmacCallback;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>AESCMAC_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCMAC_Operation_init(&amp;operation);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.inputLength<sp/><sp/>=<sp/>sizeof(input);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.mac<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>expectedMac;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.macLength<sp/><sp/><sp/><sp/>=<sp/>sizeof(expectedMac);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>verificationResult<sp/>=<sp/>AESCMAC_oneStepVerify(handle,<sp/>&amp;operation,<sp/>&amp;cryptoKey);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(verificationResult<sp/>!=<sp/>AESCMAC_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>do<sp/>other<sp/>things<sp/>while<sp/>CMAC<sp/>operation<sp/>completes<sp/>in<sp/>the<sp/>background</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>### Multi-step CMAC signature with plaintext <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> in blocking return mode # <programlisting><codeline><highlight class="normal"><sp/>#include<sp/>&lt;ti/drivers/AESCMAC.h&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/>#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>#define<sp/>AES_BLOCK_SIZE<sp/>16<sp/><sp/>//<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>keyingMaterial[32]<sp/><sp/>=<sp/>{0x60,<sp/>0x3d,<sp/>0xeb,<sp/>0x10,<sp/>0x15,<sp/>0xca,<sp/>0x71,<sp/>0xbe,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x2b,<sp/>0x73,<sp/>0xae,<sp/>0xf0,<sp/>0x85,<sp/>0x7d,<sp/>0x77,<sp/>0x81,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1f,<sp/>0x35,<sp/>0x2c,<sp/>0x07,<sp/>0x3b,<sp/>0x61,<sp/>0x08,<sp/>0xd7,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x2d,<sp/>0x98,<sp/>0x10,<sp/>0xa3,<sp/>0x09,<sp/>0x14,<sp/>0xdf,<sp/>0xf4};</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>message[40]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0x6b,<sp/>0xc1,<sp/>0xbe,<sp/>0xe2,<sp/>0x2e,<sp/>0x40,<sp/>0x9f,<sp/>0x96,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xe9,<sp/>0x3d,<sp/>0x7e,<sp/>0x11,<sp/>0x73,<sp/>0x93,<sp/>0x17,<sp/>0x2a,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xae,<sp/>0x2d,<sp/>0x8a,<sp/>0x57,<sp/>0x1e,<sp/>0x03,<sp/>0xac,<sp/>0x9c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x9e,<sp/>0xb7,<sp/>0x6f,<sp/>0xac,<sp/>0x45,<sp/>0xaf,<sp/>0x8e,<sp/>0x51,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x30,<sp/>0xc8,<sp/>0x1c,<sp/>0x46,<sp/>0xa3,<sp/>0x5c,<sp/>0xe4,<sp/>0x11};</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>mac[16];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/>AESCMAC_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal"><sp/>AESCMAC_Operation<sp/>operation;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>AESCMAC_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>AESCMAC_Handle<sp/>handle<sp/>=<sp/>AESCMAC_open(0,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>AESCMAC_Operation_init(&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Set<sp/>up<sp/>multi-step<sp/>sign.</highlight></codeline>
<codeline><highlight class="normal"><sp/>int_fast16_t<sp/>result<sp/>=<sp/>AESCMAC_setupSign(handle,<sp/>&amp;cryptoKey);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(result<sp/>!=<sp/>AESCMAC_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>size_t<sp/>initialSegmentSize<sp/>=<sp/>AES_BLOCK_SIZE;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Add<sp/>first<sp/>segment<sp/>of<sp/>data.</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input;</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.inputLength<sp/>=<sp/>initialSegmentSize;<sp/><sp/>//<sp/>Must<sp/>be<sp/>a<sp/>non-zero<sp/>multiple<sp/>of<sp/>the<sp/>block<sp/>size<sp/>(16-bytes)<sp/>unless</highlight></codeline>
<codeline><highlight class="normal">finalizing.<sp/>result<sp/>=<sp/>AESCMAC_addData(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(result<sp/>!=<sp/>AESCMAC_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Finalize<sp/>with<sp/>the<sp/>last<sp/>segment<sp/>of<sp/>data.</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;input[initialSegmentSize];</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.inputLength<sp/><sp/>=<sp/>sizeof(input)<sp/>-<sp/>initialSegmentSize;</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.mac<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mac;</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.macLength<sp/><sp/><sp/><sp/>=<sp/>sizeof(mac);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>result<sp/>=<sp/>AESCMAC_finalize(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(result<sp/>!=<sp/>AESCMAC_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>The<sp/>resulting<sp/>MAC<sp/>should<sp/>equal<sp/>the<sp/>following<sp/>after<sp/>the<sp/>operation:</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>0xaa,<sp/>0xf3,<sp/>0xd8,<sp/>0xf1,<sp/>0xde,<sp/>0x56,<sp/>0x40,<sp/>0xc2,</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>0x32,<sp/>0xf5,<sp/>0xb1,<sp/>0x69,<sp/>0xb9,<sp/>0xc9,<sp/>0x11,<sp/>0xe6</highlight></codeline>
<codeline><highlight class="normal"><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>AESCMAC_close(handle);</highlight></codeline>
</programlisting></para><para><anchor id="_a_e_s_c_m_a_c_8h_1ti_drivers_AESCBCMAC_Usage"/><heading level="1">CBC-MAC Usage</heading>
</para><para><heading level="2">Before starting a CBC-MAC operation</heading>
</para><para>Before starting a CBC-MAC operation, the application must do the following:<itemizedlist>
<listitem><para>Call <ref refid="_a_e_s_c_m_a_c_8h_1a0ac06b20096a85dae71a51a8afaa9f7b" kindref="member">AESCMAC_init()</ref> to initialize the driver</para></listitem><listitem><para>Call <ref refid="_a_e_s_c_m_a_c_8h_1aa26eecc95d2e7346381ec0f25585808c" kindref="member">AESCMAC_Params_init()</ref> to initialize the <ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> to default values.</para></listitem><listitem><para>Set <ref refid="struct_a_e_s_c_m_a_c___params_1ad6b1d9da9e5f12222807a0e4194b2dc8" kindref="member">AESCMAC_Params.operationalMode</ref> to <ref refid="_a_e_s_c_m_a_c_8h_1abaad4def712e02a8451f275575c2771ca96ef3aaada660cb0a90ff538ca46dbd6" kindref="member">AESCMAC_OPMODE_CBCMAC</ref>.</para></listitem><listitem><para>Modify the <ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref> as desired<itemizedlist>
<listitem><para>Call <ref refid="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" kindref="member">AESCMAC_open()</ref> to open an instance of the driver</para></listitem><listitem><para>Initialize a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. These opaque data structures are representations of keying material and its storage. Depending on how the keying material is stored (RAM or flash, key store, key blob), the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> must be initialized differently. The AESCMAC API can handle all types of <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. However, not all device-specific implementations support all types of <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. Devices without a key store will not support CryptoKeys with keying material stored in a key store for example. All devices support plaintext CryptoKeys.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Initialize the <ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref> using <ref refid="_a_e_s_c_m_a_c_8h_1af007baaace0903303c5330c4e554b409" kindref="member">AESCMAC_Operation_init()</ref> and set all length, key, and buffer fields.</para></listitem></itemizedlist>
</para><para><heading level="2">Starting a CBC-MAC operation</heading>
</para><para>The <ref refid="_a_e_s_c_m_a_c_8h_1af2a169d5e503f148313be4c6f4c4c510" kindref="member">AESCMAC_oneStepSign</ref> and <ref refid="_a_e_s_c_m_a_c_8h_1ad6a43d83bc6f5d20af3308a6216e82ae" kindref="member">AESCMAC_oneStepVerify</ref> functions perform a CBC-MAC operation in a single call. They will always be the most highly optimized routines with the least overhead and the fastest runtime. However, they require all plaintext or ciphertext to be available to the function at the start of the call. All devices support single call operations.</para><para><heading level="2">After the CBC-MAC operation completes</heading>
</para><para>After the CBC-MAC operation completes, the application should either start another operation or close the driver by calling <ref refid="_a_e_s_c_m_a_c_8h_1a837dea72a78384727b499fa857b58769" kindref="member">AESCMAC_close()</ref>.</para><para><anchor id="_a_e_s_c_m_a_c_8h_1ti_drivers_AESCBCMAC_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_a_e_s_c_m_a_c_8h_1ti_drivers_AESCBCMAC_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>AESCMAC<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/AESCMAC.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Define<sp/>name<sp/>for<sp/>AESCMAC<sp/>channel<sp/>index</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>AESCMAC_INSTANCE<sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_Params<sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.operationalMode<sp/>=<sp/>AESCMAC_OPMODE_CBCMAC;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>AESCMAC_open(AESCMAC_INSTANCE,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>symmetric<sp/>key</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>up<sp/>AESCMAC_Operation</highlight></codeline>
<codeline><highlight class="normal">AESCMAC_Operation_init(&amp;operation);</highlight></codeline>
<codeline><highlight class="normal">operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline><highlight class="normal">operation.inputLength<sp/>=<sp/>sizeof(plaintext);</highlight></codeline>
<codeline><highlight class="normal">operation.mac<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mac;</highlight></codeline>
<codeline><highlight class="normal">operation.macLength<sp/><sp/><sp/>=<sp/>sizeof(mac);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">signResult<sp/>=<sp/>AESCMAC_oneStepSign(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_close(handle);</highlight></codeline>
</programlisting></para><para><anchor id="_a_e_s_c_m_a_c_8h_1ti_drivers_AESCBCMAC_Examples"/><heading level="2">Examples</heading>
</para><para>### One step AES CBC-MAC signature with plaintext <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> in blocking return mode # <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/AESCMAC.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">AESCMAC_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>signResult;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>For<sp/>example<sp/>purposes<sp/>only.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Test<sp/>vector<sp/>derived<sp/>from<sp/>RFC<sp/>3602<sp/>Case<sp/>#2</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>plaintext[32]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0x56,<sp/>0x2F,<sp/>0x15,<sp/>0x9A,<sp/>0x69,<sp/>0x0C,<sp/>0x3B,<sp/>0x2F,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xD5,<sp/>0xBA,<sp/>0xB0,<sp/>0x62,<sp/>0x56,<sp/>0x23,<sp/>0x61,<sp/>0x57,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x10,<sp/>0x11,<sp/>0x12,<sp/>0x13,<sp/>0x14,<sp/>0x15,<sp/>0x16,<sp/>0x17,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x18,<sp/>0x19,<sp/>0x1A,<sp/>0x1B,<sp/>0x1C,<sp/>0x1D,<sp/>0x1E,<sp/>0x1F};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>mac[16];</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>keyingMaterial[16]<sp/>=<sp/><sp/>{0xC2,<sp/>0x86,<sp/>0x69,<sp/>0x6D,<sp/>0x88,<sp/>0x7C,<sp/>0x9A,<sp/>0xA0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x61,<sp/>0x1B,<sp/>0xBB,<sp/>0x3E,<sp/>0x20,<sp/>0x25,<sp/>0xA4,<sp/>0x5A};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>MAC<sp/>should<sp/>equal<sp/>the<sp/>following<sp/>after<sp/>the<sp/>operation:</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>0x75,<sp/>0x86,<sp/>0x60,<sp/>0x2D,<sp/>0x25,<sp/>0x3C,<sp/>0xFF,<sp/>0xF9,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>0x1B,<sp/>0x82,<sp/>0x66,<sp/>0xBE,<sp/>0xA6,<sp/>0xD6,<sp/>0x1A,<sp/>0xB1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.operationalMode<sp/>=<sp/>AESCMAC_OPMODE_CBCMAC;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>AESCMAC_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_Operation<sp/>operation;</highlight></codeline>
<codeline><highlight class="normal">AESCMAC_Operation_init(&amp;operation);<sp/>//<sp/>Optional<sp/>as<sp/>all<sp/>struct<sp/>members<sp/>will<sp/>be<sp/>set<sp/>before<sp/>use.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline><highlight class="normal">operation.inputLength<sp/><sp/><sp/>=<sp/>sizeof(plaintext);</highlight></codeline>
<codeline><highlight class="normal">operation.mac<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mac;</highlight></codeline>
<codeline><highlight class="normal">operation.macLength<sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(mac);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">signResult<sp/>=<sp/>AESCMAC_oneStepSign(handle,<sp/>&amp;operation,<sp/>&amp;cryptoKey);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(signResult<sp/>==<sp/>AESCMAC_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>signature<sp/>is<sp/>available<sp/>in<sp/>mac[]<sp/>buffer.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCMAC_close(handle);</highlight></codeline>
</programlisting></para><para><heading level="3">Multi-step AES CBC-MAC verify with plaintext <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> in polling return mode</heading>
</para><para><programlisting><codeline><highlight class="normal"><sp/>#include<sp/>&lt;ti/drivers/AESCMAC.h&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/>#include<sp/>&lt;ti/drivers/types/cryptoKey/CryptoKey_Plaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>#define<sp/>AES_BLOCK_SIZE<sp/>16<sp/><sp/>//<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>AESCMAC_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal"><sp/>AESCMAC_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/>CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/>int_fast16_t<sp/>retVal;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>For<sp/>example<sp/>purposes<sp/>only.</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Test<sp/>vector<sp/>derived<sp/>from<sp/>RFC<sp/>3602<sp/>Case<sp/>#2</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>plaintext[32]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0x56,<sp/>0x2F,<sp/>0x15,<sp/>0x9A,<sp/>0x69,<sp/>0x0C,<sp/>0x3B,<sp/>0x2F,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xD5,<sp/>0xBA,<sp/>0xB0,<sp/>0x62,<sp/>0x56,<sp/>0x23,<sp/>0x61,<sp/>0x57,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x10,<sp/>0x11,<sp/>0x12,<sp/>0x13,<sp/>0x14,<sp/>0x15,<sp/>0x16,<sp/>0x17,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x18,<sp/>0x19,<sp/>0x1A,<sp/>0x1B,<sp/>0x1C,<sp/>0x1D,<sp/>0x1E,<sp/>0x1F};</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>mac[16]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0x75,<sp/>0x86,<sp/>0x60,<sp/>0x2D,<sp/>0x25,<sp/>0x3C,<sp/>0xFF,<sp/>0xF9,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1B,<sp/>0x82,<sp/>0x66,<sp/>0xBE,<sp/>0xA6,<sp/>0xD6,<sp/>0x1A,<sp/>0xB1}</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>keyingMaterial[16]<sp/>=<sp/><sp/>{0xC2,<sp/>0x86,<sp/>0x69,<sp/>0x6D,<sp/>0x88,<sp/>0x7C,<sp/>0x9A,<sp/>0xA0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x61,<sp/>0x1B,<sp/>0xBB,<sp/>0x3E,<sp/>0x20,<sp/>0x25,<sp/>0xA4,<sp/>0x5A};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>AESCMAC_Params_init(&amp;params)</highlight></codeline>
<codeline><highlight class="normal"><sp/>params.returnBehavior<sp/>=<sp/>AESCMAC_RETURN_BEHAVIOR_POLLING;</highlight></codeline>
<codeline><highlight class="normal"><sp/>params.operationalMode<sp/>=<sp/>AESCMAC_OPMODE_CBCMAC;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>handle<sp/>=<sp/>AESCMAC_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>AESCMAC_Operation<sp/>operation;</highlight></codeline>
<codeline><highlight class="normal"><sp/>AESCMAC_Operation_init(&amp;operation);<sp/>//<sp/>Optional<sp/>as<sp/>all<sp/>struct<sp/>members<sp/>will<sp/>be<sp/>set<sp/>before<sp/>use.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>retVal<sp/>=<sp/>AESCMAC_setupVerify(handle,<sp/>&amp;cryptoKey);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(retVal<sp/>!=<sp/>AESCMAC_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.inputLength<sp/><sp/>=<sp/>AES_BLOCK_SIZE;<sp/><sp/><sp/>//<sp/>Must<sp/>be<sp/>a<sp/>non-zero<sp/>multiple<sp/>of<sp/>the<sp/>block<sp/>size<sp/>(16-bytes)<sp/>unless</highlight></codeline>
<codeline><highlight class="normal">finalizing.</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Note:<sp/>MAC<sp/>pointer<sp/>only<sp/>needs<sp/>to<sp/>be<sp/>set<sp/>when<sp/>finalizing<sp/>operation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>retVal<sp/>=<sp/>AESCMAC_addData(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(retVal<sp/>!=<sp/>AESCMAC_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext<sp/>+<sp/>AES_BLOCK_SIZE;</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.inputLength<sp/><sp/>=<sp/>AES_BLOCK_SIZE;</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.mac<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mac;</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.macLength<sp/><sp/><sp/><sp/>=<sp/>sizeof(mac);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>retVal<sp/>=<sp/>AESCMAC_finalize(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>retVal<sp/>should<sp/>be<sp/>AESCMAC_STATUS_SUCCESS<sp/>to<sp/>indicate<sp/>that<sp/>the<sp/>signature</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>verification<sp/>passed.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(retVal<sp/>==<sp/>AESCMAC_STATUS_MAC_INVALID)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>invalid<sp/>MAC</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>else<sp/>if<sp/>(retVal<sp/>!=<sp/>AESCMAC_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>AESCMAC_close(handle);</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2021,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="498"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_AESCMAC__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_AESCMAC__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_a_e_s_common_8h" kindref="compound">ti/drivers/AESCommon.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_crypto_key_8h" kindref="compound">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="_a_e_s_c_m_a_c_8h_1acf6ab0a1d37cacfa3ea286283350be2e" refkind="member"><highlight class="preprocessor">#define<sp/>AESCMAC_STATUS_RESERVED<sp/>AES_STATUS_RESERVED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="532" refid="_a_e_s_c_m_a_c_8h_1a716cd36c2e310e4753a635f85e8388e0" refkind="member"><highlight class="preprocessor">#define<sp/>AESCMAC_STATUS_SUCCESS<sp/>AES_STATUS_SUCCESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="540" refid="_a_e_s_c_m_a_c_8h_1a30a1dcf01290f2f160cc6f9ba165d571" refkind="member"><highlight class="preprocessor">#define<sp/>AESCMAC_STATUS_ERROR<sp/>AES_STATUS_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="550" refid="_a_e_s_c_m_a_c_8h_1a4eec841783b4db4109ecb39c393e9978" refkind="member"><highlight class="preprocessor">#define<sp/>AESCMAC_STATUS_RESOURCE_UNAVAILABLE<sp/>AES_STATUS_RESOURCE_UNAVAILABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="_a_e_s_c_m_a_c_8h_1a46bf60a60cab851889382ecf546c2a52" refkind="member"><highlight class="preprocessor">#define<sp/>AESCMAC_STATUS_MAC_INVALID<sp/>AES_STATUS_MAC_INVALID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="_a_e_s_c_m_a_c_8h_1abc28a0974aa103ed0f24aefbf3a77408" refkind="member"><highlight class="preprocessor">#define<sp/>AESCMAC_STATUS_CANCELED<sp/>AES_STATUS_CANCELED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="568" refid="_a_e_s_c_m_a_c_8h_1a7cdb7b6ea1f5485d8f2d1560ae3693aa" refkind="member"><highlight class="preprocessor">#define<sp/>AESCMAC_STATUS_KEYSTORE_INVALID_ID<sp/>AES_STATUS_KEYSTORE_INVALID_ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="574" refid="_a_e_s_c_m_a_c_8h_1ab69a463455edb1e59c09e5562491fa60" refkind="member"><highlight class="preprocessor">#define<sp/>AESCMAC_STATUS_KEYSTORE_GENERIC_ERROR<sp/>AES_STATUS_KEYSTORE_GENERIC_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="582" refid="_a_e_s_c_m_a_c_8h_1a5b10301188ba1acfd0881fe2f07641f1" refkind="member"><highlight class="preprocessor">#define<sp/>AESCMAC_STATUS_UNALIGNED_IO_NOT_SUPPORTED<sp/>AES_STATUS_UNALIGNED_IO_NOT_SUPPORTED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="595" refid="_a_e_s_c_m_a_c_8h_1aae722d07db97cac3578b07d258c675af" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_common___config" kindref="compound">AESCommon_Config</ref><sp/><ref refid="_a_e_s_c_m_a_c_8h_1aae722d07db97cac3578b07d258c675af" kindref="member">AESCMAC_Config</ref>;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>AESCMAC_Config<sp/>*<ref refid="_a_e_s_c_m_a_c_8h_1a1caacd7e61597f97eddd83f5bf463686" kindref="member">AESCMAC_Handle</ref>;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="622" refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="624" refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a3cf61f12fc25a4733957941c73d3484f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a3cf61f12fc25a4733957941c73d3484f" kindref="member">AESCMAC_RETURN_BEHAVIOR_CALLBACK</ref><sp/>=<sp/><ref refid="_a_e_s_common_8h_1a2820f6d52c454af5c0d7b20215e4a448a1960d364137ea874dd37fa582d97be46" kindref="member">AES_RETURN_BEHAVIOR_CALLBACK</ref>,</highlight></codeline>
<codeline lineno="631" refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49adeb161ec7470cfac648f9cbbf9c98fa7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49adeb161ec7470cfac648f9cbbf9c98fa7" kindref="member">AESCMAC_RETURN_BEHAVIOR_BLOCKING</ref><sp/>=<sp/><ref refid="_a_e_s_common_8h_1a2820f6d52c454af5c0d7b20215e4a448a2f37373d3f057f1696056d9124285398" kindref="member">AES_RETURN_BEHAVIOR_BLOCKING</ref>,</highlight></codeline>
<codeline lineno="636" refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a0deb89354e0bfd2dbe4cd85b872cc49d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49a0deb89354e0bfd2dbe4cd85b872cc49d" kindref="member">AESCMAC_RETURN_BEHAVIOR_POLLING</ref><sp/><sp/>=<sp/><ref refid="_a_e_s_common_8h_1a2820f6d52c454af5c0d7b20215e4a448a671eba846166015af2e6f06a017f1716" kindref="member">AES_RETURN_BEHAVIOR_POLLING</ref>,</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_m_a_c_8h_1abb725e908feda2cd19288f1eae78dd49" kindref="member">AESCMAC_ReturnBehavior</ref>;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="652" refid="_a_e_s_c_m_a_c_8h_1abaad4def712e02a8451f275575c2771c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal">{</highlight></codeline>
<codeline lineno="654" refid="_a_e_s_c_m_a_c_8h_1abaad4def712e02a8451f275575c2771ca47871bfa3fae7ec4879f1b8ed2be82a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1abaad4def712e02a8451f275575c2771ca47871bfa3fae7ec4879f1b8ed2be82a2" kindref="member">AESCMAC_OPMODE_CMAC</ref><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="655" refid="_a_e_s_c_m_a_c_8h_1abaad4def712e02a8451f275575c2771ca96ef3aaada660cb0a90ff538ca46dbd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1abaad4def712e02a8451f275575c2771ca96ef3aaada660cb0a90ff538ca46dbd6" kindref="member">AESCMAC_OPMODE_CBCMAC</ref><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="656"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_m_a_c_8h_1abaad4def712e02a8451f275575c2771c" kindref="member">AESCMAC_OperationalMode</ref>;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="661" refid="struct_a_e_s_c_m_a_c___operation" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal">{</highlight></codeline>
<codeline lineno="663" refid="struct_a_e_s_c_m_a_c___operation_1a5b67facd09ed1ab179985d9ad257fa0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_a_e_s_c_m_a_c___operation_1a5b67facd09ed1ab179985d9ad257fa0b" kindref="member">input</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="668" refid="struct_a_e_s_c_m_a_c___operation_1adedc78b74025a2a55c7e744be6f14242" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_a_e_s_c_m_a_c___operation_1adedc78b74025a2a55c7e744be6f14242" kindref="member">mac</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="674" refid="struct_a_e_s_c_m_a_c___operation_1aac49fe0a3749797674de156fa3292dad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_c_m_a_c___operation_1aac49fe0a3749797674de156fa3292dad" kindref="member">inputLength</ref>;<sp/></highlight></codeline>
<codeline lineno="679" refid="struct_a_e_s_c_m_a_c___operation_1ab54da06a73c2c092caf73013c96e6706" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_c_m_a_c___operation_1ab54da06a73c2c092caf73013c96e6706" kindref="member">macLength</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="684"><highlight class="normal">}<sp/><ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref>;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="689" refid="_a_e_s_c_m_a_c_8h_1a8c299b832ab317bf55445e5fa5930b1b" refkind="member"><highlight class="preprocessor">#define<sp/>AESCMAC_OP_CODE_MASK<sp/>0x0F<sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>0-3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="694" refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="696" refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64a960efb62599541f8c3f3bfe249c52093" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64a960efb62599541f8c3f3bfe249c52093" kindref="member">AESCMAC_OP_CODE_ONE_STEP</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="697" refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64ae5626683d890e6f927a686b5ee857902" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64ae5626683d890e6f927a686b5ee857902" kindref="member">AESCMAC_OP_CODE_SEGMENTED</ref>,</highlight></codeline>
<codeline lineno="698" refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64a9f1a87b2cabf2b9becc191f39a873422" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64a9f1a87b2cabf2b9becc191f39a873422" kindref="member">AESCMAC_OP_CODE_FINALIZE</ref></highlight></codeline>
<codeline lineno="699"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64" kindref="member">AESCMAC_OperationCode</ref>;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="705" refid="_a_e_s_c_m_a_c_8h_1a073eaba0e9fb2c822065dcf3256b4a9e" refkind="member"><highlight class="preprocessor">#define<sp/>AESCMAC_OP_FLAG_SIGN<sp/>0x10<sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>4<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="_a_e_s_c_m_a_c_8h_1a5abf0f9750e2aee67dfcfaf57f9ddfbc" refkind="member"><highlight class="preprocessor">#define<sp/>AESCMAC_OP_FLAGS_MASK<sp/>(AESCMAC_OP_FLAG_SIGN<sp/>|<sp/>AESCMAC_OP_FLAG_VERIFY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="715" refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="717" refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a82ef82226f904674817d64bc9e120cf0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a82ef82226f904674817d64bc9e120cf0" kindref="member">AESCMAC_OP_TYPE_SIGN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64a960efb62599541f8c3f3bfe249c52093" kindref="member">AESCMAC_OP_CODE_ONE_STEP</ref><sp/>|<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a073eaba0e9fb2c822065dcf3256b4a9e" kindref="member">AESCMAC_OP_FLAG_SIGN</ref>,</highlight></codeline>
<codeline lineno="718" refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a5a063beb68806ff44ef3b5b9e900e45d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a5a063beb68806ff44ef3b5b9e900e45d" kindref="member">AESCMAC_OP_TYPE_VERIFY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64a960efb62599541f8c3f3bfe249c52093" kindref="member">AESCMAC_OP_CODE_ONE_STEP</ref>,</highlight></codeline>
<codeline lineno="719" refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a7aef02634ae85a5ecdf32e3549fcd536" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a7aef02634ae85a5ecdf32e3549fcd536" kindref="member">AESCMAC_OP_TYPE_SEGMENTED_SIGN</ref><sp/><sp/><sp/>=<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64ae5626683d890e6f927a686b5ee857902" kindref="member">AESCMAC_OP_CODE_SEGMENTED</ref><sp/>|<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a073eaba0e9fb2c822065dcf3256b4a9e" kindref="member">AESCMAC_OP_FLAG_SIGN</ref>,</highlight></codeline>
<codeline lineno="720" refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4afe83dda2e22eccebf42823d17047bba8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4afe83dda2e22eccebf42823d17047bba8" kindref="member">AESCMAC_OP_TYPE_SEGMENTED_VERIFY</ref><sp/>=<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64ae5626683d890e6f927a686b5ee857902" kindref="member">AESCMAC_OP_CODE_SEGMENTED</ref>,</highlight></codeline>
<codeline lineno="721" refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a467760efa59a29c7aedb4006ad5df30b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a467760efa59a29c7aedb4006ad5df30b" kindref="member">AESCMAC_OP_TYPE_FINALIZE_SIGN</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64a9f1a87b2cabf2b9becc191f39a873422" kindref="member">AESCMAC_OP_CODE_FINALIZE</ref><sp/>|<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a073eaba0e9fb2c822065dcf3256b4a9e" kindref="member">AESCMAC_OP_FLAG_SIGN</ref>,</highlight></codeline>
<codeline lineno="722" refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a2ed5f5574a90dc9ab7928d617e7fbe37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4a2ed5f5574a90dc9ab7928d617e7fbe37" kindref="member">AESCMAC_OP_TYPE_FINALIZE_VERIFY</ref><sp/><sp/>=<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a6d5400a5f108b8e6b265ec3e6dc2fb64a9f1a87b2cabf2b9becc191f39a873422" kindref="member">AESCMAC_OP_CODE_FINALIZE</ref></highlight></codeline>
<codeline lineno="723"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_m_a_c_8h_1ac55eeee495d245e33cd5461184af41a4" kindref="member">AESCMAC_OperationType</ref>;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="739" refid="_a_e_s_c_m_a_c_8h_1a8e592c44859616fb36f7f43e207721c5" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_a_e_s_c_m_a_c_8h_1a8e592c44859616fb36f7f43e207721c5" kindref="member">AESCMAC_CallbackFxn</ref>)(AESCMAC_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>returnValue,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref><sp/>*operation,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AESCMAC_OperationType<sp/>operationType);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="752" refid="struct_a_e_s_c_m_a_c___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal">{</highlight></codeline>
<codeline lineno="754" refid="struct_a_e_s_c_m_a_c___params_1a2177d01be77167728c26c4d6433517a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>AESCMAC_ReturnBehavior<sp/><ref refid="struct_a_e_s_c_m_a_c___params_1a2177d01be77167728c26c4d6433517a1" kindref="member">returnBehavior</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="755" refid="struct_a_e_s_c_m_a_c___params_1ad6b1d9da9e5f12222807a0e4194b2dc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1abaad4def712e02a8451f275575c2771c" kindref="member">AESCMAC_OperationalMode</ref><sp/><ref refid="struct_a_e_s_c_m_a_c___params_1ad6b1d9da9e5f12222807a0e4194b2dc8" kindref="member">operationalMode</ref>;<sp/></highlight></codeline>
<codeline lineno="756" refid="struct_a_e_s_c_m_a_c___params_1a93b0ceb6d7e250f4644d68723deb10f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_m_a_c_8h_1a8e592c44859616fb36f7f43e207721c5" kindref="member">AESCMAC_CallbackFxn</ref><sp/><ref refid="struct_a_e_s_c_m_a_c___params_1a93b0ceb6d7e250f4644d68723deb10f7" kindref="member">callbackFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="757" refid="struct_a_e_s_c_m_a_c___params_1a5bc6c156a5ce9b37f9c4859960888249" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_a_e_s_c_m_a_c___params_1a5bc6c156a5ce9b37f9c4859960888249" kindref="member">timeout</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="760" refid="struct_a_e_s_c_m_a_c___params_1a6db44b81a306d7f651792a0e1ac9422f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_a_e_s_c_m_a_c___params_1a6db44b81a306d7f651792a0e1ac9422f" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="763"><highlight class="normal">}<sp/><ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref>;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref><sp/><ref refid="_a_e_s_c_m_a_c_8h_1a699d7920a95aecb01b239a79dbafad69" kindref="member">AESCMAC_defaultParams</ref>;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_m_a_c_8h_1a0ac06b20096a85dae71a51a8afaa9f7b" kindref="member">AESCMAC_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_m_a_c_8h_1aa26eecc95d2e7346381ec0f25585808c" kindref="member">AESCMAC_Params_init</ref>(<ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_m_a_c_8h_1af007baaace0903303c5330c4e554b409" kindref="member">AESCMAC_Operation_init</ref>(<ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal">AESCMAC_Handle<sp/><ref refid="_a_e_s_c_m_a_c_8h_1aa151eddc42201ad06b62cfc0dd006c2b" kindref="member">AESCMAC_open</ref>(uint_least8_t<sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_m_a_c_8h_1a837dea72a78384727b499fa857b58769" kindref="member">AESCMAC_close</ref>(AESCMAC_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a66e34437c6d40bd66c5b9e18af915ce6" kindref="member">AESCMAC_setupSign</ref>(AESCMAC_Handle<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*key);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_m_a_c_8h_1ad94897df19ac49d838cddec8c9d3afcb" kindref="member">AESCMAC_setupVerify</ref>(AESCMAC_Handle<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*key);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_m_a_c_8h_1acfef9cc89f0b9aaa2b901314bae727f2" kindref="member">AESCMAC_addData</ref>(AESCMAC_Handle<sp/>handle,<sp/><ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a44bd04ec6b9bf7184d9dbf5bce223905" kindref="member">AESCMAC_finalize</ref>(AESCMAC_Handle<sp/>handle,<sp/><ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_m_a_c_8h_1af2a169d5e503f148313be4c6f4c4c510" kindref="member">AESCMAC_oneStepSign</ref>(AESCMAC_Handle<sp/>handle,<sp/><ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref><sp/>*operation,<sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*key);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_m_a_c_8h_1ad6a43d83bc6f5d20af3308a6216e82ae" kindref="member">AESCMAC_oneStepVerify</ref>(AESCMAC_Handle<sp/>handle,<sp/><ref refid="struct_a_e_s_c_m_a_c___operation" kindref="compound">AESCMAC_Operation</ref><sp/>*operation,<sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*key);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_m_a_c_8h_1a13efea02d256262dd655330eb204c96b" kindref="member">AESCMAC_cancelOperation</ref>(AESCMAC_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal">AESCMAC_Handle<sp/><ref refid="_a_e_s_c_m_a_c_8h_1adb2e43be898013e7704539b35fd1122b" kindref="member">AESCMAC_construct</ref>(AESCMAC_Config<sp/>*config,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_c_m_a_c___params" kindref="compound">AESCMAC_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_AESCMAC__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/AESCMAC.h"/>
  </compounddef>
</doxygen>
