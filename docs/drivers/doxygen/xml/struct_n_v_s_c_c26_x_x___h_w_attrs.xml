<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="struct_n_v_s_c_c26_x_x___h_w_attrs" kind="struct" language="C++" prot="public">
    <compoundname>NVSCC26XX_HWAttrs</compoundname>
    <includes refid="_n_v_s_c_c26_x_x_8h" local="no">NVSCC26XX.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_n_v_s_c_c26_x_x___h_w_attrs_1ad5ee322e543d49b4c177f28f4e96f884" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* NVSCC26XX_HWAttrs::regionBase</definition>
        <argsstring></argsstring>
        <name>regionBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The regionBase field specifies the base address of the on-chip flash memory to be managed. The regionBase must be aligned to the flash sector size. This memory cannot be shared and must be for exclusive use by one NVS driver instance. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/nvs/NVSCC26XX.h" line="298" column="1" bodyfile="source/ti/drivers/nvs/NVSCC26XX.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_n_v_s_c_c26_x_x___h_w_attrs_1ab479adbd1bbeb60a6849c4611d9f4941" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t NVSCC26XX_HWAttrs::regionSize</definition>
        <argsstring></argsstring>
        <name>regionSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The regionSize field specifies the overall size of the on-chip flash memory to be managed. The regionSize must be at least 1 flash sector size AND an integer multiple of the flash sector size. For most CC26XX/CC13XX devices, the flash sector size is 4096 bytes. The NVSCC26XX driver will determine the device&apos;s actual sector size by reading internal system configuration registers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/nvs/NVSCC26XX.h" line="305" column="1" bodyfile="source/ti/drivers/nvs/NVSCC26XX.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>NVSCC26XX hardware attributes. </para>    </briefdescription>
    <detaileddescription>
<para>The NVSCC26XX hardware attributes define hardware specific settings for a NVS driver instance.</para><para><simplesect kind="note"><para>Care must be taken to ensure that the linker does not place application content (such as .text or .const) in the flash regions defined by the this hardware attributes structure.</para></simplesect>
For CCS and IAR tools, defining and reserving flash memory regions can be done entirely within the ti_drivers_config.c file. For GCC, additional content is required in the application&apos;s linker script to achieve the same result.</para><para>The example below defines a char array <computeroutput>flashBuf</computeroutput>. Preprocessor logic is used so that this example will work with either the TI, IAR or GCC tools. For the TI and IAR tools, pragmas are used to place <computeroutput>flashBuf</computeroutput> at the flash location specified by <ref refid="struct_n_v_s_c_c26_x_x___h_w_attrs_1ad5ee322e543d49b4c177f28f4e96f884" kindref="member">NVSCC26XX_HWAttrs.regionBase</ref>.</para><para>For the GCC tool, the <computeroutput>flashBuf</computeroutput> array is placed into a named linker output section, <computeroutput></computeroutput>.nvs. This section is defined in the application&apos;s linker script. The section placement command is carefully chosen to only RESERVE space for the <computeroutput>flashBuf</computeroutput> array, and not to actually initialize it during the application load process, thus preserving the content of flash.</para><para>Regardless of tool chain, the <computeroutput>flashBuf</computeroutput> array in the example below is placed at the <computeroutput>NVS_REGIONS_BASE</computeroutput> address and has an overall size of <computeroutput>REGIONSIZE</computeroutput> bytes. Theoretically, the memory reserved by <computeroutput>flashBuf</computeroutput> can be divided into four separate regions, each having a size of <computeroutput>SECTORSIZE</computeroutput> bytes. Each region must always be aligned to the flash sector size, <computeroutput>SECTORSIZE</computeroutput>. This example below shows two regions defined.</para><para>An array of two <ref refid="struct_n_v_s_c_c26_x_x___h_w_attrs" kindref="compound">NVSCC26XX_HWAttrs</ref> structures is defined. Each index of this structure defines a region of on-chip flash memory. Both regions utilize memory reserved by the <computeroutput>flashBuf</computeroutput> array. The two regions do not overlap or share the same physical memory locations. The two regions do however exist adjacent to each other in physical memory. The first region is defined as starting at the <computeroutput>NVS_REGIONS_BASE</computeroutput> address and has a size equal to the flash sector size, as defined by <computeroutput>SECTORSIZE</computeroutput>. The second region is defined as starting at (NVS_REGIONS_BASE + SECTORSIZE), that is, the <computeroutput>NVS_REGIONS_BASE</computeroutput> address offset by <computeroutput>SECTORSIZE</computeroutput> bytes. The second region has a size equal to (3 * SECTORSIZE) bytes. These regions together fully occupy <computeroutput>REGIONSIZE</computeroutput> bytes of physical on-chip flash memory as reserved by the <computeroutput>flashBuf</computeroutput> array.</para><para><programlisting><codeline><highlight class="normal">#define<sp/>NVS_REGIONS_BASE<sp/>0x1B000</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SECTORSIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1000</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>REGIONSIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SECTORSIZE<sp/>*<sp/>4)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Reserve<sp/>flash<sp/>sectors<sp/>for<sp/>NVS<sp/>driver<sp/>use</highlight></codeline>
<codeline><highlight class="normal">//<sp/>by<sp/>placing<sp/>an<sp/>uninitialized<sp/>byte<sp/>array</highlight></codeline>
<codeline><highlight class="normal">//<sp/>at<sp/>the<sp/>desired<sp/>flash<sp/>address.</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">#if<sp/>defined(__TI_COMPILER_VERSION__)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>Place<sp/>uninitialized<sp/>array<sp/>at<sp/>FLASH_REGION_BASE</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">#pragma<sp/>LOCATION(flashBuf,<sp/>FLASH_REGION_BASE);</highlight></codeline>
<codeline><highlight class="normal">#pragma<sp/>NOINIT(flashBuf);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>flashBuf[REGIONSIZE];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#elif<sp/>defined(__IAR_SYSTEMS_ICC__)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>Place<sp/>uninitialized<sp/>array<sp/>at<sp/>FLASH_REGION_BASE</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">__no_init<sp/>char<sp/>flashBuf[REGIONSIZE]<sp/>@<sp/>FLASH_REGION_BASE;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#elif<sp/>defined(__GNUC__)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>Place<sp/>the<sp/>flash<sp/>buffers<sp/>in<sp/>the<sp/>.nvs<sp/>section<sp/>created<sp/>in<sp/>the<sp/>gcc<sp/>linker<sp/>file.</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>The<sp/>.nvs<sp/>section<sp/>enforces<sp/>alignment<sp/>on<sp/>a<sp/>sector<sp/>boundary<sp/>but<sp/>may</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>be<sp/>placed<sp/>anywhere<sp/>in<sp/>flash<sp/>memory.<sp/><sp/>If<sp/>desired<sp/>the<sp/>.nvs<sp/>section<sp/>can<sp/>be<sp/>set</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>to<sp/>a<sp/>fixed<sp/>address<sp/>by<sp/>changing<sp/>the<sp/>following<sp/>in<sp/>the<sp/>gcc<sp/>linker<sp/>file:</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>.nvs<sp/>(FIXED_FLASH_ADDR)<sp/>(NOLOAD)<sp/>:<sp/>AT<sp/>(FIXED_FLASH_ADDR)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(.nvs)</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>}<sp/>&gt;<sp/>REGION_TEXT</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">__attribute__<sp/>((section<sp/>(&quot;.nvs&quot;)))</highlight></codeline>
<codeline><highlight class="normal">char<sp/>flashBuf[REGIONSIZE];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">NVSCC26XX_HWAttrs<sp/>nvsCC26XXHWAttrs[2]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>region<sp/>0<sp/>is<sp/>1<sp/>flash<sp/>sector<sp/>in<sp/>length.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.regionBase<sp/>=<sp/>(void<sp/>*)flashBuf,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.regionSize<sp/>=<sp/>SECTORSIZE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>region<sp/>1<sp/>is<sp/>3<sp/>flash<sp/>sectors<sp/>in<sp/>length.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.regionBase<sp/>=<sp/>(void<sp/>*)(flashBuf<sp/>+<sp/>SECTORSIZE),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.regionSize<sp/>=<sp/>SECTORSIZE<sp/>*<sp/>3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Example GCC linker script file content. This example places an output section, <computeroutput></computeroutput>.nvs, at the memory address <computeroutput>0x1B000</computeroutput>. The <computeroutput>NOLOAD</computeroutput> directive is used so that this memory is not initialized during program load to the target.</para><para><programlisting><codeline><highlight class="normal">MEMORY</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH<sp/>(RX)<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ORIGIN<sp/>=<sp/>0x00000000,<sp/>LENGTH<sp/>=<sp/>0x0001ffa8</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FLASH_CCFG<sp/>(RX)<sp/>:<sp/>ORIGIN<sp/>=<sp/>0x0001ffa8,<sp/>LENGTH<sp/>=<sp/>0x00000058</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SRAM<sp/>(RWX)<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ORIGIN<sp/>=<sp/>0x20000000,<sp/>LENGTH<sp/>=<sp/>0x00005000</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">.nvs<sp/>(0x1b000)<sp/>(NOLOAD)<sp/>:<sp/>AT<sp/>(0x1b000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*(.nvs)</highlight></codeline>
<codeline><highlight class="normal">}<sp/>&gt;<sp/>REGION_TEXT</highlight></codeline>
</programlisting></para><para>If the write &quot;scoreboard&quot; is enabled, three new fields are added to the <ref refid="struct_n_v_s_c_c26_x_x___h_w_attrs" kindref="compound">NVSCC26XX_HWAttrs</ref> structure:<itemizedlist>
<listitem><para>scoreboard - a buffer provided by the application where each byte represents how many times a page has been written to. It is important that this buffer be large enough such that there is a byte for each page of memory in the NVS region. For example:<itemizedlist>
<listitem><para>64k NVS region</para></listitem><listitem><para>256 byte page size</para></listitem><listitem><para>64k / 256 = 256; the scoreboard buffer must be 256 bytes in length</para></listitem></itemizedlist>
</para></listitem><listitem><para>scoreboardSize - number of bytes in the scoreboard.</para></listitem><listitem><para>flashPageSize - number of bytes in a flash page (i.e. 128 or 256) </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="source/ti/drivers/nvs/NVSCC26XX.h" line="297" column="1" bodyfile="source/ti/drivers/nvs/NVSCC26XX.h" bodystart="296" bodyend="321"/>
    <listofallmembers>
      <member refid="struct_n_v_s_c_c26_x_x___h_w_attrs_1ad5ee322e543d49b4c177f28f4e96f884" prot="public" virt="non-virtual"><scope>NVSCC26XX_HWAttrs</scope><name>regionBase</name></member>
      <member refid="struct_n_v_s_c_c26_x_x___h_w_attrs_1ab479adbd1bbeb60a6849c4611d9f4941" prot="public" virt="non-virtual"><scope>NVSCC26XX_HWAttrs</scope><name>regionSize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
