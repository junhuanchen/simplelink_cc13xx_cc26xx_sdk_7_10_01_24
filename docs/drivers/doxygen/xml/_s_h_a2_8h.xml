<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_s_h_a2_8h" kind="file" language="C++">
    <compoundname>SHA2.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="_crypto_key_8h" local="no">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</includes>
    <includedby refid="_e_d_d_s_a_c_c26_x2_8h" local="no">EDDSACC26X2.h</includedby>
    <includedby refid="_s_h_a2_c_c26_x1_8h" local="no">SHA2CC26X1.h</includedby>
    <includedby refid="_s_h_a2_c_c26_x2_8h" local="no">SHA2CC26X2.h</includedby>
    <includedby refid="_s_h_a2_c_c26_x4__ns_8h" local="no">SHA2CC26X4_ns.h</includedby>
    <includedby refid="_s_h_a2_c_c26_x4__s_8h" local="no">SHA2CC26X4_s.h</includedby>
    <incdepgraph>
      <node id="1291">
        <label>stdbool.h</label>
      </node>
      <node id="1293">
        <label>stdint.h</label>
      </node>
      <node id="1294">
        <label>ti/drivers/cryptoutils/cryptokey/CryptoKey.h</label>
        <link refid="_crypto_key_8h"/>
        <childnode refid="1293" relation="include">
        </childnode>
        <childnode refid="1291" relation="include">
        </childnode>
      </node>
      <node id="1292">
        <label>stddef.h</label>
      </node>
      <node id="1290">
        <label>SHA2.h</label>
        <link refid="_s_h_a2_8h"/>
        <childnode refid="1291" relation="include">
        </childnode>
        <childnode refid="1292" relation="include">
        </childnode>
        <childnode refid="1293" relation="include">
        </childnode>
        <childnode refid="1294" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1297">
        <label>SHA2CC26X1.h</label>
        <link refid="_s_h_a2_c_c26_x1_8h"/>
      </node>
      <node id="1300">
        <label>SHA2CC26X4_s.h</label>
        <link refid="_s_h_a2_c_c26_x4__s_8h"/>
      </node>
      <node id="1298">
        <label>SHA2CC26X2.h</label>
        <link refid="_s_h_a2_c_c26_x2_8h"/>
        <childnode refid="1296" relation="include">
        </childnode>
      </node>
      <node id="1295">
        <label>SHA2.h</label>
        <link refid="_s_h_a2_8h"/>
        <childnode refid="1296" relation="include">
        </childnode>
        <childnode refid="1297" relation="include">
        </childnode>
        <childnode refid="1298" relation="include">
        </childnode>
        <childnode refid="1299" relation="include">
        </childnode>
        <childnode refid="1300" relation="include">
        </childnode>
      </node>
      <node id="1299">
        <label>SHA2CC26X4_ns.h</label>
        <link refid="_s_h_a2_c_c26_x4__ns_8h"/>
      </node>
      <node id="1296">
        <label>EDDSACC26X2.h</label>
        <link refid="_e_d_d_s_a_c_c26_x2_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_s_h_a2___config" prot="public">SHA2_Config</innerclass>
    <innerclass refid="struct_s_h_a2___params" prot="public">SHA2_Params</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_s_h_a2_8h_1af86590d86ab05868e5d9768a53864c51" prot="public" static="no">
        <name>SHA2_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common SHA2 status code reservation offset. SHA2 driver implementations should offset status codes with SHA2_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>SHA2XYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>SHA2_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SHA2XYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>SHA2_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SHA2XYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>SHA2_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="306" column="9" bodyfile="source/ti/drivers/SHA2.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_h_a2_8h_1af830601fb3cebbf96c405ca6f1cbbc79" prot="public" static="no">
        <name>SHA2_STATUS_SUCCESS</name>
        <initializer>((int_fast16_t)0)</initializer>
        <briefdescription>
<para>Successful status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return SHA2_STATUS_SUCCESS if the function was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="314" column="9" bodyfile="source/ti/drivers/SHA2.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_h_a2_8h_1af9c9e8e3c5044c83eefdaef9063860a0" prot="public" static="no">
        <name>SHA2_STATUS_ERROR</name>
        <initializer>((int_fast16_t)-1)</initializer>
        <briefdescription>
<para>Generic error status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return SHA2_STATUS_ERROR if the function was not executed successfully and no more specific error is applicable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="322" column="9" bodyfile="source/ti/drivers/SHA2.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_h_a2_8h_1a79f870938f2275ff40d9a923839baba9" prot="public" static="no">
        <name>SHA2_STATUS_RESOURCE_UNAVAILABLE</name>
        <initializer>((int_fast16_t)-2)</initializer>
        <briefdescription>
<para>An error status code returned if the hardware or software resource is currently unavailable. </para>        </briefdescription>
        <detaileddescription>
<para>SHA2 driver implementations may have hardware or software limitations on how many clients can simultaneously perform operations. This status code is returned if the mutual exclusion mechanism signals that an operation cannot currently be performed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="332" column="9" bodyfile="source/ti/drivers/SHA2.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_h_a2_8h_1a233fd6c6912964d0a4918075081c08c2" prot="public" static="no">
        <name>SHA2_STATUS_CANCELED</name>
        <initializer>((int_fast16_t)-3)</initializer>
        <briefdescription>
<para>The ongoing operation was canceled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="337" column="9" bodyfile="source/ti/drivers/SHA2.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_h_a2_8h_1a06da8bd4bcbf98f38bd0ef7c11f60d04" prot="public" static="no">
        <name>SHA2_STATUS_UNSUPPORTED</name>
        <initializer>((int_fast16_t)-4)</initializer>
        <briefdescription>
<para>The requested operation or configuration is not supported by the device specific implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="343" column="9" bodyfile="source/ti/drivers/SHA2.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_h_a2_8h_1ac9687f3fc42f455c8fa4c12c259599f0" prot="public" static="no">
        <name>SHA2_STATUS_KEYSTORE_ERROR</name>
        <initializer>((int_fast16_t)-5)</initializer>
        <briefdescription>
<para>Importing generated key into KeyStore failed. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return SHA2_STATUS_KEYSTORE_ERROR if the <ref refid="_crypto_key_key_store___p_s_a_8h_1aa9425eeaa708cf28b9101c34a152ec36" kindref="member">KeyStore_PSA_importKey()</ref> did not return KEYSTORE_PSA_STATUS_SUCCESS </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="351" column="9" bodyfile="source/ti/drivers/SHA2.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58" prot="public" static="no">
        <name>SHA2_ReturnBehavior</name>
        <enumvalue id="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a24089a94926440a2b1ef80f2f12a6eea" prot="public">
          <name>SHA2_RETURN_BEHAVIOR_CALLBACK</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will return immediately while the SHA2 operation goes on in the background. The registered callback function is called after the operation completes. The context the callback function is called (task, HWI, SWI) is implementation-dependent. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a1886f2611fbf1ec1c64b32b3308ca6e4" prot="public">
          <name>SHA2_RETURN_BEHAVIOR_BLOCKING</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will block while the SHA2 operation goes on in the background. SHA2 operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58acb21dfa07af8bd9ea8b69e3821f14bc4" prot="public">
          <name>SHA2_RETURN_BEHAVIOR_POLLING</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will continuously poll a flag while the SHA2 operation goes on in the background. SHA2 operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The way in which SHA2 function calls return after performing an operation. </para>        </briefdescription>
        <detaileddescription>
<para>Not all SHA2 operations exhibit the specified return behavior. Functions that do not require significant computation and cannot offload that computation to a background thread behave like regular functions. Which functions exhibit the specified return behavior is not implementation dependent. Specifically, a software-backed implementation run on the same CPU as the application will emulate the return behavior while not actually offloading the computation to the background thread.</para><para>SHA2 functions exhibiting the specified return behavior have restrictions on the context from which they may be called.</para><para><table rows="4" cols="4"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Task </para></entry><entry thead="yes"><para>Hwi </para></entry><entry thead="yes"><para>Swi  </para></entry></row>
<row>
<entry thead="no"><para>SHA2_RETURN_BEHAVIOR_CALLBACK </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
<row>
<entry thead="no"><para>SHA2_RETURN_BEHAVIOR_BLOCKING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>SHA2_RETURN_BEHAVIOR_POLLING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="375" column="1" bodyfile="source/ti/drivers/SHA2.h" bodystart="374" bodyend="390"/>
      </memberdef>
      <memberdef kind="enum" id="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29" prot="public" static="no">
        <name>SHA2_HashType</name>
        <enumvalue id="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29ac04c761878b57de09ecd0a15f18216c5" prot="public">
          <name>SHA2_HASH_TYPE_224</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29afb54f73866a407de412f1612deba102e" prot="public">
          <name>SHA2_HASH_TYPE_256</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29aa2a402addbc8c70d1cf8eda44e5ea0eb" prot="public">
          <name>SHA2_HASH_TYPE_384</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29a95382db804c412fd6ad3d86aaf743f3d" prot="public">
          <name>SHA2_HASH_TYPE_512</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for the hash types supported by the driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="396" column="1" bodyfile="source/ti/drivers/SHA2.h" bodystart="395" bodyend="401"/>
      </memberdef>
      <memberdef kind="enum" id="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253d" prot="public" static="no">
        <name>SHA2_DigestLengthBytes</name>
        <enumvalue id="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253daa5d0d0cca946f78996634d3e0cd1e1f6" prot="public">
          <name>SHA2_DIGEST_LENGTH_BYTES_224</name>
          <initializer>= 28</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253da485865fb1d5fd1dd0d79ac98c2d6eedf" prot="public">
          <name>SHA2_DIGEST_LENGTH_BYTES_256</name>
          <initializer>= 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253da8d406e8f97117db168ec92ff25be9a80" prot="public">
          <name>SHA2_DIGEST_LENGTH_BYTES_384</name>
          <initializer>= 48</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253dac9cfb34c079c68dc42e945d15183ab8b" prot="public">
          <name>SHA2_DIGEST_LENGTH_BYTES_512</name>
          <initializer>= 64</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for the hash digest lengths in bytes supported by the driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="407" column="1" bodyfile="source/ti/drivers/SHA2.h" bodystart="406" bodyend="412"/>
      </memberdef>
      <memberdef kind="enum" id="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0" prot="public" static="no">
        <name>SHA2_BlockSizeBytes</name>
        <enumvalue id="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0a02b165a6d502cb6bfc35a4718a52f25a" prot="public">
          <name>SHA2_BLOCK_SIZE_BYTES_224</name>
          <initializer>= 64</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0a37bd6cb465e5a0c77c15933525f25103" prot="public">
          <name>SHA2_BLOCK_SIZE_BYTES_256</name>
          <initializer>= 64</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0ac41032a24580877dd5c1be886d75a897" prot="public">
          <name>SHA2_BLOCK_SIZE_BYTES_384</name>
          <initializer>= 128</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0a8ba20289cd607ae3b078487c5111833a" prot="public">
          <name>SHA2_BLOCK_SIZE_BYTES_512</name>
          <initializer>= 128</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for the block sizes of the algorithms. </para>        </briefdescription>
        <detaileddescription>
<para>SHA2 iteratively consumes segments of the block size and computes intermediate digests which are fed back into the algorithm together with the next segment to compute the next intermediate or final digest. The block sizes of the algorithms differ from their digest lengths. When performing partial hashes, the segment lengths for all but the last segment must be multiples of the relevant block size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="428" column="1" bodyfile="source/ti/drivers/SHA2.h" bodystart="427" bodyend="433"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" prot="public" static="no">
        <type><ref refid="struct_s_h_a2___config" kindref="compound">SHA2_Config</ref> *</type>
        <definition>typedef SHA2_Config* SHA2_Handle</definition>
        <argsstring></argsstring>
        <name>SHA2_Handle</name>
        <briefdescription>
<para>A handle that is returned from an <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="458" column="1" bodyfile="source/ti/drivers/SHA2.h" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_h_a2_8h_1a4a605367d5d35ab77de06dcb9f54c921" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* SHA2_CallbackFxn) (SHA2_Handle handle, int_fast16_t returnStatus)</definition>
        <argsstring>)(SHA2_Handle handle, int_fast16_t returnStatus)</argsstring>
        <name>SHA2_CallbackFxn</name>
        <briefdescription>
<para>The definition of a callback function used by the SHA2 driver when used in <ref refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a24089a94926440a2b1ef80f2f12a6eea" kindref="member">SHA2_RETURN_BEHAVIOR_CALLBACK</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the client that started the SHA2 operation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of the SHA2 operation. May contain an error code. Informs the application of why the callback function was called. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="470" column="1" bodyfile="source/ti/drivers/SHA2.h" bodystart="470" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_s_h_a2_8h_1aa8005577cc49a5805d5e123395b74185" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_s_h_a2___config" kindref="compound">SHA2_Config</ref></type>
        <definition>const SHA2_Config SHA2_config[]</definition>
        <argsstring>[]</argsstring>
        <name>SHA2_config</name>
        <briefdescription>
<para>Global SHA2 configuration struct. </para>        </briefdescription>
        <detaileddescription>
<para>Specifies context objects and hardware attributes for every driver instance.</para><para>This variable is supposed to be defined in the board file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_s_h_a2_8h_1a0bbbbf10608e8b702cd04166617903b2" prot="public" static="no" mutable="no">
        <type>const uint_least8_t</type>
        <definition>const uint_least8_t SHA2_count</definition>
        <argsstring></argsstring>
        <name>SHA2_count</name>
        <briefdescription>
<para>Global SHA2 configuration count. </para>        </briefdescription>
        <detaileddescription>
<para>Specifies the amount of available SHA2 driver instances.</para><para>This variable is supposed to be defined in the board file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_s_h_a2_8h_1a2bc55a3d74a3fecd6f00d498bce96f26" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref></type>
        <definition>const SHA2_Params SHA2_defaultParams</definition>
        <argsstring></argsstring>
        <name>SHA2_defaultParams</name>
        <briefdescription>
<para>Default <ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="_s_h_a2_8h_1a35012f3a93e7a6f7252c53ae31d28aed" kindref="member">SHA2_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="516" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_s_h_a2_8h_1a52bac540341a588612f9e375cc504439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SHA2_init</definition>
        <argsstring>(void)</argsstring>
        <name>SHA2_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initializes the SHA2 driver module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The <ref refid="_s_h_a2_8h_1aa8005577cc49a5805d5e123395b74185" kindref="member">SHA2_config</ref> structure must exist and be persistent before this function can be called. This function must also be called before any other SHA2 driver APIs. This function call does not modify any peripheral registers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1a35012f3a93e7a6f7252c53ae31d28aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SHA2_Params_init</definition>
        <argsstring>(SHA2_Params *params)</argsstring>
        <name>SHA2_Params_init</name>
        <param>
          <type><ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initializes <emphasis>params</emphasis> with default values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: returnBehavior = SHA2_RETURN_BEHAVIOR_BLOCKING callbackFxn = NULL timeout = SemaphoreP_WAIT_FOREVER custom = NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="540" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref></type>
        <definition>SHA2_Handle SHA2_open</definition>
        <argsstring>(uint_least8_t index, const SHA2_Params *params)</argsstring>
        <name>SHA2_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Initializes a SHA2 driver instance and returns a handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>SHA2 controller has been initialized using <ref refid="_s_h_a2_8h_1a52bac540341a588612f9e375cc504439" kindref="member">SHA2_init()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the SHA2 indexed into the <ref refid="_s_h_a2_8h_1aa8005577cc49a5805d5e123395b74185" kindref="member">SHA2_config</ref> table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a parameter block, if NULL it will use default values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref> on success or a NULL on an error or if it has been opened already.</para></simplesect>
<simplesect kind="see"><para><ref refid="_s_h_a2_8h_1a52bac540341a588612f9e375cc504439" kindref="member">SHA2_init()</ref>, <ref refid="_s_h_a2_8h_1a57cfbb0eecdf3449cbfa4e2dcb471dd4" kindref="member">SHA2_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1a57cfbb0eecdf3449cbfa4e2dcb471dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SHA2_close</definition>
        <argsstring>(SHA2_Handle handle)</argsstring>
        <name>SHA2_close</name>
        <param>
          <type><ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Closes a SHA2 peripheral specified by <emphasis>handle</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref> returned from <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1aca3ffba8d483059a9450b6f82ea47f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t SHA2_setupHmac</definition>
        <argsstring>(SHA2_Handle handle, CryptoKey *key)</argsstring>
        <name>SHA2_setupHmac</name>
        <param>
          <type><ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Starts an HMAC operation on segmented data. </para>        </briefdescription>
        <detaileddescription>
<para>This function uses <computeroutput>key</computeroutput> to compute the all intermediate results involving <computeroutput>key</computeroutput> as specified in FIPS 198-1.</para><para>This function blocks until the final digest hash been computed. It returns immediately when <ref refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a24089a94926440a2b1ef80f2f12a6eea" kindref="member">SHA2_RETURN_BEHAVIOR_CALLBACK</ref> is set.</para><para><simplesect kind="pre"><para><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref> has to be called first.</para></simplesect>
<simplesect kind="post"><para>Call <ref refid="_s_h_a2_8h_1ac5155c684c254a894ea06f4cd5290990" kindref="member">SHA2_addData()</ref> and <ref refid="_s_h_a2_8h_1a58452ce797e26bcf69aab03d8cc07ffb" kindref="member">SHA2_finalizeHmac()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref> returned from <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key with which to sign the message with</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af830601fb3cebbf96c405ca6f1cbbc79" kindref="member">SHA2_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af9c9e8e3c5044c83eefdaef9063860a0" kindref="member">SHA2_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1a79f870938f2275ff40d9a923839baba9" kindref="member">SHA2_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1a233fd6c6912964d0a4918075081c08c2" kindref="member">SHA2_STATUS_CANCELED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation was canceled.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_s_h_a2_8h_1ab56e3f36e56ffb06c2c8aaa7528ac321" kindref="member">SHA2_reset()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="597" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1ac5155c684c254a894ea06f4cd5290990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t SHA2_addData</definition>
        <argsstring>(SHA2_Handle handle, const void *data, size_t length)</argsstring>
        <name>SHA2_addData</name>
        <param>
          <type><ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Adds a segment of <computeroutput>data</computeroutput> with a <computeroutput>length</computeroutput> in bytes to the cryptographic hash or HMAC. </para>        </briefdescription>
        <detaileddescription>
<para>SHA2_addData() may be called arbitrary times before finishing the operation with <ref refid="_s_h_a2_8h_1ae8e6a9aa91a05977f2db52ba67ee80da" kindref="member">SHA2_finalize()</ref>.</para><para>This function blocks until the final digest hash been computed. It returns immediately when <ref refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a24089a94926440a2b1ef80f2f12a6eea" kindref="member">SHA2_RETURN_BEHAVIOR_CALLBACK</ref> is set.</para><para><simplesect kind="pre"><para><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref> has to be called first. </para></simplesect>
<simplesect kind="pre"><para>If computing an HMAC, <ref refid="_s_h_a2_8h_1aca3ffba8d483059a9450b6f82ea47f38" kindref="member">SHA2_setupHmac()</ref> must be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref> returned from <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location to read from. There might be alignment restrictions on different platforms.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the message segment to hash, in bytes.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af830601fb3cebbf96c405ca6f1cbbc79" kindref="member">SHA2_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af9c9e8e3c5044c83eefdaef9063860a0" kindref="member">SHA2_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1a79f870938f2275ff40d9a923839baba9" kindref="member">SHA2_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1a233fd6c6912964d0a4918075081c08c2" kindref="member">SHA2_STATUS_CANCELED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation was canceled.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref>, <ref refid="_s_h_a2_8h_1ab56e3f36e56ffb06c2c8aaa7528ac321" kindref="member">SHA2_reset()</ref>, <ref refid="_s_h_a2_8h_1ae8e6a9aa91a05977f2db52ba67ee80da" kindref="member">SHA2_finalize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="630" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1ae8e6a9aa91a05977f2db52ba67ee80da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t SHA2_finalize</definition>
        <argsstring>(SHA2_Handle handle, void *digest)</argsstring>
        <name>SHA2_finalize</name>
        <param>
          <type><ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>digest</declname>
        </param>
        <briefdescription>
<para>Finishes a hash operation and writes the result to <emphasis>digest</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This function finishes a hash operation that has been previously started by <ref refid="_s_h_a2_8h_1ac5155c684c254a894ea06f4cd5290990" kindref="member">SHA2_addData()</ref>.</para><para>This function blocks until the final digest hash been computed. It returns immediately when <ref refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a24089a94926440a2b1ef80f2f12a6eea" kindref="member">SHA2_RETURN_BEHAVIOR_CALLBACK</ref> is set.</para><para><simplesect kind="pre"><para><ref refid="_s_h_a2_8h_1ac5155c684c254a894ea06f4cd5290990" kindref="member">SHA2_addData()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref> returned from <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location to write the digest to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af830601fb3cebbf96c405ca6f1cbbc79" kindref="member">SHA2_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af9c9e8e3c5044c83eefdaef9063860a0" kindref="member">SHA2_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1a79f870938f2275ff40d9a923839baba9" kindref="member">SHA2_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1a233fd6c6912964d0a4918075081c08c2" kindref="member">SHA2_STATUS_CANCELED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation was canceled.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref>, <ref refid="_s_h_a2_8h_1ac5155c684c254a894ea06f4cd5290990" kindref="member">SHA2_addData()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1a58452ce797e26bcf69aab03d8cc07ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t SHA2_finalizeHmac</definition>
        <argsstring>(SHA2_Handle handle, void *hmac)</argsstring>
        <name>SHA2_finalizeHmac</name>
        <param>
          <type><ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>hmac</declname>
        </param>
        <briefdescription>
<para>Finishes an HMAC operation and writes the result to <computeroutput>hmac</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This function finishes a an HMAC operation that has been previously started by <ref refid="_s_h_a2_8h_1aca3ffba8d483059a9450b6f82ea47f38" kindref="member">SHA2_setupHmac()</ref> and <ref refid="_s_h_a2_8h_1ac5155c684c254a894ea06f4cd5290990" kindref="member">SHA2_addData()</ref>.</para><para>This function blocks until the final digest hash been computed. It returns immediately when <ref refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a24089a94926440a2b1ef80f2f12a6eea" kindref="member">SHA2_RETURN_BEHAVIOR_CALLBACK</ref> is set.</para><para><simplesect kind="pre"><para><ref refid="_s_h_a2_8h_1aca3ffba8d483059a9450b6f82ea47f38" kindref="member">SHA2_setupHmac()</ref> must be called prior. </para></simplesect>
<simplesect kind="pre"><para><ref refid="_s_h_a2_8h_1ac5155c684c254a894ea06f4cd5290990" kindref="member">SHA2_addData()</ref> should be called after <ref refid="_s_h_a2_8h_1aca3ffba8d483059a9450b6f82ea47f38" kindref="member">SHA2_setupHmac()</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref> returned from <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hmac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location to write the digest to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af830601fb3cebbf96c405ca6f1cbbc79" kindref="member">SHA2_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af9c9e8e3c5044c83eefdaef9063860a0" kindref="member">SHA2_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1a79f870938f2275ff40d9a923839baba9" kindref="member">SHA2_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1a233fd6c6912964d0a4918075081c08c2" kindref="member">SHA2_STATUS_CANCELED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation was canceled.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref>, <ref refid="_s_h_a2_8h_1aca3ffba8d483059a9450b6f82ea47f38" kindref="member">SHA2_setupHmac()</ref> <ref refid="_s_h_a2_8h_1ac5155c684c254a894ea06f4cd5290990" kindref="member">SHA2_addData()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="683" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1aed1e81b4864ed62d3f0532efc353d790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t SHA2_hashData</definition>
        <argsstring>(SHA2_Handle handle, const void *data, size_t dataLength, void *digest)</argsstring>
        <name>SHA2_hashData</name>
        <param>
          <type><ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dataLength</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>digest</declname>
        </param>
        <briefdescription>
<para>Hashes a segment of <emphasis>data</emphasis> with a <emphasis>size</emphasis> in bytes and writes the resulting hash to <emphasis>digest</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The digest content is computed in one step. Intermediate data from a previous partial operation started with <ref refid="_s_h_a2_8h_1ac5155c684c254a894ea06f4cd5290990" kindref="member">SHA2_addData()</ref> is discarded.</para><para>This function blocks until the final digest hash been computed. It returns immediately when <ref refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a24089a94926440a2b1ef80f2f12a6eea" kindref="member">SHA2_RETURN_BEHAVIOR_CALLBACK</ref> is set.</para><para><simplesect kind="pre"><para><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref> returned from <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location to read from. There might be alignment restrictions on different platforms.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the message <computeroutput>data</computeroutput>, in bytes.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location to write the digest to. There might be alignment restrictions on different platforms.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af830601fb3cebbf96c405ca6f1cbbc79" kindref="member">SHA2_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af9c9e8e3c5044c83eefdaef9063860a0" kindref="member">SHA2_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1a79f870938f2275ff40d9a923839baba9" kindref="member">SHA2_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1a233fd6c6912964d0a4918075081c08c2" kindref="member">SHA2_STATUS_CANCELED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation was canceled.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="718" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1a7d4736ba2fed1a83ec9bb5feb1fb9f6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t SHA2_hmac</definition>
        <argsstring>(SHA2_Handle handle, CryptoKey *key, const void *data, size_t dataLength, void *hmac)</argsstring>
        <name>SHA2_hmac</name>
        <param>
          <type><ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dataLength</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>hmac</declname>
        </param>
        <briefdescription>
<para>Creates a keyed hash of <computeroutput>data</computeroutput> with <computeroutput>key</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This function signs <computeroutput>data</computeroutput> using <computeroutput>key</computeroutput> using the keyed-hash message authentication code (HMAC) algorithm specified in FIPS 198-1.</para><para>This function expects all of <computeroutput>data</computeroutput> to be available in contiguous memory.</para><para>Intermediate data from a previous partial operation started with <ref refid="_s_h_a2_8h_1ac5155c684c254a894ea06f4cd5290990" kindref="member">SHA2_addData()</ref> is discarded.</para><para>This function blocks until the final digest hash been computed. It returns immediately when <ref refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a24089a94926440a2b1ef80f2f12a6eea" kindref="member">SHA2_RETURN_BEHAVIOR_CALLBACK</ref> is set.</para><para><simplesect kind="pre"><para><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref> returned from <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key with which <computeroutput>data</computeroutput> is signed</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location to read from. There might be alignment restrictions on different platforms.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the message <computeroutput>data</computeroutput>, in bytes.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hmac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location to write the HMAC to. There might be alignment restrictions on different platforms.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af830601fb3cebbf96c405ca6f1cbbc79" kindref="member">SHA2_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af9c9e8e3c5044c83eefdaef9063860a0" kindref="member">SHA2_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The hash operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1a79f870938f2275ff40d9a923839baba9" kindref="member">SHA2_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="756" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1ab56e3f36e56ffb06c2c8aaa7528ac321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SHA2_reset</definition>
        <argsstring>(SHA2_Handle handle)</argsstring>
        <name>SHA2_reset</name>
        <param>
          <type><ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Clears internal buffers and aborts an ongoing SHA2 operation. </para>        </briefdescription>
        <detaileddescription>
<para>Clears all internal buffers and the intermediate digest of this driver instance. If an asynchronous operation is ongoing, the behavior is the same as for <ref refid="_s_h_a2_8h_1a8274ea547e11bfe8e9d406f646ad0432" kindref="member">SHA2_cancelOperation()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref> returned from <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_s_h_a2_8h_1a8274ea547e11bfe8e9d406f646ad0432" kindref="member">SHA2_cancelOperation()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="769" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1a8274ea547e11bfe8e9d406f646ad0432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t SHA2_cancelOperation</definition>
        <argsstring>(SHA2_Handle handle)</argsstring>
        <name>SHA2_cancelOperation</name>
        <param>
          <type><ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Aborts an ongoing SHA2 operation and clears internal buffers. </para>        </briefdescription>
        <detaileddescription>
<para>Aborts an ongoing hash operation of this driver instance. The operation will terminate as though an error occurred and the status code of the operation will be <ref refid="_s_h_a2_8h_1a233fd6c6912964d0a4918075081c08c2" kindref="member">SHA2_STATUS_CANCELED</ref> in this case.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref> returned from <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af830601fb3cebbf96c405ca6f1cbbc79" kindref="member">SHA2_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was canceled or there was no operation in progress to be canceled. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="783" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1a46075b17a244bac1b9123559da37f6f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t SHA2_setHashType</definition>
        <argsstring>(SHA2_Handle handle, SHA2_HashType type)</argsstring>
        <name>SHA2_setHashType</name>
        <param>
          <type><ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29" kindref="member">SHA2_HashType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Selects a new hash algorithm <emphasis>type</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This function changes the hash algorithm type of the hash digest at run-time. The hash type is usually specified during <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref>.</para><para>Neither is it allowed to call this function during a running hash operation nor during an incomplete multi-step hash operation. In this case <ref refid="_s_h_a2_8h_1af9c9e8e3c5044c83eefdaef9063860a0" kindref="member">SHA2_STATUS_ERROR</ref> would be returned.</para><para><simplesect kind="pre"><para><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref> returned from <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>New hash algorithm type</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af830601fb3cebbf96c405ca6f1cbbc79" kindref="member">SHA2_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Hash type set correctly. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_s_h_a2_8h_1af9c9e8e3c5044c83eefdaef9063860a0" kindref="member">SHA2_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Error. Platform may not support this hash type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="804" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_s_h_a2_8h_1a954040f0843fafbee57fa7589207ef00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref></type>
        <definition>SHA2_Handle SHA2_construct</definition>
        <argsstring>(SHA2_Config *config, const SHA2_Params *params)</argsstring>
        <name>SHA2_construct</name>
        <param>
          <type><ref refid="struct_s_h_a2___config" kindref="compound">SHA2_Config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const <ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Constructs a new SHA2 object. </para>        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref>, <ref refid="_s_h_a2_8h_1a954040f0843fafbee57fa7589207ef00" kindref="member">SHA2_construct()</ref> does not require the hwAttrs and object to be allocated in a <ref refid="struct_s_h_a2___config" kindref="compound">SHA2_Config</ref> array that is indexed into. Instead, the <ref refid="struct_s_h_a2___config" kindref="compound">SHA2_Config</ref>, hwAttrs, and object can be allocated at any location. This allows for relatively simple run-time allocation of temporary driver instances on the stack or the heap. The drawback is that this makes it more difficult to write device-agnostic code. If you use an ifdef with DeviceFamily, you can choose the correct object and hwAttrs to allocate. That compilation unit will be tied to the device it was compiled for at this point. To change devices, recompilation of the application with a different DeviceFamily setting is necessary.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_s_h_a2___config" kindref="compound">SHA2_Config</ref> describing the location of the object and hwAttrs.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref> to configure the driver instance.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a <ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref> on success or NULL on failure.</para></simplesect>
<simplesect kind="pre"><para>The object struct <computeroutput>config</computeroutput> points to must be zeroed out prior to calling this function. Otherwise, unexpected behavior may ensue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/SHA2.h" line="829" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>SHA2 driver header. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_s_h_a2_8h_1ti_drivers_SHA2_Overview"/><heading level="1">Overview</heading>
</para><para>SHA2 (Secure Hash Algorithm 2) is a cryptographic hashing algorithm that maps an input of arbitrary length to a fixed-length output with negligible probability of collision. A collision would occur when two different inputs map to the same output.</para><para>It is not currently technologically feasible to derive an input from the hash digest (output) itself.</para><para>Hashes are often used to ensure the integrity of messages. They are also used to as constituent parts of more complicated cryptographic schemes. HMAC is a message authentication code that is based on hash functions such as SHA2 rather than a block cipher. Hashes may themselves be used as or form a part of key derivation functions used to derive symmetric keys from sources of entropy such as an Elliptic Curve Diffie-Helman key exchange (ECDH).</para><para>SHA2 is not actually a single algorithm, but a suite of similar algorithms that produce hash digests of different lengths. 224, 256, 384, and 512-bit outputs are available.</para><para>&quot;Hash&quot; may refer to either the process of hashing when used as a verb and the output digest when used as a noun.</para><para><anchor id="_s_h_a2_8h_1ti_drivers_SHA2_Usage"/><heading level="1">Usage</heading>
</para><para>Before starting a SHA2 operation, the application must do the following:<itemizedlist>
<listitem><para>Call <ref refid="_s_h_a2_8h_1a52bac540341a588612f9e375cc504439" kindref="member">SHA2_init()</ref> to initialize the driver</para></listitem><listitem><para>Call <ref refid="_s_h_a2_8h_1a35012f3a93e7a6f7252c53ae31d28aed" kindref="member">SHA2_Params_init()</ref> to initialize the <ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref> to default values.</para></listitem><listitem><para>Modify the <ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref> as desired</para></listitem><listitem><para>Call <ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open()</ref> to open an instance of the driver</para></listitem></itemizedlist>
</para><para>There are two general ways to execute a SHA2 operation:</para><para><itemizedlist>
<listitem><para>one-step (in one operation)</para></listitem><listitem><para>multi-step (multiple partial operations)</para></listitem></itemizedlist>
</para><para><anchor id="_s_h_a2_8h_1ti_drivers_SHA2_Synopsis"/><heading level="1">Synopsis</heading>
</para><para><anchor id="_s_h_a2_8h_1ti_drivers_SHA2_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>SHA2<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/SHA2.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Define<sp/>name<sp/>for<sp/>SHA2<sp/>channel<sp/>index</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SHA2_INSTANCE<sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SHA2_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>SHA2_open(SHA2_INSTANCE,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>SHA2_hashData(handle,<sp/>message,<sp/>strlen(message),<sp/>actualDigest);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SHA2_close(handle);</highlight></codeline>
</programlisting></para><para><anchor id="_s_h_a2_8h_1ti_drivers_SHA2_Examples"/><heading level="1">Examples</heading>
</para><para><heading level="2">One-step hash operation</heading>
</para><para>The <ref refid="_s_h_a2_8h_1aed1e81b4864ed62d3f0532efc353d790" kindref="member">SHA2_hashData()</ref> function can perform a SHA2 operation in a single call. It will always use the most highly optimized routine with the least overhead and the fastest runtime. However, it requires that the entire input message is available to the function in a contiguous location at the start of the call. The single call operation is required when hashing a message with a length smaller than or equal to one hash-block length. All devices support single call operations.</para><para>After a SHA2 operation completes, the application may either start another operation or close the driver by calling <ref refid="_s_h_a2_8h_1a57cfbb0eecdf3449cbfa4e2dcb471dd4" kindref="member">SHA2_close()</ref>.</para><para><programlisting><codeline><highlight class="normal">SHA2_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">SHA2_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>result;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">char<sp/>message[]<sp/>=<sp/>&quot;A<sp/>Ferengi<sp/>without<sp/>profit<sp/>is<sp/>no<sp/>Ferengi<sp/>at<sp/>all.&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint8_t<sp/>actualDigest[SHA2_DIGEST_LENGTH_BYTES_256];</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>expectedDigest[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x93,<sp/>0xD6,<sp/>0x5C,<sp/>0x07,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xA6,<sp/>0x26,<sp/>0x88,<sp/>0x9C,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x87,<sp/>0xCC,<sp/>0x82,<sp/>0x24,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x47,<sp/>0xC6,<sp/>0xE4,<sp/>0x28,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xC0,<sp/>0xBD,<sp/>0xC6,<sp/>0xED,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xAA,<sp/>0x8C,<sp/>0xD2,<sp/>0x53,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x77,<sp/>0xAA,<sp/>0x73,<sp/>0x14,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xA3,<sp/>0xE2,<sp/>0xDE,<sp/>0x43</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SHA2_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SHA2_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.returnBehavior<sp/>=<sp/>SHA2_RETURN_BEHAVIOR_BLOCKING;</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>SHA2_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">assert(handle<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>SHA2_hashData(handle,<sp/>message,<sp/>strlen(message),<sp/>actualDigest);</highlight></codeline>
<codeline><highlight class="normal">assert(result<sp/>==<sp/>SHA2_STATUS_SUCCESS);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>memcmp(actualDigest,<sp/>expectedDigest,<sp/>SHA2_DIGEST_LENGTH_BYTES_256);</highlight></codeline>
<codeline><highlight class="normal">assert(result<sp/>==<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SHA2_close(handle);</highlight></codeline>
</programlisting></para><para><heading level="2">Partial hash operation</heading>
</para><para>When trying to operate on data that is too large to fit into available memory, partial processing is more advisable. The segments are processed with <ref refid="_s_h_a2_8h_1ac5155c684c254a894ea06f4cd5290990" kindref="member">SHA2_addData()</ref> whereas the final digest is computed by <ref refid="_s_h_a2_8h_1ae8e6a9aa91a05977f2db52ba67ee80da" kindref="member">SHA2_finalize()</ref>.</para><para><programlisting><codeline><highlight class="normal">SHA2_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">SHA2_Params<sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>char<sp/>message[]<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;Premature<sp/>optimization<sp/>is<sp/>the<sp/>root<sp/>of<sp/>all<sp/>evil<sp/>(or<sp/>at<sp/>least<sp/>most<sp/>of<sp/>it)<sp/>in<sp/>programming.&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint8_t<sp/>actualDigest[SHA2_DIGEST_LENGTH_BYTES_256];</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>expectedDigest[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xF2,<sp/>0x6A,<sp/>0xFF,<sp/>0x01,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x11,<sp/>0x6B,<sp/>0xF6,<sp/>0x77,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x63,<sp/>0x91,<sp/>0xFE,<sp/>0xD9,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x47,<sp/>0x56,<sp/>0x99,<sp/>0xB2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xAD,<sp/>0x7D,<sp/>0x64,<sp/>0x16,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xF7,<sp/>0x40,<sp/>0x1A,<sp/>0x5B,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xCC,<sp/>0xC7,<sp/>0x08,<sp/>0x3D,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xE8,<sp/>0x6B,<sp/>0x35,<sp/>0x6D,</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SHA2_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SHA2_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.returnBehavior<sp/>=<sp/>SHA2_RETURN_BEHAVIOR_BLOCKING;</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>SHA2_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">assert(handle<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>We<sp/>can<sp/>configure<sp/>the<sp/>driver<sp/>even<sp/>after<sp/>SHA2_open()</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>SHA2_setHashType(handle,<sp/>SHA2_HASH_TYPE_256);</highlight></codeline>
<codeline><highlight class="normal">assert(result<sp/>==<sp/>SHA2_STATUS_SUCCESS);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Process<sp/>data<sp/>in<sp/>chunks.<sp/>The<sp/>driver<sp/>buffers<sp/>incomplete<sp/>blocks<sp/>internally.</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>SHA2_addData(handle,<sp/>&amp;message[0],<sp/>17);</highlight></codeline>
<codeline><highlight class="normal">assert(result<sp/>==<sp/>SHA2_STATUS_SUCCESS);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>SHA2_addData(handle,<sp/>&amp;message[17],<sp/>strlen(message)<sp/>-<sp/>17);</highlight></codeline>
<codeline><highlight class="normal">assert(result<sp/>==<sp/>SHA2_STATUS_SUCCESS);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Compute<sp/>the<sp/>resulting<sp/>digest</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>SHA2_finalize(handle,<sp/>actualDigest);</highlight></codeline>
<codeline><highlight class="normal">assert(result<sp/>==<sp/>SHA2_STATUS_SUCCESS);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Verify</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>memcmp(actualDigest,<sp/>expectedDigest,<sp/>SHA2_DIGEST_LENGTH_BYTES_256);</highlight></codeline>
<codeline><highlight class="normal">assert(result<sp/>==<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SHA2_close(handle);</highlight></codeline>
</programlisting></para><para><heading level="2">One-step HMAC operation</heading>
</para><para>The <ref refid="_s_h_a2_8h_1a7d4736ba2fed1a83ec9bb5feb1fb9f6d" kindref="member">SHA2_hmac()</ref> function can perform a SHA2 operation in a single call. It will always use the most highly optimized routine with the least overhead and the fastest runtime. It requires that the entire input message is available to the function in a contiguous location at the start of the call.</para><para>After a SHA2 operation completes, the application may either start another operation or close the driver by calling <ref refid="_s_h_a2_8h_1a57cfbb0eecdf3449cbfa4e2dcb471dd4" kindref="member">SHA2_close()</ref>.</para><para><programlisting><codeline><highlight class="normal">SHA2_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">SHA2_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>hmacKey;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint8_t<sp/>message[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xb1,<sp/>0x68,<sp/>0x9c,<sp/>0x25,<sp/>0x91,<sp/>0xea,<sp/>0xf3,<sp/>0xc9,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xe6,<sp/>0x60,<sp/>0x70,<sp/>0xf8,<sp/>0xa7,<sp/>0x79,<sp/>0x54,<sp/>0xff,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xb8,<sp/>0x17,<sp/>0x49,<sp/>0xf1,<sp/>0xb0,<sp/>0x03,<sp/>0x46,<sp/>0xf9,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xdf,<sp/>0xe0,<sp/>0xb2,<sp/>0xee,<sp/>0x90,<sp/>0x5d,<sp/>0xcc,<sp/>0x28,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x8b,<sp/>0xaf,<sp/>0x4a,<sp/>0x92,<sp/>0xde,<sp/>0x3f,<sp/>0x40,<sp/>0x01,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xdd,<sp/>0x9f,<sp/>0x44,<sp/>0xc4,<sp/>0x68,<sp/>0xc3,<sp/>0xd0,<sp/>0x7d,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x6c,<sp/>0x6e,<sp/>0xe8,<sp/>0x2f,<sp/>0xac,<sp/>0xea,<sp/>0xfc,<sp/>0x97,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xc2,<sp/>0xfc,<sp/>0x0f,<sp/>0xc0,<sp/>0x60,<sp/>0x17,<sp/>0x19,<sp/>0xd2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xdc,<sp/>0xd0,<sp/>0xaa,<sp/>0x2a,<sp/>0xec,<sp/>0x92,<sp/>0xd1,<sp/>0xb0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xae,<sp/>0x93,<sp/>0x3c,<sp/>0x65,<sp/>0xeb,<sp/>0x06,<sp/>0xa0,<sp/>0x3c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x9c,<sp/>0x93,<sp/>0x5c,<sp/>0x2b,<sp/>0xad,<sp/>0x04,<sp/>0x59,<sp/>0x81,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x02,<sp/>0x41,<sp/>0x34,<sp/>0x7a,<sp/>0xb8,<sp/>0x7e,<sp/>0x9f,<sp/>0x11,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xad,<sp/>0xb3,<sp/>0x04,<sp/>0x15,<sp/>0x42,<sp/>0x4c,<sp/>0x6c,<sp/>0x7f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x5f,<sp/>0x22,<sp/>0xa0,<sp/>0x03,<sp/>0xb8,<sp/>0xab,<sp/>0x8d,<sp/>0xe5,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x4f,<sp/>0x6d,<sp/>0xed,<sp/>0x0e,<sp/>0x3a,<sp/>0xb9,<sp/>0x24,<sp/>0x5f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xa7,<sp/>0x95,<sp/>0x68,<sp/>0x45,<sp/>0x1d,<sp/>0xfa,<sp/>0x25,<sp/>0x8e};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>In<sp/>this<sp/>case,<sp/>keyingMaterial<sp/>is<sp/>40<sp/>bytes<sp/>long.<sp/>It<sp/>could<sp/>also<sp/>be</highlight></codeline>
<codeline><highlight class="normal">//<sp/>any<sp/>other<sp/>length.</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>keyingMaterial[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x97,<sp/>0x79,<sp/>0xd9,<sp/>0x12,<sp/>0x06,<sp/>0x42,<sp/>0x79,<sp/>0x7f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x17,<sp/>0x47,<sp/>0x02,<sp/>0x5d,<sp/>0x5b,<sp/>0x22,<sp/>0xb7,<sp/>0xac,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x60,<sp/>0x7c,<sp/>0xab,<sp/>0x08,<sp/>0xe1,<sp/>0x75,<sp/>0x8f,<sp/>0x2f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3a,<sp/>0x46,<sp/>0xc8,<sp/>0xbe,<sp/>0x1e,<sp/>0x25,<sp/>0xc5,<sp/>0x3b,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x8c,<sp/>0x6a,<sp/>0x8f,<sp/>0x58,<sp/>0xff,<sp/>0xef,<sp/>0xa1,<sp/>0x76};</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint8_t<sp/>actualHmac[SHA2_DIGEST_LENGTH_BYTES_256];</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>expectedHmac[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x76,<sp/>0x9f,<sp/>0x00,<sp/>0xd3,<sp/>0xe6,<sp/>0xa6,<sp/>0xcc,<sp/>0x1f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xb4,<sp/>0x26,<sp/>0xa1,<sp/>0x4a,<sp/>0x4f,<sp/>0x76,<sp/>0xc6,<sp/>0x46,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x2e,<sp/>0x61,<sp/>0x49,<sp/>0x72,<sp/>0x6e,<sp/>0x0d,<sp/>0xee,<sp/>0x0e,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xc0,<sp/>0xcf,<sp/>0x97,<sp/>0xa1,<sp/>0x66,<sp/>0x05,<sp/>0xac,<sp/>0x8b</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SHA2_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SHA2_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.returnBehavior<sp/>=<sp/>SHA2_RETURN_BEHAVIOR_BLOCKING;</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>SHA2_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">assert(handle<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;hmacKey,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyingMaterial,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>SHA2_hmac(handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;hmacKey,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(message),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualHmac);</highlight></codeline>
<codeline><highlight class="normal">assert(result<sp/>==<sp/>SHA2_STATUS_SUCCESS);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>memcmp(actualHmac,<sp/>expectedHmac,<sp/>SHA2_DIGEST_LENGTH_BYTES_256);</highlight></codeline>
<codeline><highlight class="normal">assert(result<sp/>==<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SHA2_close(handle);</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017-2022,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHA2.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>SHA2<sp/>driver<sp/>header</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_SHA2_Overview</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview<sp/>#</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>SHA2<sp/>(Secure<sp/>Hash<sp/>Algorithm<sp/>2)<sp/>is<sp/>a<sp/>cryptographic<sp/>hashing<sp/>algorithm<sp/>that</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>maps<sp/>an<sp/>input<sp/>of<sp/>arbitrary<sp/>length<sp/>to<sp/>a<sp/>fixed-length<sp/>output<sp/>with<sp/>negligible</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>probability<sp/>of<sp/>collision.<sp/>A<sp/>collision<sp/>would<sp/>occur<sp/>when<sp/>two<sp/>different<sp/>inputs</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>map<sp/>to<sp/>the<sp/>same<sp/>output.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>is<sp/>not<sp/>currently<sp/>technologically<sp/>feasible<sp/>to<sp/>derive<sp/>an<sp/>input<sp/>from</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>hash<sp/>digest<sp/>(output)<sp/>itself.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>Hashes<sp/>are<sp/>often<sp/>used<sp/>to<sp/>ensure<sp/>the<sp/>integrity<sp/>of<sp/>messages.<sp/>They<sp/>are<sp/>also</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>used<sp/>to<sp/>as<sp/>constituent<sp/>parts<sp/>of<sp/>more<sp/>complicated<sp/>cryptographic<sp/>schemes.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>HMAC<sp/>is<sp/>a<sp/>message<sp/>authentication<sp/>code<sp/>that<sp/>is<sp/>based<sp/>on<sp/>hash<sp/>functions<sp/>such</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>as<sp/>SHA2<sp/>rather<sp/>than<sp/>a<sp/>block<sp/>cipher.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>Hashes<sp/>may<sp/>themselves<sp/>be<sp/>used<sp/>as<sp/>or<sp/>form<sp/>a<sp/>part<sp/>of<sp/>key<sp/>derivation<sp/>functions</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>used<sp/>to<sp/>derive<sp/>symmetric<sp/>keys<sp/>from<sp/>sources<sp/>of<sp/>entropy<sp/>such<sp/>as<sp/>an<sp/>Elliptic</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>Curve<sp/>Diffie-Helman<sp/>key<sp/>exchange<sp/>(ECDH).</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>SHA2<sp/>is<sp/>not<sp/>actually<sp/>a<sp/>single<sp/>algorithm,<sp/>but<sp/>a<sp/>suite<sp/>of<sp/>similar<sp/>algorithms</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>that<sp/>produce<sp/>hash<sp/>digests<sp/>of<sp/>different<sp/>lengths.<sp/>224,<sp/>256,<sp/>384,<sp/>and<sp/>512-bit</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>outputs<sp/>are<sp/>available.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>&quot;Hash&quot;<sp/>may<sp/>refer<sp/>to<sp/>either<sp/>the<sp/>process<sp/>of<sp/>hashing<sp/>when<sp/>used<sp/>as<sp/>a<sp/>verb<sp/>and</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>output<sp/>digest<sp/>when<sp/>used<sp/>as<sp/>a<sp/>noun.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_SHA2_Usage</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage<sp/>#</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>Before<sp/>starting<sp/>a<sp/>SHA2<sp/>operation,<sp/>the<sp/>application<sp/>must<sp/>do<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Call<sp/>#SHA2_init()<sp/>to<sp/>initialize<sp/>the<sp/>driver</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Call<sp/>#SHA2_Params_init()<sp/>to<sp/>initialize<sp/>the<sp/>SHA2_Params<sp/>to<sp/>default<sp/>values.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Modify<sp/>the<sp/>#SHA2_Params<sp/>as<sp/>desired</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Call<sp/>#SHA2_open()<sp/>to<sp/>open<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>driver</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>There<sp/>are<sp/>two<sp/>general<sp/>ways<sp/>to<sp/>execute<sp/>a<sp/>SHA2<sp/>operation:</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>one-step<sp/>(in<sp/>one<sp/>operation)</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>multi-step<sp/>(multiple<sp/>partial<sp/>operations)</highlight></codeline>
<codeline lineno="76"><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_SHA2_Synopsis</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Synopsis</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_SHA2_Synopsis_Code</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Import<sp/>SHA2<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/SHA2.h&gt;</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Define<sp/>name<sp/>for<sp/>SHA2<sp/>channel<sp/>index</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>SHA2_INSTANCE<sp/>0</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_init();</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>SHA2_open(SHA2_INSTANCE,<sp/>NULL);</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>SHA2_hashData(handle,<sp/>message,<sp/>strlen(message),<sp/>actualDigest);</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_close(handle);</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_SHA2_Examples</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Examples<sp/>#</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>One-step<sp/>hash<sp/>operation<sp/>#</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>#SHA2_hashData()<sp/>function<sp/>can<sp/>perform<sp/>a<sp/>SHA2<sp/>operation<sp/>in<sp/>a<sp/>single<sp/>call.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>will<sp/>always<sp/>use<sp/>the<sp/>most<sp/>highly<sp/>optimized<sp/>routine<sp/>with<sp/>the<sp/>least<sp/>overhead<sp/>and</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>fastest<sp/>runtime.<sp/>However,<sp/>it<sp/>requires<sp/>that<sp/>the<sp/>entire<sp/>input<sp/>message<sp/>is</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>available<sp/>to<sp/>the<sp/>function<sp/>in<sp/>a<sp/>contiguous<sp/>location<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>call.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>single<sp/>call<sp/>operation<sp/>is<sp/>required<sp/>when<sp/>hashing<sp/>a<sp/>message<sp/>with<sp/>a<sp/>length<sp/>smaller</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>than<sp/>or<sp/>equal<sp/>to<sp/>one<sp/>hash-block<sp/>length.<sp/>All<sp/>devices<sp/>support<sp/>single<sp/>call<sp/>operations.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>After<sp/>a<sp/>SHA2<sp/>operation<sp/>completes,<sp/>the<sp/>application<sp/>may<sp/>either<sp/>start</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>another<sp/>operation<sp/>or<sp/>close<sp/>the<sp/>driver<sp/>by<sp/>calling<sp/>#SHA2_close().</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_Params<sp/>params;</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>result;</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>char<sp/>message[]<sp/>=<sp/>&quot;A<sp/>Ferengi<sp/>without<sp/>profit<sp/>is<sp/>no<sp/>Ferengi<sp/>at<sp/>all.&quot;;</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>actualDigest[SHA2_DIGEST_LENGTH_BYTES_256];</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>expectedDigest[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0x93,<sp/>0xD6,<sp/>0x5C,<sp/>0x07,</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xA6,<sp/>0x26,<sp/>0x88,<sp/>0x9C,</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0x87,<sp/>0xCC,<sp/>0x82,<sp/>0x24,</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0x47,<sp/>0xC6,<sp/>0xE4,<sp/>0x28,</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xC0,<sp/>0xBD,<sp/>0xC6,<sp/>0xED,</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xAA,<sp/>0x8C,<sp/>0xD2,<sp/>0x53,</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0x77,<sp/>0xAA,<sp/>0x73,<sp/>0x14,</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xA3,<sp/>0xE2,<sp/>0xDE,<sp/>0x43</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>};</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_init();</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>params.returnBehavior<sp/>=<sp/>SHA2_RETURN_BEHAVIOR_BLOCKING;</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>SHA2_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>assert(handle<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>SHA2_hashData(handle,<sp/>message,<sp/>strlen(message),<sp/>actualDigest);</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/>assert(result<sp/>==<sp/>SHA2_STATUS_SUCCESS);</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>memcmp(actualDigest,<sp/>expectedDigest,<sp/>SHA2_DIGEST_LENGTH_BYTES_256);</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/>assert(result<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_close(handle);</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Partial<sp/>hash<sp/>operation<sp/>#</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/>When<sp/>trying<sp/>to<sp/>operate<sp/>on<sp/>data<sp/>that<sp/>is<sp/>too<sp/>large<sp/>to<sp/>fit<sp/>into<sp/>available<sp/>memory,</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/>partial<sp/>processing<sp/>is<sp/>more<sp/>advisable.<sp/>The<sp/>segments<sp/>are<sp/>processed<sp/>with</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/>#SHA2_addData()<sp/>whereas<sp/>the<sp/>final<sp/>digest<sp/>is<sp/>computed<sp/>by<sp/>#SHA2_finalize().</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>result;</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_Params<sp/>params;</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/>const<sp/>char<sp/>message[]<sp/>=</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>&quot;Premature<sp/>optimization<sp/>is<sp/>the<sp/>root<sp/>of<sp/>all<sp/>evil<sp/>(or<sp/>at<sp/>least<sp/>most<sp/>of<sp/>it)<sp/>in<sp/>programming.&quot;;</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>actualDigest[SHA2_DIGEST_LENGTH_BYTES_256];</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>expectedDigest[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xF2,<sp/>0x6A,<sp/>0xFF,<sp/>0x01,</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0x11,<sp/>0x6B,<sp/>0xF6,<sp/>0x77,</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0x63,<sp/>0x91,<sp/>0xFE,<sp/>0xD9,</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0x47,<sp/>0x56,<sp/>0x99,<sp/>0xB2,</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xAD,<sp/>0x7D,<sp/>0x64,<sp/>0x16,</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xF7,<sp/>0x40,<sp/>0x1A,<sp/>0x5B,</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xCC,<sp/>0xC7,<sp/>0x08,<sp/>0x3D,</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xE8,<sp/>0x6B,<sp/>0x35,<sp/>0x6D,</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/>};</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_init();</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/>params.returnBehavior<sp/>=<sp/>SHA2_RETURN_BEHAVIOR_BLOCKING;</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>SHA2_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/>assert(handle<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>We<sp/>can<sp/>configure<sp/>the<sp/>driver<sp/>even<sp/>after<sp/>SHA2_open()</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>SHA2_setHashType(handle,<sp/>SHA2_HASH_TYPE_256);</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>assert(result<sp/>==<sp/>SHA2_STATUS_SUCCESS);</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Process<sp/>data<sp/>in<sp/>chunks.<sp/>The<sp/>driver<sp/>buffers<sp/>incomplete<sp/>blocks<sp/>internally.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>SHA2_addData(handle,<sp/>&amp;message[0],<sp/>17);</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/>assert(result<sp/>==<sp/>SHA2_STATUS_SUCCESS);</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>SHA2_addData(handle,<sp/>&amp;message[17],<sp/>strlen(message)<sp/>-<sp/>17);</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/>assert(result<sp/>==<sp/>SHA2_STATUS_SUCCESS);</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Compute<sp/>the<sp/>resulting<sp/>digest</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>SHA2_finalize(handle,<sp/>actualDigest);</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/>assert(result<sp/>==<sp/>SHA2_STATUS_SUCCESS);</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Verify</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>memcmp(actualDigest,<sp/>expectedDigest,<sp/>SHA2_DIGEST_LENGTH_BYTES_256);</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/><sp/>assert(result<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_close(handle);</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>One-step<sp/>HMAC<sp/>operation<sp/>#</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>#SHA2_hmac()<sp/>function<sp/>can<sp/>perform<sp/>a<sp/>SHA2<sp/>operation<sp/>in<sp/>a<sp/>single<sp/>call.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>will<sp/>always<sp/>use<sp/>the<sp/>most<sp/>highly<sp/>optimized<sp/>routine<sp/>with<sp/>the<sp/>least<sp/>overhead</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>the<sp/>fastest<sp/>runtime.<sp/>It<sp/>requires<sp/>that<sp/>the<sp/>entire<sp/>input<sp/>message<sp/>is</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/>available<sp/>to<sp/>the<sp/>function<sp/>in<sp/>a<sp/>contiguous<sp/>location<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>call.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/>After<sp/>a<sp/>SHA2<sp/>operation<sp/>completes,<sp/>the<sp/>application<sp/>may<sp/>either<sp/>start</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/>another<sp/>operation<sp/>or<sp/>close<sp/>the<sp/>driver<sp/>by<sp/>calling<sp/>#SHA2_close().</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_Params<sp/>params;</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>result;</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/><sp/>CryptoKey<sp/>hmacKey;</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>message[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xb1,<sp/>0x68,<sp/>0x9c,<sp/>0x25,<sp/>0x91,<sp/>0xea,<sp/>0xf3,<sp/>0xc9,</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xe6,<sp/>0x60,<sp/>0x70,<sp/>0xf8,<sp/>0xa7,<sp/>0x79,<sp/>0x54,<sp/>0xff,</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xb8,<sp/>0x17,<sp/>0x49,<sp/>0xf1,<sp/>0xb0,<sp/>0x03,<sp/>0x46,<sp/>0xf9,</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xdf,<sp/>0xe0,<sp/>0xb2,<sp/>0xee,<sp/>0x90,<sp/>0x5d,<sp/>0xcc,<sp/>0x28,</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x8b,<sp/>0xaf,<sp/>0x4a,<sp/>0x92,<sp/>0xde,<sp/>0x3f,<sp/>0x40,<sp/>0x01,</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xdd,<sp/>0x9f,<sp/>0x44,<sp/>0xc4,<sp/>0x68,<sp/>0xc3,<sp/>0xd0,<sp/>0x7d,</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x6c,<sp/>0x6e,<sp/>0xe8,<sp/>0x2f,<sp/>0xac,<sp/>0xea,<sp/>0xfc,<sp/>0x97,</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xc2,<sp/>0xfc,<sp/>0x0f,<sp/>0xc0,<sp/>0x60,<sp/>0x17,<sp/>0x19,<sp/>0xd2,</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xdc,<sp/>0xd0,<sp/>0xaa,<sp/>0x2a,<sp/>0xec,<sp/>0x92,<sp/>0xd1,<sp/>0xb0,</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xae,<sp/>0x93,<sp/>0x3c,<sp/>0x65,<sp/>0xeb,<sp/>0x06,<sp/>0xa0,<sp/>0x3c,</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x9c,<sp/>0x93,<sp/>0x5c,<sp/>0x2b,<sp/>0xad,<sp/>0x04,<sp/>0x59,<sp/>0x81,</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x02,<sp/>0x41,<sp/>0x34,<sp/>0x7a,<sp/>0xb8,<sp/>0x7e,<sp/>0x9f,<sp/>0x11,</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xad,<sp/>0xb3,<sp/>0x04,<sp/>0x15,<sp/>0x42,<sp/>0x4c,<sp/>0x6c,<sp/>0x7f,</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x5f,<sp/>0x22,<sp/>0xa0,<sp/>0x03,<sp/>0xb8,<sp/>0xab,<sp/>0x8d,<sp/>0xe5,</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x4f,<sp/>0x6d,<sp/>0xed,<sp/>0x0e,<sp/>0x3a,<sp/>0xb9,<sp/>0x24,<sp/>0x5f,</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xa7,<sp/>0x95,<sp/>0x68,<sp/>0x45,<sp/>0x1d,<sp/>0xfa,<sp/>0x25,<sp/>0x8e};</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>In<sp/>this<sp/>case,<sp/>keyingMaterial<sp/>is<sp/>40<sp/>bytes<sp/>long.<sp/>It<sp/>could<sp/>also<sp/>be</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>any<sp/>other<sp/>length.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>keyingMaterial[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x97,<sp/>0x79,<sp/>0xd9,<sp/>0x12,<sp/>0x06,<sp/>0x42,<sp/>0x79,<sp/>0x7f,</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x17,<sp/>0x47,<sp/>0x02,<sp/>0x5d,<sp/>0x5b,<sp/>0x22,<sp/>0xb7,<sp/>0xac,</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x60,<sp/>0x7c,<sp/>0xab,<sp/>0x08,<sp/>0xe1,<sp/>0x75,<sp/>0x8f,<sp/>0x2f,</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3a,<sp/>0x46,<sp/>0xc8,<sp/>0xbe,<sp/>0x1e,<sp/>0x25,<sp/>0xc5,<sp/>0x3b,</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x8c,<sp/>0x6a,<sp/>0x8f,<sp/>0x58,<sp/>0xff,<sp/>0xef,<sp/>0xa1,<sp/>0x76};</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>actualHmac[SHA2_DIGEST_LENGTH_BYTES_256];</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>expectedHmac[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0x76,<sp/>0x9f,<sp/>0x00,<sp/>0xd3,<sp/>0xe6,<sp/>0xa6,<sp/>0xcc,<sp/>0x1f,</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xb4,<sp/>0x26,<sp/>0xa1,<sp/>0x4a,<sp/>0x4f,<sp/>0x76,<sp/>0xc6,<sp/>0x46,</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0x2e,<sp/>0x61,<sp/>0x49,<sp/>0x72,<sp/>0x6e,<sp/>0x0d,<sp/>0xee,<sp/>0x0e,</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>0xc0,<sp/>0xcf,<sp/>0x97,<sp/>0xa1,<sp/>0x66,<sp/>0x05,<sp/>0xac,<sp/>0x8b</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/>};</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_init();</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/>params.returnBehavior<sp/>=<sp/>SHA2_RETURN_BEHAVIOR_BLOCKING;</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>SHA2_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/>assert(handle<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/><sp/>CryptoKeyPlaintext_initKey(&amp;hmacKey,</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyingMaterial,</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>SHA2_hmac(handle,</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;hmacKey,</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(message),</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualHmac);</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/><sp/>assert(result<sp/>==<sp/>SHA2_STATUS_SUCCESS);</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/><sp/>result<sp/>=<sp/>memcmp(actualHmac,<sp/>expectedHmac,<sp/>SHA2_DIGEST_LENGTH_BYTES_256);</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/><sp/>assert(result<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/><sp/>SHA2_close(handle);</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_SHA2__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_SHA2__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_crypto_key_8h" kindref="compound">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="_s_h_a2_8h_1af86590d86ab05868e5d9768a53864c51" refkind="member"><highlight class="preprocessor">#define<sp/>SHA2_STATUS_RESERVED<sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="_s_h_a2_8h_1af830601fb3cebbf96c405ca6f1cbbc79" refkind="member"><highlight class="preprocessor">#define<sp/>SHA2_STATUS_SUCCESS<sp/>((int_fast16_t)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="_s_h_a2_8h_1af9c9e8e3c5044c83eefdaef9063860a0" refkind="member"><highlight class="preprocessor">#define<sp/>SHA2_STATUS_ERROR<sp/>((int_fast16_t)-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="_s_h_a2_8h_1a79f870938f2275ff40d9a923839baba9" refkind="member"><highlight class="preprocessor">#define<sp/>SHA2_STATUS_RESOURCE_UNAVAILABLE<sp/>((int_fast16_t)-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="_s_h_a2_8h_1a233fd6c6912964d0a4918075081c08c2" refkind="member"><highlight class="preprocessor">#define<sp/>SHA2_STATUS_CANCELED<sp/>((int_fast16_t)-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="_s_h_a2_8h_1a06da8bd4bcbf98f38bd0ef7c11f60d04" refkind="member"><highlight class="preprocessor">#define<sp/>SHA2_STATUS_UNSUPPORTED<sp/>((int_fast16_t)-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="_s_h_a2_8h_1ac9687f3fc42f455c8fa4c12c259599f0" refkind="member"><highlight class="preprocessor">#define<sp/>SHA2_STATUS_KEYSTORE_ERROR<sp/>((int_fast16_t)-5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376" refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a24089a94926440a2b1ef80f2f12a6eea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a24089a94926440a2b1ef80f2f12a6eea" kindref="member">SHA2_RETURN_BEHAVIOR_CALLBACK</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="382" refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a1886f2611fbf1ec1c64b32b3308ca6e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58a1886f2611fbf1ec1c64b32b3308ca6e4" kindref="member">SHA2_RETURN_BEHAVIOR_BLOCKING</ref><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="386" refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58acb21dfa07af8bd9ea8b69e3821f14bc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58acb21dfa07af8bd9ea8b69e3821f14bc4" kindref="member">SHA2_RETURN_BEHAVIOR_POLLING</ref><sp/><sp/>=<sp/>4,<sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal">}<sp/><ref refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58" kindref="member">SHA2_ReturnBehavior</ref>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397" refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29ac04c761878b57de09ecd0a15f18216c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29ac04c761878b57de09ecd0a15f18216c5" kindref="member">SHA2_HASH_TYPE_224</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="398" refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29afb54f73866a407de412f1612deba102e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29afb54f73866a407de412f1612deba102e" kindref="member">SHA2_HASH_TYPE_256</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="399" refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29aa2a402addbc8c70d1cf8eda44e5ea0eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29aa2a402addbc8c70d1cf8eda44e5ea0eb" kindref="member">SHA2_HASH_TYPE_384</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="400" refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29a95382db804c412fd6ad3d86aaf743f3d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29a95382db804c412fd6ad3d86aaf743f3d" kindref="member">SHA2_HASH_TYPE_512</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}<sp/><ref refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29" kindref="member">SHA2_HashType</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408" refid="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253daa5d0d0cca946f78996634d3e0cd1e1f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253daa5d0d0cca946f78996634d3e0cd1e1f6" kindref="member">SHA2_DIGEST_LENGTH_BYTES_224</ref><sp/>=<sp/>28,</highlight></codeline>
<codeline lineno="409" refid="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253da485865fb1d5fd1dd0d79ac98c2d6eedf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253da485865fb1d5fd1dd0d79ac98c2d6eedf" kindref="member">SHA2_DIGEST_LENGTH_BYTES_256</ref><sp/>=<sp/>32,</highlight></codeline>
<codeline lineno="410" refid="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253da8d406e8f97117db168ec92ff25be9a80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253da8d406e8f97117db168ec92ff25be9a80" kindref="member">SHA2_DIGEST_LENGTH_BYTES_384</ref><sp/>=<sp/>48,</highlight></codeline>
<codeline lineno="411" refid="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253dac9cfb34c079c68dc42e945d15183ab8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253dac9cfb34c079c68dc42e945d15183ab8b" kindref="member">SHA2_DIGEST_LENGTH_BYTES_512</ref><sp/>=<sp/>64,</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}<sp/><ref refid="_s_h_a2_8h_1a80743185c031d98f1ed370161c1f253d" kindref="member">SHA2_DigestLengthBytes</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">{</highlight></codeline>
<codeline lineno="429" refid="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0a02b165a6d502cb6bfc35a4718a52f25a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0a02b165a6d502cb6bfc35a4718a52f25a" kindref="member">SHA2_BLOCK_SIZE_BYTES_224</ref><sp/>=<sp/>64,</highlight></codeline>
<codeline lineno="430" refid="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0a37bd6cb465e5a0c77c15933525f25103" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0a37bd6cb465e5a0c77c15933525f25103" kindref="member">SHA2_BLOCK_SIZE_BYTES_256</ref><sp/>=<sp/>64,</highlight></codeline>
<codeline lineno="431" refid="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0ac41032a24580877dd5c1be886d75a897" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0ac41032a24580877dd5c1be886d75a897" kindref="member">SHA2_BLOCK_SIZE_BYTES_384</ref><sp/>=<sp/>128,</highlight></codeline>
<codeline lineno="432" refid="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0a8ba20289cd607ae3b078487c5111833a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0a8ba20289cd607ae3b078487c5111833a" kindref="member">SHA2_BLOCK_SIZE_BYTES_512</ref><sp/>=<sp/>128,</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}<sp/><ref refid="_s_h_a2_8h_1a068b58fab712a0c1ad7091803314c5d0" kindref="member">SHA2_BlockSizeBytes</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="struct_s_h_a2___config" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449" refid="struct_s_h_a2___config_1ac2b5fd13aeea22e6337bdb55206810fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_s_h_a2___config_1ac2b5fd13aeea22e6337bdb55206810fd" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="struct_s_h_a2___config_1a4f78c4a20fea50a67a56a71e7235fee1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_s_h_a2___config_1a4f78c4a20fea50a67a56a71e7235fee1" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}<sp/><ref refid="struct_s_h_a2___config" kindref="compound">SHA2_Config</ref>;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="458" refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_s_h_a2___config" kindref="compound">SHA2_Config</ref><sp/>*<ref refid="_s_h_a2_8h_1a0a6ddcbf393ff5f2677ebe47e1f3d798" kindref="member">SHA2_Handle</ref>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="_s_h_a2_8h_1a4a605367d5d35ab77de06dcb9f54c921" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_s_h_a2_8h_1a4a605367d5d35ab77de06dcb9f54c921" kindref="member">SHA2_CallbackFxn</ref>)(SHA2_Handle<sp/>handle,<sp/>int_fast16_t<sp/>returnStatus);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="struct_s_h_a2___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">{</highlight></codeline>
<codeline lineno="482" refid="struct_s_h_a2___params_1af4e727bc27c0e8841d3e29733766e059" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29" kindref="member">SHA2_HashType</ref><sp/><ref refid="struct_s_h_a2___params_1af4e727bc27c0e8841d3e29733766e059" kindref="member">hashType</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="485" refid="struct_s_h_a2___params_1ab8486d42556be0df51c3450b0ccb151d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a224eb3d293bb76a360d13f3fb6cdcd58" kindref="member">SHA2_ReturnBehavior</ref><sp/><ref refid="struct_s_h_a2___params_1ab8486d42556be0df51c3450b0ccb151d" kindref="member">returnBehavior</ref>;<sp/></highlight></codeline>
<codeline lineno="486" refid="struct_s_h_a2___params_1ad443e5775dba2d44238eff1595d4af78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_h_a2_8h_1a4a605367d5d35ab77de06dcb9f54c921" kindref="member">SHA2_CallbackFxn</ref><sp/><ref refid="struct_s_h_a2___params_1ad443e5775dba2d44238eff1595d4af78" kindref="member">callbackFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="487" refid="struct_s_h_a2___params_1aeca064ee25e6e6d3e6383fe8d54b9185" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_s_h_a2___params_1aeca064ee25e6e6d3e6383fe8d54b9185" kindref="member">timeout</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="490"><highlight class="normal">}<sp/><ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref>;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_h_a2___config" kindref="compound">SHA2_Config</ref><sp/><ref refid="_s_h_a2_8h_1aa8005577cc49a5805d5e123395b74185" kindref="member">SHA2_config</ref>[];</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint_least8_t<sp/><ref refid="_s_h_a2_8h_1a0bbbbf10608e8b702cd04166617903b2" kindref="member">SHA2_count</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref><sp/><ref refid="_s_h_a2_8h_1a2bc55a3d74a3fecd6f00d498bce96f26" kindref="member">SHA2_defaultParams</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_s_h_a2_8h_1a52bac540341a588612f9e375cc504439" kindref="member">SHA2_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_s_h_a2_8h_1a35012f3a93e7a6f7252c53ae31d28aed" kindref="member">SHA2_Params_init</ref>(<ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">SHA2_Handle<sp/><ref refid="_s_h_a2_8h_1abd8e7d5cf0cad89a9a218d5ce6d41e13" kindref="member">SHA2_open</ref>(uint_least8_t<sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_s_h_a2_8h_1a57cfbb0eecdf3449cbfa4e2dcb471dd4" kindref="member">SHA2_close</ref>(SHA2_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal">int_fast16_t<sp/><ref refid="_s_h_a2_8h_1aca3ffba8d483059a9450b6f82ea47f38" kindref="member">SHA2_setupHmac</ref>(SHA2_Handle<sp/>handle,<sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*key);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">int_fast16_t<sp/><ref refid="_s_h_a2_8h_1ac5155c684c254a894ea06f4cd5290990" kindref="member">SHA2_addData</ref>(SHA2_Handle<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal">int_fast16_t<sp/><ref refid="_s_h_a2_8h_1ae8e6a9aa91a05977f2db52ba67ee80da" kindref="member">SHA2_finalize</ref>(SHA2_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*digest);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal">int_fast16_t<sp/><ref refid="_s_h_a2_8h_1a58452ce797e26bcf69aab03d8cc07ffb" kindref="member">SHA2_finalizeHmac</ref>(SHA2_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hmac);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal">int_fast16_t<sp/><ref refid="_s_h_a2_8h_1aed1e81b4864ed62d3f0532efc353d790" kindref="member">SHA2_hashData</ref>(SHA2_Handle<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dataLength,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*digest);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal">int_fast16_t<sp/><ref refid="_s_h_a2_8h_1a7d4736ba2fed1a83ec9bb5feb1fb9f6d" kindref="member">SHA2_hmac</ref>(SHA2_Handle<sp/>handle,<sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dataLength,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hmac);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_s_h_a2_8h_1ab56e3f36e56ffb06c2c8aaa7528ac321" kindref="member">SHA2_reset</ref>(SHA2_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal">int_fast16_t<sp/><ref refid="_s_h_a2_8h_1a8274ea547e11bfe8e9d406f646ad0432" kindref="member">SHA2_cancelOperation</ref>(SHA2_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal">int_fast16_t<sp/><ref refid="_s_h_a2_8h_1a46075b17a244bac1b9123559da37f6f5" kindref="member">SHA2_setHashType</ref>(SHA2_Handle<sp/>handle,<sp/><ref refid="_s_h_a2_8h_1ac736b297766eec40ca782cbc559d1f29" kindref="member">SHA2_HashType</ref><sp/>type);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal">SHA2_Handle<sp/><ref refid="_s_h_a2_8h_1a954040f0843fafbee57fa7589207ef00" kindref="member">SHA2_construct</ref>(<ref refid="struct_s_h_a2___config" kindref="compound">SHA2_Config</ref><sp/>*config,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_h_a2___params" kindref="compound">SHA2_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_SHA2__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/SHA2.h"/>
  </compounddef>
</doxygen>
