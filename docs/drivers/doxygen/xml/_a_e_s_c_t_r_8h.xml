<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_a_e_s_c_t_r_8h" kind="file" language="C++">
    <compoundname>AESCTR.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="_a_e_s_common_8h" local="no">ti/drivers/AESCommon.h</includes>
    <includes refid="_crypto_key_8h" local="no">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</includes>
    <includedby refid="_a_e_s_c_t_r_c_c26_x4__ns_8h" local="no">AESCTRCC26X4_ns.h</includedby>
    <includedby refid="_a_e_s_c_t_r_c_c26_x4__s_8h" local="no">AESCTRCC26X4_s.h</includedby>
    <includedby refid="_a_e_s_c_t_r_c_c26_x_x_8h" local="no">AESCTRCC26XX.h</includedby>
    <includedby refid="_a_e_s_c_t_r_d_r_b_g_8h" local="no">AESCTRDRBG.h</includedby>
    <incdepgraph>
      <node id="261">
        <label>stdbool.h</label>
      </node>
      <node id="260">
        <label>ti/drivers/AESCommon.h</label>
        <link refid="_a_e_s_common_8h"/>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
      </node>
      <node id="259">
        <label>stdint.h</label>
      </node>
      <node id="262">
        <label>ti/drivers/cryptoutils/cryptokey/CryptoKey.h</label>
        <link refid="_crypto_key_8h"/>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
      </node>
      <node id="258">
        <label>stddef.h</label>
      </node>
      <node id="257">
        <label>AESCTR.h</label>
        <link refid="_a_e_s_c_t_r_8h"/>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="266">
        <label>AESCTRCC26XX.h</label>
        <link refid="_a_e_s_c_t_r_c_c26_x_x_8h"/>
      </node>
      <node id="265">
        <label>AESCTRCC26X4_s.h</label>
        <link refid="_a_e_s_c_t_r_c_c26_x4__s_8h"/>
      </node>
      <node id="269">
        <label>AESCTRDRBGX4_s.h</label>
        <link refid="_a_e_s_c_t_r_d_r_b_g_x4__s_8h"/>
      </node>
      <node id="268">
        <label>AESCTRDRBGX4_ns.h</label>
        <link refid="_a_e_s_c_t_r_d_r_b_g_x4__ns_8h"/>
      </node>
      <node id="264">
        <label>AESCTRCC26X4_ns.h</label>
        <link refid="_a_e_s_c_t_r_c_c26_x4__ns_8h"/>
      </node>
      <node id="263">
        <label>AESCTR.h</label>
        <link refid="_a_e_s_c_t_r_8h"/>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
      </node>
      <node id="270">
        <label>AESCTRDRBGXX.h</label>
        <link refid="_a_e_s_c_t_r_d_r_b_g_x_x_8h"/>
      </node>
      <node id="267">
        <label>AESCTRDRBG.h</label>
        <link refid="_a_e_s_c_t_r_d_r_b_g_8h"/>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
        <childnode refid="270" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_a_e_s_c_t_r___one_step_operation" prot="public">AESCTR_OneStepOperation</innerclass>
    <innerclass refid="struct_a_e_s_c_t_r___segmented_operation" prot="public">AESCTR_SegmentedOperation</innerclass>
    <innerclass refid="union_a_e_s_c_t_r___operation_union" prot="public">AESCTR_OperationUnion</innerclass>
    <innerclass refid="struct_a_e_s_c_t_r___params" prot="public">AESCTR_Params</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1a34779c06165f5cb664ef629c238b41ab" prot="public" static="no">
        <name>AESCTR_STATUS_RESERVED</name>
        <initializer><ref refid="_a_e_s_common_8h_1a4896831b1a3a4ead39a3c58eb13a05f5" kindref="member">AES_STATUS_RESERVED</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common AESCTR status code reservation offset. AESCTR driver implementations should offset status codes with <ref refid="_a_e_s_c_t_r_8h_1a34779c06165f5cb664ef629c238b41ab" kindref="member">AESCTR_STATUS_RESERVED</ref> growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>AESCTRXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>AESCTR_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>AESCTRXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>AESCTR_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>AESCTRXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>AESCTR_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="404" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1a5abdae97a12f798523a6a5835747829e" prot="public" static="no">
        <name>AESCTR_STATUS_SUCCESS</name>
        <initializer><ref refid="_a_e_s_common_8h_1a40238be3b30c09acbb966b8cf64d8db6" kindref="member">AES_STATUS_SUCCESS</ref></initializer>
        <briefdescription>
<para>Successful status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return <ref refid="_a_e_s_c_t_r_8h_1a5abdae97a12f798523a6a5835747829e" kindref="member">AESCTR_STATUS_SUCCESS</ref> if the function was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="412" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1ad78ff1fad9e9ef24e0dadcc8abe072df" prot="public" static="no">
        <name>AESCTR_STATUS_ERROR</name>
        <initializer><ref refid="_a_e_s_common_8h_1ac6963a06e1923ad116a23c0e1a17dba8" kindref="member">AES_STATUS_ERROR</ref></initializer>
        <briefdescription>
<para>Generic error status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return <ref refid="_a_e_s_c_t_r_8h_1ad78ff1fad9e9ef24e0dadcc8abe072df" kindref="member">AESCTR_STATUS_ERROR</ref> if the function was not executed successfully and no more pertinent error code could be returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="420" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1afbb647a50a8af8a4c924f338e1bb200a" prot="public" static="no">
        <name>AESCTR_STATUS_RESOURCE_UNAVAILABLE</name>
        <initializer><ref refid="_a_e_s_common_8h_1a4720c275153144c20096dc2d85f93889" kindref="member">AES_STATUS_RESOURCE_UNAVAILABLE</ref></initializer>
        <briefdescription>
<para>An error status code returned if the hardware or software resource is currently unavailable. </para>        </briefdescription>
        <detaileddescription>
<para>AESCTR driver implementations may have hardware or software limitations on how many clients can simultaneously perform operations. This status code is returned if the mutual exclusion mechanism signals that an operation cannot currently be performed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="430" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1a65f0b734aea8c3de3fe797b89d9e226b" prot="public" static="no">
        <name>AESCTR_STATUS_CANCELED</name>
        <initializer><ref refid="_a_e_s_common_8h_1aa8d5ff0dd5cde60089ac5d84cfb4a702" kindref="member">AES_STATUS_CANCELED</ref></initializer>
        <briefdescription>
<para>The ongoing operation was canceled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="435" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1af5c6fdabbcd2ab7a8968b29a51556427" prot="public" static="no">
        <name>AESCTR_STATUS_FEATURE_NOT_SUPPORTED</name>
        <initializer><ref refid="_a_e_s_common_8h_1a671e5331015411e6db491d8eee23732c" kindref="member">AES_STATUS_FEATURE_NOT_SUPPORTED</ref></initializer>
        <briefdescription>
<para>The operation requested is not supported. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="440" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1a50fdb2adf7836d4c1d9750215bbff426" prot="public" static="no">
        <name>AESCTR_STATUS_KEYSTORE_INVALID_ID</name>
        <initializer><ref refid="_a_e_s_common_8h_1aeaab212abda07968840db525e114d1ae" kindref="member">AES_STATUS_KEYSTORE_INVALID_ID</ref></initializer>
        <briefdescription>
<para>The operation tried to load a key from the keystore using an invalid key ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="445" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1ab42c0159f0f2531c8d9fa7e3859ce991" prot="public" static="no">
        <name>AESCTR_STATUS_KEYSTORE_GENERIC_ERROR</name>
        <initializer><ref refid="_a_e_s_common_8h_1a89e9ed71ffb10f4f6d5b52b8afbd4389" kindref="member">AES_STATUS_KEYSTORE_GENERIC_ERROR</ref></initializer>
        <briefdescription>
<para>The key store module returned a generic error. See key store documentation for additional details. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="451" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1afbbaf8f51710acd01d591a335b312ef5" prot="public" static="no">
        <name>AESCTR_STATUS_UNALIGNED_IO_NOT_SUPPORTED</name>
        <initializer><ref refid="_a_e_s_common_8h_1ab367c0137dd8d9bda4107b1545bfdb12" kindref="member">AES_STATUS_UNALIGNED_IO_NOT_SUPPORTED</ref></initializer>
        <briefdescription>
<para>The operation does not support non-word-aligned input and/or output. </para>        </briefdescription>
        <detaileddescription>
<para>AESCTR driver implementations may have restrictions on the alignment of input/output data due to performance limitations of the hardware. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="459" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1a131d9f356f7308c7d7e9d60435c77cee" prot="public" static="no">
        <name>AESCTR_OP_MODE_MASK</name>
        <initializer>0x0F</initializer>
        <briefdescription>
<para>Mask for the operation mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="603" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="603" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1acd88e7a4db1af6b55185018f972eb848" prot="public" static="no">
        <name>AESCTR_OP_FLAG_SEGMENTED</name>
        <initializer>0x10 /* bit 4 */</initializer>
        <briefdescription>
<para>Flag indicating a segmented operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="608" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1aa76bccdc66712ba44e8770a1d5b0881c" prot="public" static="no">
        <name>AESCTR_OP_FLAG_FINALIZE</name>
        <initializer>0x20 /* bit 5 */</initializer>
        <briefdescription>
<para>Flag indicating a finalize operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="613" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="613" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_a_e_s_c_t_r_8h_1afbad19da0c6c954c7d62b8fd08ae0a11" prot="public" static="no">
        <name>AESCTR_OP_FLAGS_MASK</name>
        <initializer>(<ref refid="_a_e_s_c_t_r_8h_1acd88e7a4db1af6b55185018f972eb848" kindref="member">AESCTR_OP_FLAG_SEGMENTED</ref> | <ref refid="_a_e_s_c_t_r_8h_1aa76bccdc66712ba44e8770a1d5b0881c" kindref="member">AESCTR_OP_FLAG_FINALIZE</ref>)</initializer>
        <briefdescription>
<para>Mask for all valid operation flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="618" column="9" bodyfile="source/ti/drivers/AESCTR.h" bodystart="618" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4" prot="public" static="no">
        <name>AESCTR_ReturnBehavior</name>
        <enumvalue id="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4a40c3b7e8db7ff4ebd81a9f6477139c3f" prot="public">
          <name>AESCTR_RETURN_BEHAVIOR_CALLBACK</name>
          <initializer>= AES_RETURN_BEHAVIOR_CALLBACK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will return immediately while the CTR operation goes on in the background. The registered callback function is called after the operation completes. The context the callback function is called (task, HWI, SWI) is implementation-dependent. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4ade55945ff11c47457a75d97db2a20b2c" prot="public">
          <name>AESCTR_RETURN_BEHAVIOR_BLOCKING</name>
          <initializer>= AES_RETURN_BEHAVIOR_BLOCKING</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will block while the CTR operation goes on in the background. CTR operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4a4a75cbc6c9b0ccde83c5cf9c5c5f053e" prot="public">
          <name>AESCTR_RETURN_BEHAVIOR_POLLING</name>
          <initializer>= AES_RETURN_BEHAVIOR_POLLING</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will continuously poll a flag while CTR operation goes on in the background. CTR operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The way in which CTR function calls return after performing an encryption or decryption operation. </para>        </briefdescription>
        <detaileddescription>
<para>Not all CTR operations exhibit the specified return behavior. Functions that do not require significant computation and cannot offload that computation to a background thread behave like regular functions. Which functions exhibit the specified return behavior is not implementation dependent. Specifically, a software-backed implementation run on the same CPU as the application will emulate the return behavior while not actually offloading the computation to the background thread.</para><para>AESCTR functions exhibiting the specified return behavior have restrictions on the context from which they may be called.</para><para><table rows="4" cols="4"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Task </para></entry><entry thead="yes"><para>Hwi </para></entry><entry thead="yes"><para>Swi  </para></entry></row>
<row>
<entry thead="no"><para>AESCTR_RETURN_BEHAVIOR_CALLBACK </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
<row>
<entry thead="no"><para>AESCTR_RETURN_BEHAVIOR_BLOCKING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>AESCTR_RETURN_BEHAVIOR_POLLING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="483" column="1" bodyfile="source/ti/drivers/AESCTR.h" bodystart="482" bodyend="501"/>
      </memberdef>
      <memberdef kind="enum" id="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6" prot="public" static="no">
        <name>AESCTR_Mode</name>
        <enumvalue id="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6a81e20f47ee293654cec99f123beb4a78" prot="public">
          <name>AESCTR_MODE_ENCRYPT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6ab4536ba0413eabcc6f7bfe2296b44c2f" prot="public">
          <name>AESCTR_MODE_DECRYPT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for the direction of the CTR operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="595" column="1" bodyfile="source/ti/drivers/AESCTR.h" bodystart="594" bodyend="598"/>
      </memberdef>
      <memberdef kind="enum" id="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529e" prot="public" static="no">
        <name>AESCTR_OperationType</name>
        <enumvalue id="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eaa67b3972817bf145ee9036fd62e70c6d" prot="public">
          <name>AESCTR_OPERATION_TYPE_ENCRYPT</name>
          <initializer>= AESCTR_MODE_ENCRYPT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eaefecbb7bf029eedce369d76698411543" prot="public">
          <name>AESCTR_OPERATION_TYPE_DECRYPT</name>
          <initializer>= AESCTR_MODE_DECRYPT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529ea28aeef0d0b964c789a06c023214238d6" prot="public">
          <name>AESCTR_OPERATION_TYPE_ENCRYPT_SEGMENTED</name>
          <initializer>= (AESCTR_MODE_ENCRYPT |  0x10  )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eaa027d73d2232baf8d15a38dfc773efba" prot="public">
          <name>AESCTR_OPERATION_TYPE_DECRYPT_SEGMENTED</name>
          <initializer>= (AESCTR_MODE_DECRYPT |  0x10  )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eadaceaad96a12d02d8f21ad17e2238e13" prot="public">
          <name>AESCTR_OPERATION_TYPE_ENCRYPT_FINALIZE</name>
          <initializer>= (AESCTR_MODE_ENCRYPT |  0x20  )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eaa02d826846b31cae622334671e1b8871" prot="public">
          <name>AESCTR_OPERATION_TYPE_DECRYPT_FINALIZE</name>
          <initializer>= (AESCTR_MODE_DECRYPT |  0x20  )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for the operation types supported by the driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="624" column="1" bodyfile="source/ti/drivers/AESCTR.h" bodystart="623" bodyend="631"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_a_e_s_c_t_r_8h_1a5afaf34387204843aee3513ce646596f" prot="public" static="no">
        <type><ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref></type>
        <definition>typedef AESCTR_OneStepOperation AESCTR_Operation</definition>
        <argsstring></argsstring>
        <name>AESCTR_Operation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Define a typedef for deprecated operation AESCTR_Operation. Existing code should be refactored to use <ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref>. This reference may be removed at some point in the future. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="579" column="1" bodyfile="source/ti/drivers/AESCTR.h" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_e_s_c_t_r_8h_1ab53ceee62301f4109aa47953eee5ae41" prot="public" static="no">
        <type><ref refid="struct_a_e_s_common___config" kindref="compound">AESCommon_Config</ref></type>
        <definition>typedef AESCommon_Config AESCTR_Config</definition>
        <argsstring></argsstring>
        <name>AESCTR_Config</name>
        <briefdescription>
<para>AESCTR Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="_a_e_s_c_t_r_8h_1ab53ceee62301f4109aa47953eee5ae41" kindref="member">AESCTR_Config</ref> structure contains a set of pointers used to characterize the AESCTR driver implementation.</para><para>This structure needs to be defined before calling <ref refid="_a_e_s_c_t_r_8h_1a09d8aeedd73b5cb95c4bc3e8089ea8ac" kindref="member">AESCTR_init()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_a_e_s_c_t_r_8h_1a09d8aeedd73b5cb95c4bc3e8089ea8ac" kindref="member">AESCTR_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="644" column="1" bodyfile="source/ti/drivers/AESCTR.h" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" prot="public" static="no">
        <type><ref refid="_a_e_s_c_t_r_8h_1ab53ceee62301f4109aa47953eee5ae41" kindref="member">AESCTR_Config</ref> *</type>
        <definition>typedef AESCTR_Config* AESCTR_Handle</definition>
        <argsstring></argsstring>
        <name>AESCTR_Handle</name>
        <briefdescription>
<para>A handle that is returned from an <ref refid="_a_e_s_c_t_r_8h_1ae60ed1df2e6c103601ad406b5ed7664b" kindref="member">AESCTR_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="649" column="1" bodyfile="source/ti/drivers/AESCTR.h" bodystart="649" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_e_s_c_t_r_8h_1adc2c56e8ba2292d0b57d8fd3b28d92e3" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* AESCTR_CallbackFxn) (AESCTR_Handle handle, int_fast16_t returnValue, AESCTR_OperationUnion *operation, AESCTR_OperationType operationType)</definition>
        <argsstring>)(AESCTR_Handle handle, int_fast16_t returnValue, AESCTR_OperationUnion *operation, AESCTR_OperationType operationType)</argsstring>
        <name>AESCTR_CallbackFxn</name>
        <briefdescription>
<para>The definition of a callback function used by the AESCTR driver when used in <ref refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4a40c3b7e8db7ff4ebd81a9f6477139c3f" kindref="member">AESCTR_RETURN_BEHAVIOR_CALLBACK</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the client that started the CTR operation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of the CTR operation. May contain an error code. Informs the application of why the callback function was called.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the operation union struct.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operationType</parametername>
</parameternamelist>
<parameterdescription>
<para>This parameter determines which operation the callback refers to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="666" column="1" bodyfile="source/ti/drivers/AESCTR.h" bodystart="666" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_a_e_s_c_t_r_8h_1ac30036f5de20f0c36474dc5470c1fc35" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref></type>
        <definition>const AESCTR_Params AESCTR_defaultParams</definition>
        <argsstring></argsstring>
        <name>AESCTR_defaultParams</name>
        <briefdescription>
<para>Default <ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref> structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="_a_e_s_c_t_r_8h_1a1f896d0c0acd590dcc9cc796fa96a647" kindref="member">AESCTR_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="696" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1a09d8aeedd73b5cb95c4bc3e8089ea8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCTR_init</definition>
        <argsstring>(void)</argsstring>
        <name>AESCTR_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function initializes the CTR module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The AESCTR_config structure must exist and be persistent before this function can be called. This function must also be called before any other CTR driver APIs. This function call does not modify any peripheral registers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1a1f896d0c0acd590dcc9cc796fa96a647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCTR_Params_init</definition>
        <argsstring>(AESCTR_Params *params)</argsstring>
        <name>AESCTR_Params_init</name>
        <param>
          <type><ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the <ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: returnBehavior = AESCTR_RETURN_BEHAVIOR_BLOCKING callbackFxn = NULL timeout = SemaphoreP_WAIT_FOREVER custom = NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="720" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1ae60ed1df2e6c103601ad406b5ed7664b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref></type>
        <definition>AESCTR_Handle AESCTR_open</definition>
        <argsstring>(uint_least8_t index, const AESCTR_Params *params)</argsstring>
        <name>AESCTR_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>This function opens a given AESCTR peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>AESCTR driver has been initialized using <ref refid="_a_e_s_c_t_r_8h_1a09d8aeedd73b5cb95c4bc3e8089ea8ac" kindref="member">AESCTR_init()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the CTR indexed into the AESCTR_config table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a parameter block, if NULL it will use default values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref> on success or a NULL on an error or if it has been opened already.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_e_s_c_t_r_8h_1a09d8aeedd73b5cb95c4bc3e8089ea8ac" kindref="member">AESCTR_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_e_s_c_t_r_8h_1acb72a953b2a3426278555b267824f817" kindref="member">AESCTR_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="739" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1acb72a953b2a3426278555b267824f817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCTR_close</definition>
        <argsstring>(AESCTR_Handle handle)</argsstring>
        <name>AESCTR_close</name>
        <param>
          <type><ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a CTR peripheral specified by the AESCTR handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_e_s_c_t_r_8h_1ae60ed1df2e6c103601ad406b5ed7664b" kindref="member">AESCTR_open()</ref> or <ref refid="_a_e_s_c_t_r_8h_1ad51fedf3d21b002b529eae2fbb31ca23" kindref="member">AESCTR_construct()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCTR handle</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_a_e_s_c_t_r_8h_1ae60ed1df2e6c103601ad406b5ed7664b" kindref="member">AESCTR_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="750" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1aff0a4d5aa1bc42d9d862462f36a496a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCTR_setupEncrypt</definition>
        <argsstring>(AESCTR_Handle handle, const CryptoKey *key, const uint8_t *initialCounter)</argsstring>
        <name>AESCTR_setupEncrypt</name>
        <param>
          <type><ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>initialCounter</declname>
        </param>
        <briefdescription>
<para>Function to prepare a segmented AESCTR encryption operation. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets up a segmented AESCTR encryption operation.</para><para><simplesect kind="pre"><para><ref refid="_a_e_s_c_t_r_8h_1ae60ed1df2e6c103601ad406b5ed7664b" kindref="member">AESCTR_open()</ref> or <ref refid="_a_e_s_c_t_r_8h_1ad51fedf3d21b002b529eae2fbb31ca23" kindref="member">AESCTR_construct()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCTR handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a previously initialized <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">initialCounter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to initial counter value. The buffer size must be at least 16-bytes. If NULL, zero will be used for the initial counter value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1a5abdae97a12f798523a6a5835747829e" kindref="member">AESCTR_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1ad78ff1fad9e9ef24e0dadcc8abe072df" kindref="member">AESCTR_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><ref refid="_a_e_s_c_t_r_8h_1a268380d059ea502beb8d1e9ec98813f2" kindref="member">AESCTR_addData()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="770" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1af482d0963698740905ae0b25a4f2de53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCTR_setupDecrypt</definition>
        <argsstring>(AESCTR_Handle handle, const CryptoKey *key, const uint8_t *initialCounter)</argsstring>
        <name>AESCTR_setupDecrypt</name>
        <param>
          <type><ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>initialCounter</declname>
        </param>
        <briefdescription>
<para>Function to prepare a segmented AESCTR decryption operation. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets up a segmented AESCTR decryption operation.</para><para><simplesect kind="pre"><para><ref refid="_a_e_s_c_t_r_8h_1ae60ed1df2e6c103601ad406b5ed7664b" kindref="member">AESCTR_open()</ref> or <ref refid="_a_e_s_c_t_r_8h_1ad51fedf3d21b002b529eae2fbb31ca23" kindref="member">AESCTR_construct()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCTR handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a previously initialized <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">initialCounter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to initial counter value. The buffer size must be at least 16-bytes. If NULL, zero will be used for the initial counter value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1a5abdae97a12f798523a6a5835747829e" kindref="member">AESCTR_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1ad78ff1fad9e9ef24e0dadcc8abe072df" kindref="member">AESCTR_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><ref refid="_a_e_s_c_t_r_8h_1a268380d059ea502beb8d1e9ec98813f2" kindref="member">AESCTR_addData()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1a268380d059ea502beb8d1e9ec98813f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCTR_addData</definition>
        <argsstring>(AESCTR_Handle handle, AESCTR_SegmentedOperation *operation)</argsstring>
        <name>AESCTR_addData</name>
        <param>
          <type><ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_a_e_s_c_t_r___segmented_operation" kindref="compound">AESCTR_SegmentedOperation</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Encrypts or decrypts a segment of <emphasis>data</emphasis> with a <emphasis>length</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>inputLength</emphasis> must be a non-zero multiple of the block size (16-bytes). <ref refid="_a_e_s_c_t_r_8h_1a268380d059ea502beb8d1e9ec98813f2" kindref="member">AESCTR_addData()</ref> may be called an arbitrary number of times before finishing the operation with <ref refid="_a_e_s_c_t_r_8h_1a7993acdb3c9124ac7024b70cca8e2c51" kindref="member">AESCTR_finalize()</ref>.</para><para>This function blocks until the final stream bytes have been computed. It returns immediately when <ref refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4a40c3b7e8db7ff4ebd81a9f6477139c3f" kindref="member">AESCTR_RETURN_BEHAVIOR_CALLBACK</ref> is set.</para><para><simplesect kind="pre"><para>A segmented operation has been setup using <ref refid="_a_e_s_c_t_r_8h_1aff0a4d5aa1bc42d9d862462f36a496a4" kindref="member">AESCTR_setupEncrypt()</ref> or <ref refid="_a_e_s_c_t_r_8h_1af482d0963698740905ae0b25a4f2de53" kindref="member">AESCTR_setupDecrypt()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCTR handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_a_e_s_c_t_r___segmented_operation" kindref="compound">AESCTR_SegmentedOperation</ref> structure containing the parameters required to perform the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1a5abdae97a12f798523a6a5835747829e" kindref="member">AESCTR_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1ad78ff1fad9e9ef24e0dadcc8abe072df" kindref="member">AESCTR_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1afbb647a50a8af8a4c924f338e1bb200a" kindref="member">AESCTR_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1afbbaf8f51710acd01d591a335b312ef5" kindref="member">AESCTR_STATUS_UNALIGNED_IO_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The input and/or output buffer were not word-aligned.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><ref refid="_a_e_s_c_t_r_8h_1a268380d059ea502beb8d1e9ec98813f2" kindref="member">AESCTR_addData()</ref> or <ref refid="_a_e_s_c_t_r_8h_1a7993acdb3c9124ac7024b70cca8e2c51" kindref="member">AESCTR_finalize()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="818" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1a7993acdb3c9124ac7024b70cca8e2c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCTR_finalize</definition>
        <argsstring>(AESCTR_Handle handle, AESCTR_SegmentedOperation *operation)</argsstring>
        <name>AESCTR_finalize</name>
        <param>
          <type><ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_a_e_s_c_t_r___segmented_operation" kindref="compound">AESCTR_SegmentedOperation</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Finalize the AES operation. If new data needs to be added, <computeroutput>inputLength</computeroutput> will be used to govern how many bytes will be written. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>To finalize an operation without any additional data, set <computeroutput>inputLength</computeroutput> to zero. The input and output buffers will not be used in this scenario.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_e_s_c_t_r_8h_1aff0a4d5aa1bc42d9d862462f36a496a4" kindref="member">AESCTR_setupEncrypt()</ref> or <ref refid="_a_e_s_c_t_r_8h_1af482d0963698740905ae0b25a4f2de53" kindref="member">AESCTR_setupDecrypt()</ref> </para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_e_s_c_t_r_8h_1a268380d059ea502beb8d1e9ec98813f2" kindref="member">AESCTR_addData()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCTR handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_a_e_s_c_t_r___segmented_operation" kindref="compound">AESCTR_SegmentedOperation</ref> structure containing the parameters required to perform the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1a5abdae97a12f798523a6a5835747829e" kindref="member">AESCTR_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>In <ref refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4ade55945ff11c47457a75d97db2a20b2c" kindref="member">AESCTR_RETURN_BEHAVIOR_BLOCKING</ref> and <ref refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4a4a75cbc6c9b0ccde83c5cf9c5c5f053e" kindref="member">AESCTR_RETURN_BEHAVIOR_POLLING</ref>, this means the CTR was generated successfully. In <ref refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4a40c3b7e8db7ff4ebd81a9f6477139c3f" kindref="member">AESCTR_RETURN_BEHAVIOR_CALLBACK</ref>, this means the operation started successfully. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1ad78ff1fad9e9ef24e0dadcc8abe072df" kindref="member">AESCTR_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1afbb647a50a8af8a4c924f338e1bb200a" kindref="member">AESCTR_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1afbbaf8f51710acd01d591a335b312ef5" kindref="member">AESCTR_STATUS_UNALIGNED_IO_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The input and/or output buffer were not word-aligned. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="845" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1a55748990b81e9dfbfebf783ab9e21df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCTR_Operation_init</definition>
        <argsstring>(AESCTR_Operation *operation)</argsstring>
        <name>AESCTR_Operation_init</name>
        <param>
          <type><ref refid="_a_e_s_c_t_r_8h_1a5afaf34387204843aee3513ce646596f" kindref="member">AESCTR_Operation</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Function to initialize an <ref refid="_a_e_s_c_t_r_8h_1a5afaf34387204843aee3513ce646596f" kindref="member">AESCTR_Operation</ref> struct to its defaults (all zeroes) </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="_a_e_s_c_t_r_8h_1a795df729c916c7e2eb22b8dac194b086" kindref="member">AESCTR_OneStepOperation_init()</ref> or <ref refid="_a_e_s_c_t_r_8h_1adc4622c828393764b4eedea50982ca23" kindref="member">AESCTR_SegmentedOperation_init()</ref> based on whether it is a one-step or a segmented AESCTR operation.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="_a_e_s_c_t_r_8h_1a5afaf34387204843aee3513ce646596f" kindref="member">AESCTR_Operation</ref> structure for initialization </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="856" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1a795df729c916c7e2eb22b8dac194b086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCTR_OneStepOperation_init</definition>
        <argsstring>(AESCTR_OneStepOperation *operation)</argsstring>
        <name>AESCTR_OneStepOperation_init</name>
        <param>
          <type><ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Function to initialize an <ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref> struct to its defaults (all zeroes) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref> structure for initialization </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="864" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1adc4622c828393764b4eedea50982ca23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCTR_SegmentedOperation_init</definition>
        <argsstring>(AESCTR_SegmentedOperation *operation)</argsstring>
        <name>AESCTR_SegmentedOperation_init</name>
        <param>
          <type><ref refid="struct_a_e_s_c_t_r___segmented_operation" kindref="compound">AESCTR_SegmentedOperation</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Function to initialize an <ref refid="struct_a_e_s_c_t_r___segmented_operation" kindref="compound">AESCTR_SegmentedOperation</ref> struct to its defaults (all zeroes) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="struct_a_e_s_c_t_r___segmented_operation" kindref="compound">AESCTR_SegmentedOperation</ref> structure for initialization </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="872" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1aae8c7d322afc0ae2099c9ae1fe5727f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCTR_oneStepEncrypt</definition>
        <argsstring>(AESCTR_Handle handle, AESCTR_OneStepOperation *operation)</argsstring>
        <name>AESCTR_oneStepEncrypt</name>
        <param>
          <type><ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Function to perform an AESCTR encryption operation in one call. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>None of the buffers provided as arguments may be altered by the application during an ongoing operation. Doing so can yield corrupted ciphertext.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_e_s_c_t_r_8h_1ae60ed1df2e6c103601ad406b5ed7664b" kindref="member">AESCTR_open()</ref> or <ref refid="_a_e_s_c_t_r_8h_1ad51fedf3d21b002b529eae2fbb31ca23" kindref="member">AESCTR_construct()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCTR handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a struct containing the parameters required to perform the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1a5abdae97a12f798523a6a5835747829e" kindref="member">AESCTR_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1ad78ff1fad9e9ef24e0dadcc8abe072df" kindref="member">AESCTR_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1afbb647a50a8af8a4c924f338e1bb200a" kindref="member">AESCTR_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1afbbaf8f51710acd01d591a335b312ef5" kindref="member">AESCTR_STATUS_UNALIGNED_IO_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The input and/or output buffer were not word-aligned.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_a_e_s_c_t_r_8h_1a7265c273f23276a91f81d9e1759972b2" kindref="member">AESCTR_oneStepDecrypt()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="892" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1a7265c273f23276a91f81d9e1759972b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCTR_oneStepDecrypt</definition>
        <argsstring>(AESCTR_Handle handle, AESCTR_OneStepOperation *operation)</argsstring>
        <name>AESCTR_oneStepDecrypt</name>
        <param>
          <type><ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Function to perform an AESCTR decryption operation in one call. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>None of the buffers provided as arguments may be altered by the application during an ongoing operation. Doing so can yield corrupted plaintext.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_e_s_c_t_r_8h_1ae60ed1df2e6c103601ad406b5ed7664b" kindref="member">AESCTR_open()</ref> or <ref refid="_a_e_s_c_t_r_8h_1ad51fedf3d21b002b529eae2fbb31ca23" kindref="member">AESCTR_construct()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCTR handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a struct containing the parameters required to perform the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1a5abdae97a12f798523a6a5835747829e" kindref="member">AESCTR_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1ad78ff1fad9e9ef24e0dadcc8abe072df" kindref="member">AESCTR_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1afbb647a50a8af8a4c924f338e1bb200a" kindref="member">AESCTR_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1afbbaf8f51710acd01d591a335b312ef5" kindref="member">AESCTR_STATUS_UNALIGNED_IO_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The input and/or output buffer were not word-aligned.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_a_e_s_c_t_r_8h_1aae8c7d322afc0ae2099c9ae1fe5727f6" kindref="member">AESCTR_oneStepEncrypt()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="912" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1a738efd3afe2bf4a14ebe9a19aecbe91f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCTR_cancelOperation</definition>
        <argsstring>(AESCTR_Handle handle)</argsstring>
        <name>AESCTR_cancelOperation</name>
        <param>
          <type><ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Cancels an ongoing AESCTR operation. </para>        </briefdescription>
        <detaileddescription>
<para>Asynchronously cancels an AESCTR operation. Only available when using AESCTR_RETURN_BEHAVIOR_CALLBACK. The operation will terminate as though an error occurred. The return status code of the operation will be AESCTR_STATUS_CANCELED.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AESCTR handle</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_a_e_s_c_t_r_8h_1a5abdae97a12f798523a6a5835747829e" kindref="member">AESCTR_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was canceled or the operation had already completed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="926" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_t_r_8h_1ad51fedf3d21b002b529eae2fbb31ca23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref></type>
        <definition>AESCTR_Handle AESCTR_construct</definition>
        <argsstring>(AESCTR_Config *config, const AESCTR_Params *params)</argsstring>
        <name>AESCTR_construct</name>
        <param>
          <type><ref refid="_a_e_s_c_t_r_8h_1ab53ceee62301f4109aa47953eee5ae41" kindref="member">AESCTR_Config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const <ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Constructs a new AESCTR object. </para>        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="_a_e_s_c_t_r_8h_1ae60ed1df2e6c103601ad406b5ed7664b" kindref="member">AESCTR_open()</ref>, <ref refid="_a_e_s_c_t_r_8h_1ad51fedf3d21b002b529eae2fbb31ca23" kindref="member">AESCTR_construct()</ref> does not require the hwAttrs and object to be allocated in a <ref refid="_a_e_s_c_t_r_8h_1ab53ceee62301f4109aa47953eee5ae41" kindref="member">AESCTR_Config</ref> array that is indexed into. Instead, the <ref refid="_a_e_s_c_t_r_8h_1ab53ceee62301f4109aa47953eee5ae41" kindref="member">AESCTR_Config</ref>, hwAttrs, and object can be allocated at any location. This allows for relatively simple run-time allocation of temporary driver instances on the stack or the heap. The drawback is that this makes it more difficult to write device-agnostic code. If you use an ifdef with DeviceFamily, you can choose the correct object and hwAttrs to allocate. That compilation unit will be tied to the device it was compiled for at this point. To change devices, recompilation of the application with a different DeviceFamily setting is necessary.</para><para><simplesect kind="pre"><para>The object struct <computeroutput>config</computeroutput> points to must be zeroed out prior to calling this function. Otherwise, unexpected behavior may occur.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_a_e_s_c_t_r_8h_1ab53ceee62301f4109aa47953eee5ae41" kindref="member">AESCTR_Config</ref> describing the location of the object and hwAttrs.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref> to configure the driver instance.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a <ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref> on success or NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/AESCTR.h" line="953" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>AESCTR driver header. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_a_e_s_c_t_r_8h_1ti_drivers_AESCTR_Overview"/><heading level="3">Overview </heading>
</para><para>The Counter (CTR) mode of operation is a generic block cipher mode of operation that can be used with any block cipher including AES which is used in this implementation.</para><para>CTR mode encrypts and decrypts messages. It is not required for the message length to be evenly divisible by the cipher block size. This also means that padding the message is not required.</para><para><heading level="3">Operation </heading>
</para><para>CTR encryption and decryption perform the following steps:<orderedlist>
<listitem><para>Set the counter value to the initial counter value</para></listitem><listitem><para>Encrypt the counter value under the symmetric key</para></listitem><listitem><para>XOR the encrypted counter value with the input block (plaintext or ciphertext)</para></listitem><listitem><para>Increment the counter value. Interpret the byte array as a big-endian number.</para></listitem><listitem><para>Repeat steps 2 to 4 until the input is completely processed. If the input is not evenly divisible by the block size, XOR the last (u = input length % block size) input bytes with the most significant u bytes of the last encrypted counter value.</para></listitem></orderedlist>
</para><para>CTR performs the same steps regardless of whether it is used to encrypt or decrypt a message. The input merely changes.</para><para><heading level="3">Choosing Initial Counter Values </heading>
</para><para>CTR requires that each counter value used to encrypt a block of a message is unique for each key used. If this requirement is not kept, the confidentiality of that message block may be compromised.</para><para>There are two general strategies when choosing the initial counter value of a CTR operation to ensure this requirement holds.</para><para>The first is to choose an initial counter value for the first message and increment the initial counter value for a subsequent message by by message length % block length (16-bytes for AES). This effectively turns a sequence of messages into one long message. If 0 is chosen as the initial counter value, up to 2^128 - 1 blocks may be encrypted before key rotation is mandatory.</para><para>The second is to split the initial counter value into a nonce and counter section. The nonce of length n bits must be unique per message. This allows for up to 2^n - 1 messages to be encrypted before key rotation is required. The counter section of length c is incremented as usual. This limits messages to a length of at most 2^c - 1 blocks. n and c must be chosen such that n + c = block length in bits (128 bits for AES) holds.</para><para><anchor id="_a_e_s_c_t_r_8h_1ti_drivers_AESCTR_Usage"/><heading level="3">Usage </heading>
</para><para><heading level="4">Before starting a CTR operation </heading>
</para><para>Before starting a CTR operation, the application must do the following:<itemizedlist>
<listitem><para>Call <ref refid="_a_e_s_c_t_r_8h_1a09d8aeedd73b5cb95c4bc3e8089ea8ac" kindref="member">AESCTR_init()</ref> to initialize the driver</para></listitem><listitem><para>Call <ref refid="_a_e_s_c_t_r_8h_1a1f896d0c0acd590dcc9cc796fa96a647" kindref="member">AESCTR_Params_init()</ref> to initialize the <ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref> to default values.</para></listitem><listitem><para>Modify the <ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref> as desired</para></listitem><listitem><para>Call <ref refid="_a_e_s_c_t_r_8h_1ae60ed1df2e6c103601ad406b5ed7664b" kindref="member">AESCTR_open()</ref> to open an instance of the driver</para></listitem><listitem><para>Initialize a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. These opaque data structures are representations of keying material and its storage. Depending on how the keying material is stored (RAM or flash, key store), the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> must be initialized differently. The AESCTR API can handle all types of <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. However, not all device-specific implementations support all types of <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. Devices without a key store will not support CryptoKeys with keying material stored in a key store for example. All devices support plaintext CryptoKeys.</para></listitem><listitem><para>Initialize a single-step AESCTR operation using <ref refid="_a_e_s_c_t_r_8h_1a795df729c916c7e2eb22b8dac194b086" kindref="member">AESCTR_OneStepOperation_init()</ref> which is equivalent to the deprecated <ref refid="_a_e_s_c_t_r_8h_1a55748990b81e9dfbfebf783ab9e21df2" kindref="member">AESCTR_Operation_init()</ref>. If it&apos;s a segmented AESCTR operation, use <ref refid="_a_e_s_c_t_r_8h_1adc4622c828393764b4eedea50982ca23" kindref="member">AESCTR_SegmentedOperation_init()</ref> instead. Then set all the fields of the one-step or segmented operation struct accordingly.</para></listitem></itemizedlist>
</para><para><heading level="4">Starting a CTR operation </heading>
</para><para>The <ref refid="_a_e_s_c_t_r_8h_1aae8c7d322afc0ae2099c9ae1fe5727f6" kindref="member">AESCTR_oneStepEncrypt()</ref> and <ref refid="_a_e_s_c_t_r_8h_1a7265c273f23276a91f81d9e1759972b2" kindref="member">AESCTR_oneStepDecrypt()</ref> functions perform a CTR operation in a single call.</para><para><heading level="4">After the CTR operation completes </heading>
</para><para>After the CTR operation completes, the application should either start another operation or close the driver by calling <ref refid="_a_e_s_c_t_r_8h_1acb72a953b2a3426278555b267824f817" kindref="member">AESCTR_close()</ref>.</para><para><anchor id="_a_e_s_c_t_r_8h_1ti_drivers_AESCTR_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_a_e_s_c_t_r_8h_1ti_drivers_AESCTR_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>AESCTR<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/AESCTR.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Define<sp/>name<sp/>for<sp/>AESCTR<sp/>channel<sp/>index</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>AESCTR_INSTANCE<sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCTR_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>AESCTR_open(AESCTR_INSTANCE,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>symmetric<sp/>key</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>up<sp/>AESCTR_Operation</highlight></codeline>
<codeline><highlight class="normal">AESCTR_OneStepOperation_init(&amp;operation);</highlight></codeline>
<codeline><highlight class="normal">operation.key<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;cryptoKey;</highlight></codeline>
<codeline><highlight class="normal">operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline><highlight class="normal">operation.output<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ciphertext;</highlight></codeline>
<codeline><highlight class="normal">operation.inputLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(plaintext);</highlight></codeline>
<codeline><highlight class="normal">operation.initialCounter<sp/><sp/><sp/><sp/>=<sp/>initialCounter;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">encryptionResult<sp/>=<sp/>AESCTR_oneStepEncrypt(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCTR_close(handle);</highlight></codeline>
</programlisting></para><para><anchor id="_a_e_s_c_t_r_8h_1ti_drivers_AESCTR_Examples"/><heading level="4">Examples </heading>
</para><para><heading level="5">One step CTR encryption with plaintext <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> in blocking return mode </heading>
</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/AESCTR.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCTR_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int_fast16_t<sp/>encryptionResult;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>For<sp/>example<sp/>purposes<sp/>only.<sp/>Generate<sp/>IVs<sp/>in<sp/>a<sp/>non-static<sp/>way<sp/>in<sp/>practice.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Test<sp/>vector<sp/>from<sp/>NIST<sp/>SP<sp/>800-38A</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>initialCounter[16]<sp/>=<sp/><sp/><sp/><sp/>{0xf0,<sp/>0xf1,<sp/>0xf2,<sp/>0xf3,<sp/>0xf4,<sp/>0xf5,<sp/>0xf6,<sp/>0xf7,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xf8,<sp/>0xf9,<sp/>0xfa,<sp/>0xfb,<sp/>0xfc,<sp/>0xfd,<sp/>0xfe,<sp/>0xff};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>plaintext[64]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0x6b,<sp/>0xc1,<sp/>0xbe,<sp/>0xe2,<sp/>0x2e,<sp/>0x40,<sp/>0x9f,<sp/>0x96,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xe9,<sp/>0x3d,<sp/>0x7e,<sp/>0x11,<sp/>0x73,<sp/>0x93,<sp/>0x17,<sp/>0x2a,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xae,<sp/>0x2d,<sp/>0x8a,<sp/>0x57,<sp/>0x1e,<sp/>0x03,<sp/>0xac,<sp/>0x9c,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x9e,<sp/>0xb7,<sp/>0x6f,<sp/>0xac,<sp/>0x45,<sp/>0xaf,<sp/>0x8e,<sp/>0x51,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x30,<sp/>0xc8,<sp/>0x1c,<sp/>0x46,<sp/>0xa3,<sp/>0x5c,<sp/>0xe4,<sp/>0x11,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xe5,<sp/>0xfb,<sp/>0xc1,<sp/>0x19,<sp/>0x1a,<sp/>0x0a,<sp/>0x52,<sp/>0xef,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xf6,<sp/>0x9f,<sp/>0x24,<sp/>0x45,<sp/>0xdf,<sp/>0x4f,<sp/>0x9b,<sp/>0x17,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xad,<sp/>0x2b,<sp/>0x41,<sp/>0x7b,<sp/>0xe6,<sp/>0x6c,<sp/>0x37,<sp/>0x10};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ciphertext[sizeof(plaintext)];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>keyingMaterial[16]<sp/>=<sp/><sp/><sp/><sp/>{0x2b,<sp/>0x7e,<sp/>0x15,<sp/>0x16,<sp/>0x28,<sp/>0xae,<sp/>0xd2,<sp/>0xa6,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xab,<sp/>0xf7,<sp/>0x15,<sp/>0x88,<sp/>0x09,<sp/>0xcf,<sp/>0x4f,<sp/>0x3c};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>AESCTR_open(0,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCTR_OneStepOperation<sp/>operation;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCTR_OneStepOperation_init(&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.key<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;cryptoKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.output<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ciphertext;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.inputLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(plaintext);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.initialCounter<sp/><sp/><sp/><sp/>=<sp/>initialCounter;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>encryptionResult<sp/>=<sp/>AESCTR_oneStepEncrypt(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(encryptionResult<sp/>!=<sp/>AESCTR_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>The<sp/>ciphertext<sp/>should<sp/>be<sp/>the<sp/>following<sp/>after<sp/>the<sp/>encryption<sp/>operation:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x87,<sp/>0x4d,<sp/>0x61,<sp/>0x91,<sp/>0xb6,<sp/>0x20,<sp/>0xe3,<sp/>0x26,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x1b,<sp/>0xef,<sp/>0x68,<sp/>0x64,<sp/>0x99,<sp/>0x0d,<sp/>0xb6,<sp/>0xce,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x98,<sp/>0x06,<sp/>0xf6,<sp/>0x6b,<sp/>0x79,<sp/>0x70,<sp/>0xfd,<sp/>0xff,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x86,<sp/>0x17,<sp/>0x18,<sp/>0x7b,<sp/>0xb9,<sp/>0xff,<sp/>0xfd,<sp/>0xff,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x5a,<sp/>0xe4,<sp/>0xdf,<sp/>0x3e,<sp/>0xdb,<sp/>0xd5,<sp/>0xd3,<sp/>0x5e,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x5b,<sp/>0x4f,<sp/>0x09,<sp/>0x02,<sp/>0x0d,<sp/>0xb0,<sp/>0x3e,<sp/>0xab,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x1e,<sp/>0x03,<sp/>0x1d,<sp/>0xda,<sp/>0x2f,<sp/>0xbe,<sp/>0x03,<sp/>0xd1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x79,<sp/>0x21,<sp/>0x70,<sp/>0xa0,<sp/>0xf3,<sp/>0x00,<sp/>0x9c,<sp/>0xee</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCTR_close(handle);</highlight></codeline>
</programlisting></para><para><heading level="5">One step CTR decryption with plaintext <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> in callback return mode </heading>
</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/AESCTR.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>ctrCallback(AESCTR_Handle<sp/>handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>returnValue,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AESCTR_OperationUnion<sp/>*operation,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AESCTR_OperationType<sp/>operationType)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(returnValue<sp/>!=<sp/>AESCTR_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">AESCTR_Operation<sp/>operation;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>ctrStartFunction(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>initialCounter[16]<sp/>=<sp/><sp/>{0x00,<sp/>0xE0,<sp/>0x01,<sp/>0x7B,<sp/>0x27,<sp/>0x77,<sp/>0x7F,<sp/>0x3F,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x4A,<sp/>0x17,<sp/>0x86,<sp/>0xF0,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x01};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ciphertext[]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0xC1,<sp/>0xCF,<sp/>0x48,<sp/>0xA8,<sp/>0x9F,<sp/>0x2F,<sp/>0xFD,<sp/>0xD9,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xCF,<sp/>0x46,<sp/>0x52,<sp/>0xE9,<sp/>0xEF,<sp/>0xDB,<sp/>0x72,<sp/>0xD7,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x45,<sp/>0x40,<sp/>0xA4,<sp/>0x2B,<sp/>0xDE,<sp/>0x6D,<sp/>0x78,<sp/>0x36,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xD5,<sp/>0x9A,<sp/>0x5C,<sp/>0xEA,<sp/>0xAE,<sp/>0xF3,<sp/>0x10,<sp/>0x53,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x25,<sp/>0xB2,<sp/>0x07,<sp/>0x2F};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>keyingMaterial[]<sp/>=<sp/><sp/><sp/><sp/>{0x76,<sp/>0x91,<sp/>0xBE,<sp/>0x03,<sp/>0x5E,<sp/>0x50,<sp/>0x20,<sp/>0xA8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xAC,<sp/>0x6E,<sp/>0x61,<sp/>0x85,<sp/>0x29,<sp/>0xF9,<sp/>0xA0,<sp/>0xDC};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>plaintext[sizeof(ciphertext)];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCTR_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCTR_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int_fast16_t<sp/>decryptionResult;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCTR_OneStepOperation<sp/>operation;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCTR_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.returnBehavior<sp/>=<sp/>AESCTR_RETURN_BEHAVIOR_CALLBACK;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.callbackFxn<sp/>=<sp/>ctrCallback;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>AESCTR_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCTR_OneStepOperation_init(&amp;operation);<sp/>//<sp/>Optional<sp/>as<sp/>all<sp/>struct<sp/>members<sp/>will<sp/>be<sp/>set<sp/>before<sp/>use.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.key<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;cryptoKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ciphertext;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.output<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.inputLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(ciphertext);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.initialCounter<sp/><sp/><sp/><sp/>=<sp/>initialCounter;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decryptionResult<sp/>=<sp/>AESCTR_oneStepDecrypt(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(decryptionResult<sp/>!=<sp/>AESCTR_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>do<sp/>other<sp/>things<sp/>while<sp/>CTR<sp/>operation<sp/>completes<sp/>in<sp/>the<sp/>background</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>After<sp/>the<sp/>operation<sp/>completes<sp/>and<sp/>the<sp/>callback<sp/>is<sp/>invoked,<sp/>the<sp/>resultant</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>plaintext<sp/>should<sp/>be:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x00,<sp/>0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04,<sp/>0x05,<sp/>0x06,<sp/>0x07,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x08,<sp/>0x09,<sp/>0x0A,<sp/>0x0B,<sp/>0x0C,<sp/>0x0D,<sp/>0x0E,<sp/>0x0F,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x10,<sp/>0x11,<sp/>0x12,<sp/>0x13,<sp/>0x14,<sp/>0x15,<sp/>0x16,<sp/>0x17,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x18,<sp/>0x19,<sp/>0x1A,<sp/>0x1B,<sp/>0x1C,<sp/>0x1D,<sp/>0x1E,<sp/>0x1F,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0x20,<sp/>0x21,<sp/>0x22,<sp/>0x23</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCTR_close(handle);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="5">Multi-step AES CTR encrypt with plaintext <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> in polling return mode </heading>
</para><para><programlisting><codeline><highlight class="normal"><sp/>#include<sp/>&lt;ti/drivers/AESCTR.h&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/>#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>#define<sp/>AES_BLOCK_SIZE<sp/>16<sp/><sp/>//<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>AESCTR_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal"><sp/>AESCTR_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/>CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/>int_fast16_t<sp/>retVal;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>For<sp/>example<sp/>purposes<sp/>only.</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>plaintext[36]<sp/>=<sp/><sp/><sp/><sp/>{0x00,<sp/>0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04,<sp/>0x05,<sp/>0x06,<sp/>0x07,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x08,<sp/>0x09,<sp/>0x0A,<sp/>0x0B,<sp/>0x0C,<sp/>0x0D,<sp/>0x0E,<sp/>0x0F,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x10,<sp/>0x11,<sp/>0x12,<sp/>0x13,<sp/>0x14,<sp/>0x15,<sp/>0x16,<sp/>0x17,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x18,<sp/>0x19,<sp/>0x1A,<sp/>0x1B,<sp/>0x1C,<sp/>0x1D,<sp/>0x1E,<sp/>0x1F,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x20,<sp/>0x21,<sp/>0x22,<sp/>0x23};</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>initialCounter[]<sp/>=<sp/>{0x00,<sp/>0xE0,<sp/>0x01,<sp/>0x7B,<sp/>0x27,<sp/>0x77,<sp/>0x7F,<sp/>0x3F,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x4A,<sp/>0x17,<sp/>0x86,<sp/>0xF0,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x01};</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>keyingMaterial[]<sp/>=<sp/>{0x76,<sp/>0x91,<sp/>0xBE,<sp/>0x03,<sp/>0x5E,<sp/>0x50,<sp/>0x20,<sp/>0xA8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xAC,<sp/>0x6E,<sp/>0x61,<sp/>0x85,<sp/>0x29,<sp/>0xF9,<sp/>0xA0,<sp/>0xDC};</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>ciphertext[sizeof(plaintext)];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>AESCTR_Params_init(&amp;params)</highlight></codeline>
<codeline><highlight class="normal"><sp/>params.returnBehavior<sp/>=<sp/>AESCTR_RETURN_BEHAVIOR_POLLING;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>handle<sp/>=<sp/>AESCTR_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>AESCTR_SegmentedOperation<sp/>operation;</highlight></codeline>
<codeline><highlight class="normal"><sp/>AESCTR_SegmentedOperation_init(&amp;operation);<sp/>//<sp/>Optional<sp/>as<sp/>all<sp/>struct<sp/>members<sp/>will<sp/>be<sp/>set<sp/>before<sp/>use.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>retVal<sp/>=<sp/>AESCTR_setupEncrypt(handle,<sp/>&amp;cryptoKey,<sp/>initialCounter);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(retVal<sp/>!=<sp/>AESCTR_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.inputLength<sp/><sp/>=<sp/>AES_BLOCK_SIZE;<sp/><sp/>//<sp/>Only<sp/>block<sp/>multiple<sp/>lengths<sp/>are<sp/>permitted<sp/>when<sp/>adding<sp/>data.</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.output<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ciphertext;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>retVal<sp/>=<sp/>AESCTR_addData(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(retVal<sp/>!=<sp/>AESCTR_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext<sp/>+<sp/>AES_BLOCK_SIZE;</highlight></codeline>
<codeline><highlight class="normal"><sp/>operation.inputLength<sp/><sp/>=<sp/>sizeof(plaintext)<sp/>-<sp/>AES_BLOCK_SIZE;<sp/><sp/>//<sp/>Non-block<sp/>multiple<sp/>length<sp/>permitted<sp/>during</highlight></codeline>
<codeline><highlight class="normal">finalization.<sp/>operation.output<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ciphertext<sp/>+<sp/>AES_BLOCK_SIZE;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>retVal<sp/>=<sp/>AESCTR_finalize(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(retVal<sp/>!=<sp/>AESCTR_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Upon<sp/>successful<sp/>return,<sp/>the<sp/>resulting<sp/>ciphertext<sp/>should<sp/>be:</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/><sp/><sp/>0xC1,<sp/>0xCF,<sp/>0x48,<sp/>0xA8,<sp/>0x9F,<sp/>0x2F,<sp/>0xFD,<sp/>0xD9,</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/><sp/><sp/>0xCF,<sp/>0x46,<sp/>0x52,<sp/>0xE9,<sp/>0xEF,<sp/>0xDB,<sp/>0x72,<sp/>0xD7,</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/><sp/><sp/>0x45,<sp/>0x40,<sp/>0xA4,<sp/>0x2B,<sp/>0xDE,<sp/>0x6D,<sp/>0x78,<sp/>0x36,</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/><sp/><sp/>0xD5,<sp/>0x9A,<sp/>0x5C,<sp/>0xEA,<sp/>0xAE,<sp/>0xF3,<sp/>0x10,<sp/>0x53,</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/><sp/><sp/>0x25,<sp/>0xB2,<sp/>0x07,<sp/>0x2F</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>AESCTR_close(handle);</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018-2021,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>AESCTR.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>AESCTR<sp/>driver<sp/>header</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>@anchor<sp/>ti_drivers_AESCTR_Overview</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>&lt;h3&gt;<sp/>Overview<sp/>&lt;/h3&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>The<sp/>Counter<sp/>(CTR)<sp/>mode<sp/>of<sp/>operation<sp/>is<sp/>a<sp/>generic<sp/>block<sp/>cipher<sp/>mode<sp/>of<sp/>operation</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>that<sp/>can<sp/>be<sp/>used<sp/>with<sp/>any<sp/>block<sp/>cipher<sp/>including<sp/>AES<sp/>which<sp/>is<sp/>used<sp/>in<sp/>this</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>implementation.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>CTR<sp/>mode<sp/>encrypts<sp/>and<sp/>decrypts<sp/>messages.<sp/>It<sp/>is<sp/>not<sp/>required<sp/>for<sp/>the<sp/>message</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>length<sp/>to<sp/>be<sp/>evenly<sp/>divisible<sp/>by<sp/>the<sp/>cipher<sp/>block<sp/>size.<sp/>This<sp/>also<sp/>means</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>that<sp/>padding<sp/>the<sp/>message<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>&lt;h3&gt;<sp/>Operation<sp/>&lt;/h3&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>CTR<sp/>encryption<sp/>and<sp/>decryption<sp/>perform<sp/>the<sp/>following<sp/>steps:</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-#<sp/>Set<sp/>the<sp/>counter<sp/>value<sp/>to<sp/>the<sp/>initial<sp/>counter<sp/>value</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-#<sp/>Encrypt<sp/>the<sp/>counter<sp/>value<sp/>under<sp/>the<sp/>symmetric<sp/>key</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-#<sp/>XOR<sp/>the<sp/>encrypted<sp/>counter<sp/>value<sp/>with<sp/>the<sp/>input<sp/>block<sp/>(plaintext<sp/>or<sp/>ciphertext)</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-#<sp/>Increment<sp/>the<sp/>counter<sp/>value.<sp/>Interpret<sp/>the<sp/>byte<sp/>array<sp/>as<sp/>a<sp/>big-endian<sp/>number.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-#<sp/>Repeat<sp/>steps<sp/>2<sp/>to<sp/>4<sp/>until<sp/>the<sp/>input<sp/>is<sp/>completely<sp/>processed.<sp/>If<sp/>the</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>is<sp/>not<sp/>evenly<sp/>divisible<sp/>by<sp/>the<sp/>block<sp/>size,<sp/>XOR<sp/>the<sp/>last</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(u<sp/>=<sp/>input<sp/>length<sp/>%<sp/>block<sp/>size)<sp/>input<sp/>bytes<sp/>with<sp/>the<sp/>most<sp/>significant</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>bytes<sp/>of<sp/>the<sp/>last<sp/>encrypted<sp/>counter<sp/>value.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>CTR<sp/>performs<sp/>the<sp/>same<sp/>steps<sp/>regardless<sp/>of<sp/>whether<sp/>it<sp/>is<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>encrypt<sp/>or<sp/>decrypt<sp/>a<sp/>message.<sp/>The<sp/>input<sp/>merely<sp/>changes.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>&lt;h3&gt;<sp/>Choosing<sp/>Initial<sp/>Counter<sp/>Values<sp/>&lt;/h3&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>CTR<sp/>requires<sp/>that<sp/>each<sp/>counter<sp/>value<sp/>used<sp/>to<sp/>encrypt<sp/>a<sp/>block<sp/>of<sp/>a<sp/>message</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>is<sp/>unique<sp/>for<sp/>each<sp/>key<sp/>used.<sp/>If<sp/>this<sp/>requirement<sp/>is<sp/>not<sp/>kept,<sp/>the</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>confidentiality<sp/>of<sp/>that<sp/>message<sp/>block<sp/>may<sp/>be<sp/>compromised.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>There<sp/>are<sp/>two<sp/>general<sp/>strategies<sp/>when<sp/>choosing<sp/>the<sp/>initial<sp/>counter<sp/>value</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>of<sp/>a<sp/>CTR<sp/>operation<sp/>to<sp/>ensure<sp/>this<sp/>requirement<sp/>holds.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>The<sp/>first<sp/>is<sp/>to<sp/>choose<sp/>an<sp/>initial<sp/>counter<sp/>value<sp/>for<sp/>the<sp/>first<sp/>message</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>and<sp/>increment<sp/>the<sp/>initial<sp/>counter<sp/>value<sp/>for<sp/>a<sp/>subsequent<sp/>message<sp/>by</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>by<sp/>message<sp/>length<sp/>%<sp/>block<sp/>length<sp/>(16-bytes<sp/>for<sp/>AES).<sp/>This<sp/>effectively</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>turns<sp/>a<sp/>sequence<sp/>of<sp/>messages<sp/>into<sp/>one<sp/>long<sp/>message.<sp/>If<sp/>0<sp/>is<sp/>chosen</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>as<sp/>the<sp/>initial<sp/>counter<sp/>value,<sp/>up<sp/>to<sp/>2^128<sp/>-<sp/>1<sp/>blocks<sp/>may<sp/>be<sp/>encrypted<sp/>before</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>key<sp/>rotation<sp/>is<sp/>mandatory.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>The<sp/>second<sp/>is<sp/>to<sp/>split<sp/>the<sp/>initial<sp/>counter<sp/>value<sp/>into<sp/>a<sp/>nonce<sp/>and</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>counter<sp/>section.<sp/>The<sp/>nonce<sp/>of<sp/>length<sp/>n<sp/>bits<sp/>must<sp/>be<sp/>unique<sp/>per<sp/>message.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>This<sp/>allows<sp/>for<sp/>up<sp/>to<sp/>2^n<sp/>-<sp/>1<sp/>messages<sp/>to<sp/>be<sp/>encrypted<sp/>before</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>key<sp/>rotation<sp/>is<sp/>required.<sp/>The<sp/>counter<sp/>section<sp/>of<sp/>length<sp/>c<sp/>is<sp/>incremented</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>as<sp/>usual.<sp/>This<sp/>limits<sp/>messages<sp/>to<sp/>a<sp/>length<sp/>of<sp/>at<sp/>most<sp/>2^c<sp/>-<sp/>1<sp/>blocks.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>n<sp/>and<sp/>c<sp/>must<sp/>be<sp/>chosen<sp/>such<sp/>that<sp/>n<sp/>+<sp/>c<sp/>=<sp/>block<sp/>length<sp/>in<sp/>bits</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>(128<sp/>bits<sp/>for<sp/>AES)<sp/>holds.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>@anchor<sp/>ti_drivers_AESCTR_Usage</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>&lt;h3&gt;<sp/>Usage<sp/>&lt;/h3&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>&lt;h4&gt;<sp/>Before<sp/>starting<sp/>a<sp/>CTR<sp/>operation<sp/>&lt;/h4&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>Before<sp/>starting<sp/>a<sp/>CTR<sp/>operation,<sp/>the<sp/>application<sp/>must<sp/>do<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>Call<sp/>#AESCTR_init()<sp/>to<sp/>initialize<sp/>the<sp/>driver</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>Call<sp/>#AESCTR_Params_init()<sp/>to<sp/>initialize<sp/>the<sp/>#AESCTR_Params<sp/>to<sp/>default<sp/>values.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>Modify<sp/>the<sp/>#AESCTR_Params<sp/>as<sp/>desired</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>Call<sp/>#AESCTR_open()<sp/>to<sp/>open<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>driver</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>Initialize<sp/>a<sp/>CryptoKey.<sp/>These<sp/>opaque<sp/>data<sp/>structures<sp/>are<sp/>representations</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>keying<sp/>material<sp/>and<sp/>its<sp/>storage.<sp/>Depending<sp/>on<sp/>how<sp/>the<sp/>keying<sp/>material</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>stored<sp/>(RAM<sp/>or<sp/>flash,<sp/>key<sp/>store),<sp/>the<sp/>CryptoKey<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialized<sp/>differently.<sp/>The<sp/>AESCTR<sp/>API<sp/>can<sp/>handle<sp/>all<sp/>types<sp/>of<sp/>CryptoKey.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>However,<sp/>not<sp/>all<sp/>device-specific<sp/>implementations<sp/>support<sp/>all<sp/>types<sp/>of<sp/>CryptoKey.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Devices<sp/>without<sp/>a<sp/>key<sp/>store<sp/>will<sp/>not<sp/>support<sp/>CryptoKeys<sp/>with<sp/>keying<sp/>material</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>stored<sp/>in<sp/>a<sp/>key<sp/>store<sp/>for<sp/>example.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>All<sp/>devices<sp/>support<sp/>plaintext<sp/>CryptoKeys.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>Initialize<sp/>a<sp/>single-step<sp/>AESCTR<sp/>operation<sp/>using<sp/>#AESCTR_OneStepOperation_init()</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>deprecated<sp/>#AESCTR_Operation_init().<sp/>If<sp/>it&apos;s</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>segmented<sp/>AESCTR<sp/>operation,<sp/>use<sp/>#AESCTR_SegmentedOperation_init()<sp/>instead.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Then<sp/>set<sp/>all<sp/>the<sp/>fields<sp/>of<sp/>the<sp/>one-step<sp/>or<sp/>segmented<sp/>operation<sp/>struct<sp/>accordingly.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>&lt;h4&gt;<sp/>Starting<sp/>a<sp/>CTR<sp/>operation<sp/>&lt;/h4&gt;</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>The<sp/>AESCTR_oneStepEncrypt()<sp/>and<sp/>AESCTR_oneStepDecrypt()<sp/>functions<sp/>perform<sp/>a<sp/>CTR<sp/>operation</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>single<sp/>call.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>&lt;h4&gt;<sp/>After<sp/>the<sp/>CTR<sp/>operation<sp/>completes<sp/>&lt;/h4&gt;</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>After<sp/>the<sp/>CTR<sp/>operation<sp/>completes,<sp/>the<sp/>application<sp/>should<sp/>either<sp/>start</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>another<sp/>operation<sp/>or<sp/>close<sp/>the<sp/>driver<sp/>by<sp/>calling<sp/>#AESCTR_close().</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>@anchor<sp/>ti_drivers_AESCTR_Synopsis</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>##<sp/>Synopsis</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>@anchor<sp/>ti_drivers_AESCTR_Synopsis_Code</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>//<sp/>Import<sp/>AESCTR<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>#include<sp/>&lt;ti/drivers/AESCTR.h&gt;</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>//<sp/>Define<sp/>name<sp/>for<sp/>AESCTR<sp/>channel<sp/>index</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>#define<sp/>AESCTR_INSTANCE<sp/>0</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>AESCTR_init();</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>handle<sp/>=<sp/>AESCTR_open(AESCTR_INSTANCE,<sp/>NULL);</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>//<sp/>Initialize<sp/>symmetric<sp/>key</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>//<sp/>Set<sp/>up<sp/>AESCTR_Operation</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>AESCTR_OneStepOperation_init(&amp;operation);</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>operation.key<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;cryptoKey;</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>operation.output<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ciphertext;</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>operation.inputLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(plaintext);</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>operation.initialCounter<sp/><sp/><sp/><sp/>=<sp/>initialCounter;</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>encryptionResult<sp/>=<sp/>AESCTR_oneStepEncrypt(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>AESCTR_close(handle);</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>@anchor<sp/>ti_drivers_AESCTR_Examples</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>&lt;h4&gt;<sp/>Examples<sp/>&lt;/h4&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>&lt;h5&gt;<sp/>One<sp/>step<sp/>CTR<sp/>encryption<sp/>with<sp/>plaintext<sp/>CryptoKey<sp/>in<sp/>blocking<sp/>return<sp/>mode<sp/>&lt;/h5&gt;</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>#include<sp/>&lt;ti/drivers/AESCTR.h&gt;</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>...</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>AESCTR_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>encryptionResult;</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>For<sp/>example<sp/>purposes<sp/>only.<sp/>Generate<sp/>IVs<sp/>in<sp/>a<sp/>non-static<sp/>way<sp/>in<sp/>practice.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>Test<sp/>vector<sp/>from<sp/>NIST<sp/>SP<sp/>800-38A</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>initialCounter[16]<sp/>=<sp/><sp/><sp/><sp/>{0xf0,<sp/>0xf1,<sp/>0xf2,<sp/>0xf3,<sp/>0xf4,<sp/>0xf5,<sp/>0xf6,<sp/>0xf7,</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xf8,<sp/>0xf9,<sp/>0xfa,<sp/>0xfb,<sp/>0xfc,<sp/>0xfd,<sp/>0xfe,<sp/>0xff};</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>plaintext[64]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0x6b,<sp/>0xc1,<sp/>0xbe,<sp/>0xe2,<sp/>0x2e,<sp/>0x40,<sp/>0x9f,<sp/>0x96,</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xe9,<sp/>0x3d,<sp/>0x7e,<sp/>0x11,<sp/>0x73,<sp/>0x93,<sp/>0x17,<sp/>0x2a,</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xae,<sp/>0x2d,<sp/>0x8a,<sp/>0x57,<sp/>0x1e,<sp/>0x03,<sp/>0xac,<sp/>0x9c,</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x9e,<sp/>0xb7,<sp/>0x6f,<sp/>0xac,<sp/>0x45,<sp/>0xaf,<sp/>0x8e,<sp/>0x51,</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x30,<sp/>0xc8,<sp/>0x1c,<sp/>0x46,<sp/>0xa3,<sp/>0x5c,<sp/>0xe4,<sp/>0x11,</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xe5,<sp/>0xfb,<sp/>0xc1,<sp/>0x19,<sp/>0x1a,<sp/>0x0a,<sp/>0x52,<sp/>0xef,</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xf6,<sp/>0x9f,<sp/>0x24,<sp/>0x45,<sp/>0xdf,<sp/>0x4f,<sp/>0x9b,<sp/>0x17,</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xad,<sp/>0x2b,<sp/>0x41,<sp/>0x7b,<sp/>0xe6,<sp/>0x6c,<sp/>0x37,<sp/>0x10};</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ciphertext[sizeof(plaintext)];</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>keyingMaterial[16]<sp/>=<sp/><sp/><sp/><sp/>{0x2b,<sp/>0x7e,<sp/>0x15,<sp/>0x16,<sp/>0x28,<sp/>0xae,<sp/>0xd2,<sp/>0xa6,</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xab,<sp/>0xf7,<sp/>0x15,<sp/>0x88,<sp/>0x09,<sp/>0xcf,<sp/>0x4f,<sp/>0x3c};</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>AESCTR_open(0,<sp/>NULL);</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>AESCTR_OneStepOperation<sp/>operation;</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>AESCTR_OneStepOperation_init(&amp;operation);</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>operation.key<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;cryptoKey;</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>operation.output<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ciphertext;</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>operation.inputLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(plaintext);</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>operation.initialCounter<sp/><sp/><sp/><sp/>=<sp/>initialCounter;</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>encryptionResult<sp/>=<sp/>AESCTR_oneStepEncrypt(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>(encryptionResult<sp/>!=<sp/>AESCTR_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>ciphertext<sp/>should<sp/>be<sp/>the<sp/>following<sp/>after<sp/>the<sp/>encryption<sp/>operation:</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x87,<sp/>0x4d,<sp/>0x61,<sp/>0x91,<sp/>0xb6,<sp/>0x20,<sp/>0xe3,<sp/>0x26,</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x1b,<sp/>0xef,<sp/>0x68,<sp/>0x64,<sp/>0x99,<sp/>0x0d,<sp/>0xb6,<sp/>0xce,</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x98,<sp/>0x06,<sp/>0xf6,<sp/>0x6b,<sp/>0x79,<sp/>0x70,<sp/>0xfd,<sp/>0xff,</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x86,<sp/>0x17,<sp/>0x18,<sp/>0x7b,<sp/>0xb9,<sp/>0xff,<sp/>0xfd,<sp/>0xff,</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x5a,<sp/>0xe4,<sp/>0xdf,<sp/>0x3e,<sp/>0xdb,<sp/>0xd5,<sp/>0xd3,<sp/>0x5e,</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x5b,<sp/>0x4f,<sp/>0x09,<sp/>0x02,<sp/>0x0d,<sp/>0xb0,<sp/>0x3e,<sp/>0xab,</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x1e,<sp/>0x03,<sp/>0x1d,<sp/>0xda,<sp/>0x2f,<sp/>0xbe,<sp/>0x03,<sp/>0xd1,</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x79,<sp/>0x21,<sp/>0x70,<sp/>0xa0,<sp/>0xf3,<sp/>0x00,<sp/>0x9c,<sp/>0xee</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>AESCTR_close(handle);</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>&lt;h5&gt;<sp/>One<sp/>step<sp/>CTR<sp/>decryption<sp/>with<sp/>plaintext<sp/>CryptoKey<sp/>in<sp/>callback<sp/>return<sp/>mode<sp/>&lt;/h5&gt;</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>#include<sp/>&lt;ti/drivers/AESCTR.h&gt;</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>...</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>void<sp/>ctrCallback(AESCTR_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>returnValue,</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AESCTR_OperationUnion<sp/>*operation,</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AESCTR_OperationType<sp/>operationType)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>(returnValue<sp/>!=<sp/>AESCTR_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>AESCTR_Operation<sp/>operation;</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>void<sp/>ctrStartFunction(void)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>initialCounter[16]<sp/>=<sp/><sp/>{0x00,<sp/>0xE0,<sp/>0x01,<sp/>0x7B,<sp/>0x27,<sp/>0x77,<sp/>0x7F,<sp/>0x3F,</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x4A,<sp/>0x17,<sp/>0x86,<sp/>0xF0,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x01};</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ciphertext[]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0xC1,<sp/>0xCF,<sp/>0x48,<sp/>0xA8,<sp/>0x9F,<sp/>0x2F,<sp/>0xFD,<sp/>0xD9,</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xCF,<sp/>0x46,<sp/>0x52,<sp/>0xE9,<sp/>0xEF,<sp/>0xDB,<sp/>0x72,<sp/>0xD7,</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x45,<sp/>0x40,<sp/>0xA4,<sp/>0x2B,<sp/>0xDE,<sp/>0x6D,<sp/>0x78,<sp/>0x36,</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xD5,<sp/>0x9A,<sp/>0x5C,<sp/>0xEA,<sp/>0xAE,<sp/>0xF3,<sp/>0x10,<sp/>0x53,</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x25,<sp/>0xB2,<sp/>0x07,<sp/>0x2F};</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>keyingMaterial[]<sp/>=<sp/><sp/><sp/><sp/>{0x76,<sp/>0x91,<sp/>0xBE,<sp/>0x03,<sp/>0x5E,<sp/>0x50,<sp/>0x20,<sp/>0xA8,</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xAC,<sp/>0x6E,<sp/>0x61,<sp/>0x85,<sp/>0x29,<sp/>0xF9,<sp/>0xA0,<sp/>0xDC};</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>plaintext[sizeof(ciphertext)];</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>AESCTR_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>AESCTR_Params<sp/>params;</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>decryptionResult;</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>AESCTR_OneStepOperation<sp/>operation;</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>AESCTR_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>params.returnBehavior<sp/>=<sp/>AESCTR_RETURN_BEHAVIOR_CALLBACK;</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>params.callbackFxn<sp/>=<sp/>ctrCallback;</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>AESCTR_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>AESCTR_OneStepOperation_init(&amp;operation);<sp/>//<sp/>Optional<sp/>as<sp/>all<sp/>struct<sp/>members<sp/>will<sp/>be<sp/>set<sp/>before<sp/>use.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>operation.key<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;cryptoKey;</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ciphertext;</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>operation.output<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>operation.inputLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(ciphertext);</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>operation.initialCounter<sp/><sp/><sp/><sp/>=<sp/>initialCounter;</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>decryptionResult<sp/>=<sp/>AESCTR_oneStepDecrypt(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>(decryptionResult<sp/>!=<sp/>AESCTR_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>do<sp/>other<sp/>things<sp/>while<sp/>CTR<sp/>operation<sp/>completes<sp/>in<sp/>the<sp/>background</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>After<sp/>the<sp/>operation<sp/>completes<sp/>and<sp/>the<sp/>callback<sp/>is<sp/>invoked,<sp/>the<sp/>resultant</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>plaintext<sp/>should<sp/>be:</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x00,<sp/>0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04,<sp/>0x05,<sp/>0x06,<sp/>0x07,</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x08,<sp/>0x09,<sp/>0x0A,<sp/>0x0B,<sp/>0x0C,<sp/>0x0D,<sp/>0x0E,<sp/>0x0F,</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x10,<sp/>0x11,<sp/>0x12,<sp/>0x13,<sp/>0x14,<sp/>0x15,<sp/>0x16,<sp/>0x17,</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x18,<sp/>0x19,<sp/>0x1A,<sp/>0x1B,<sp/>0x1C,<sp/>0x1D,<sp/>0x1E,<sp/>0x1F,</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>0x20,<sp/>0x21,<sp/>0x22,<sp/>0x23</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>AESCTR_close(handle);</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/><sp/>&lt;h5&gt;<sp/>Multi-step<sp/>AES<sp/>CTR<sp/>encrypt<sp/>with<sp/>plaintext<sp/>CryptoKey<sp/>in<sp/>polling<sp/>return<sp/>mode<sp/>&lt;/h5&gt;</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/AESCTR.h&gt;</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/><sp/>#define<sp/>AES_BLOCK_SIZE<sp/>16<sp/><sp/>//<sp/>bytes</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/><sp/>...</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/><sp/>AESCTR_Params<sp/>params;</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/><sp/>AESCTR_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/><sp/>CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/><sp/>int_fast16_t<sp/>retVal;</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>For<sp/>example<sp/>purposes<sp/>only.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>plaintext[36]<sp/>=<sp/><sp/><sp/><sp/>{0x00,<sp/>0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04,<sp/>0x05,<sp/>0x06,<sp/>0x07,</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x08,<sp/>0x09,<sp/>0x0A,<sp/>0x0B,<sp/>0x0C,<sp/>0x0D,<sp/>0x0E,<sp/>0x0F,</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x10,<sp/>0x11,<sp/>0x12,<sp/>0x13,<sp/>0x14,<sp/>0x15,<sp/>0x16,<sp/>0x17,</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x18,<sp/>0x19,<sp/>0x1A,<sp/>0x1B,<sp/>0x1C,<sp/>0x1D,<sp/>0x1E,<sp/>0x1F,</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x20,<sp/>0x21,<sp/>0x22,<sp/>0x23};</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>initialCounter[]<sp/>=<sp/>{0x00,<sp/>0xE0,<sp/>0x01,<sp/>0x7B,<sp/>0x27,<sp/>0x77,<sp/>0x7F,<sp/>0x3F,</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x4A,<sp/>0x17,<sp/>0x86,<sp/>0xF0,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x01};</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>keyingMaterial[]<sp/>=<sp/>{0x76,<sp/>0x91,<sp/>0xBE,<sp/>0x03,<sp/>0x5E,<sp/>0x50,<sp/>0x20,<sp/>0xA8,</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xAC,<sp/>0x6E,<sp/>0x61,<sp/>0x85,<sp/>0x29,<sp/>0xF9,<sp/>0xA0,<sp/>0xDC};</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>ciphertext[sizeof(plaintext)];</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/><sp/>AESCTR_Params_init(&amp;params)</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/><sp/>params.returnBehavior<sp/>=<sp/>AESCTR_RETURN_BEHAVIOR_POLLING;</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>AESCTR_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/><sp/>CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/><sp/>AESCTR_SegmentedOperation<sp/>operation;</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/><sp/>AESCTR_SegmentedOperation_init(&amp;operation);<sp/>//<sp/>Optional<sp/>as<sp/>all<sp/>struct<sp/>members<sp/>will<sp/>be<sp/>set<sp/>before<sp/>use.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/><sp/>retVal<sp/>=<sp/>AESCTR_setupEncrypt(handle,<sp/>&amp;cryptoKey,<sp/>initialCounter);</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(retVal<sp/>!=<sp/>AESCTR_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/><sp/>operation.inputLength<sp/><sp/>=<sp/>AES_BLOCK_SIZE;<sp/><sp/>//<sp/>Only<sp/>block<sp/>multiple<sp/>lengths<sp/>are<sp/>permitted<sp/>when<sp/>adding<sp/>data.</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/><sp/>operation.output<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ciphertext;</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/><sp/>retVal<sp/>=<sp/>AESCTR_addData(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(retVal<sp/>!=<sp/>AESCTR_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext<sp/>+<sp/>AES_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/><sp/>operation.inputLength<sp/><sp/>=<sp/>sizeof(plaintext)<sp/>-<sp/>AES_BLOCK_SIZE;<sp/><sp/>//<sp/>Non-block<sp/>multiple<sp/>length<sp/>permitted<sp/>during</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/>finalization.<sp/>operation.output<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ciphertext<sp/>+<sp/>AES_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/><sp/>retVal<sp/>=<sp/>AESCTR_finalize(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>(retVal<sp/>!=<sp/>AESCTR_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Upon<sp/>successful<sp/>return,<sp/>the<sp/>resulting<sp/>ciphertext<sp/>should<sp/>be:</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/><sp/><sp/>0xC1,<sp/>0xCF,<sp/>0x48,<sp/>0xA8,<sp/>0x9F,<sp/>0x2F,<sp/>0xFD,<sp/>0xD9,</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/><sp/><sp/>0xCF,<sp/>0x46,<sp/>0x52,<sp/>0xE9,<sp/>0xEF,<sp/>0xDB,<sp/>0x72,<sp/>0xD7,</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/><sp/><sp/>0x45,<sp/>0x40,<sp/>0xA4,<sp/>0x2B,<sp/>0xDE,<sp/>0x6D,<sp/>0x78,<sp/>0x36,</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/><sp/><sp/>0xD5,<sp/>0x9A,<sp/>0x5C,<sp/>0xEA,<sp/>0xAE,<sp/>0xF3,<sp/>0x10,<sp/>0x53,</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/><sp/><sp/>0x25,<sp/>0xB2,<sp/>0x07,<sp/>0x2F</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/><sp/>AESCTR_close(handle);</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_AESCTR__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_AESCTR__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_a_e_s_common_8h" kindref="compound">ti/drivers/AESCommon.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_crypto_key_8h" kindref="compound">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="_a_e_s_c_t_r_8h_1a34779c06165f5cb664ef629c238b41ab" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_STATUS_RESERVED<sp/>AES_STATUS_RESERVED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="_a_e_s_c_t_r_8h_1a5abdae97a12f798523a6a5835747829e" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_STATUS_SUCCESS<sp/>AES_STATUS_SUCCESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="_a_e_s_c_t_r_8h_1ad78ff1fad9e9ef24e0dadcc8abe072df" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_STATUS_ERROR<sp/>AES_STATUS_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="_a_e_s_c_t_r_8h_1afbb647a50a8af8a4c924f338e1bb200a" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_STATUS_RESOURCE_UNAVAILABLE<sp/>AES_STATUS_RESOURCE_UNAVAILABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="_a_e_s_c_t_r_8h_1a65f0b734aea8c3de3fe797b89d9e226b" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_STATUS_CANCELED<sp/>AES_STATUS_CANCELED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="_a_e_s_c_t_r_8h_1af5c6fdabbcd2ab7a8968b29a51556427" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_STATUS_FEATURE_NOT_SUPPORTED<sp/>AES_STATUS_FEATURE_NOT_SUPPORTED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="_a_e_s_c_t_r_8h_1a50fdb2adf7836d4c1d9750215bbff426" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_STATUS_KEYSTORE_INVALID_ID<sp/>AES_STATUS_KEYSTORE_INVALID_ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="_a_e_s_c_t_r_8h_1ab42c0159f0f2531c8d9fa7e3859ce991" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_STATUS_KEYSTORE_GENERIC_ERROR<sp/>AES_STATUS_KEYSTORE_GENERIC_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="459" refid="_a_e_s_c_t_r_8h_1afbbaf8f51710acd01d591a335b312ef5" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_STATUS_UNALIGNED_IO_NOT_SUPPORTED<sp/>AES_STATUS_UNALIGNED_IO_NOT_SUPPORTED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484" refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4a40c3b7e8db7ff4ebd81a9f6477139c3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4a40c3b7e8db7ff4ebd81a9f6477139c3f" kindref="member">AESCTR_RETURN_BEHAVIOR_CALLBACK</ref><sp/>=<sp/><ref refid="_a_e_s_common_8h_1a2820f6d52c454af5c0d7b20215e4a448a1960d364137ea874dd37fa582d97be46" kindref="member">AES_RETURN_BEHAVIOR_CALLBACK</ref>,</highlight></codeline>
<codeline lineno="491" refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4ade55945ff11c47457a75d97db2a20b2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4ade55945ff11c47457a75d97db2a20b2c" kindref="member">AESCTR_RETURN_BEHAVIOR_BLOCKING</ref><sp/>=<sp/><ref refid="_a_e_s_common_8h_1a2820f6d52c454af5c0d7b20215e4a448a2f37373d3f057f1696056d9124285398" kindref="member">AES_RETURN_BEHAVIOR_BLOCKING</ref>,</highlight></codeline>
<codeline lineno="496" refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4a4a75cbc6c9b0ccde83c5cf9c5c5f053e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4a4a75cbc6c9b0ccde83c5cf9c5c5f053e" kindref="member">AESCTR_RETURN_BEHAVIOR_POLLING</ref><sp/><sp/>=<sp/><ref refid="_a_e_s_common_8h_1a2820f6d52c454af5c0d7b20215e4a448a671eba846166015af2e6f06a017f1716" kindref="member">AES_RETURN_BEHAVIOR_POLLING</ref>,</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_t_r_8h_1a4bca2f2e747d2006dafafb098fd2f2b4" kindref="member">AESCTR_ReturnBehavior</ref>;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="510" refid="struct_a_e_s_c_t_r___one_step_operation" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="512" refid="struct_a_e_s_c_t_r___one_step_operation_1a6f767276ce666d3658fe076816ccc6b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*<ref refid="struct_a_e_s_c_t_r___one_step_operation_1a6f767276ce666d3658fe076816ccc6b1" kindref="member">key</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="513" refid="struct_a_e_s_c_t_r___one_step_operation_1aed319d0e109945efd0ffc1bacd84f40b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<ref refid="struct_a_e_s_c_t_r___one_step_operation_1aed319d0e109945efd0ffc1bacd84f40b" kindref="member">input</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="518" refid="struct_a_e_s_c_t_r___one_step_operation_1a450ed6d71f872ceb9b9c29386af7bec0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_a_e_s_c_t_r___one_step_operation_1a450ed6d71f872ceb9b9c29386af7bec0" kindref="member">output</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="526" refid="struct_a_e_s_c_t_r___one_step_operation_1a668acfec5147474ba5f772089ac954d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<ref refid="struct_a_e_s_c_t_r___one_step_operation_1a668acfec5147474ba5f772089ac954d4" kindref="member">initialCounter</ref>;<sp/></highlight></codeline>
<codeline lineno="533" refid="struct_a_e_s_c_t_r___one_step_operation_1a71d4cc7ac9fd11821e32b3f47c2830c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_c_t_r___one_step_operation_1a71d4cc7ac9fd11821e32b3f47c2830c8" kindref="member">inputLength</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="538"><highlight class="normal">}<sp/><ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref>;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="struct_a_e_s_c_t_r___segmented_operation" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551" refid="struct_a_e_s_c_t_r___segmented_operation_1a87df4934d47561b0baf5331c823bce60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<ref refid="struct_a_e_s_c_t_r___segmented_operation_1a87df4934d47561b0baf5331c823bce60" kindref="member">input</ref>;<sp/></highlight></codeline>
<codeline lineno="556" refid="struct_a_e_s_c_t_r___segmented_operation_1af53dcde098c68e20f239d88dcf6fffdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_a_e_s_c_t_r___segmented_operation_1af53dcde098c68e20f239d88dcf6fffdc" kindref="member">output</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="564" refid="struct_a_e_s_c_t_r___segmented_operation_1a911b91975f3af78d2975ffd7aab6efd0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_c_t_r___segmented_operation_1a911b91975f3af78d2975ffd7aab6efd0" kindref="member">inputLength</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="571"><highlight class="normal">}<sp/><ref refid="struct_a_e_s_c_t_r___segmented_operation" kindref="compound">AESCTR_SegmentedOperation</ref>;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="_a_e_s_c_t_r_8h_1a5afaf34387204843aee3513ce646596f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref><sp/><ref refid="_a_e_s_c_t_r_8h_1a5afaf34387204843aee3513ce646596f" kindref="member">AESCTR_Operation</ref>;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="585" refid="union_a_e_s_c_t_r___operation_union" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="587" refid="union_a_e_s_c_t_r___operation_union_1a0decc466f29667ec2bcd72ca8188c7f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref><sp/><ref refid="union_a_e_s_c_t_r___operation_union_1a0decc466f29667ec2bcd72ca8188c7f4" kindref="member">oneStepOperation</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>One-step<sp/>operation<sp/>element<sp/>of<sp/>the<sp/>operation<sp/>union<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588" refid="union_a_e_s_c_t_r___operation_union_1a2975ef24e1b46fc54164ee93896d2d94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_a_e_s_c_t_r___segmented_operation" kindref="compound">AESCTR_SegmentedOperation</ref><sp/><ref refid="union_a_e_s_c_t_r___operation_union_1a2975ef24e1b46fc54164ee93896d2d94" kindref="member">segmentedOperation</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Segmented<sp/>operation<sp/>element<sp/>of<sp/>the<sp/>operation<sp/>union<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">}<sp/><ref refid="union_a_e_s_c_t_r___operation_union" kindref="compound">AESCTR_OperationUnion</ref>;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="594" refid="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="596" refid="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6a81e20f47ee293654cec99f123beb4a78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6a81e20f47ee293654cec99f123beb4a78" kindref="member">AESCTR_MODE_ENCRYPT</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="597" refid="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6ab4536ba0413eabcc6f7bfe2296b44c2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6ab4536ba0413eabcc6f7bfe2296b44c2f" kindref="member">AESCTR_MODE_DECRYPT</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6" kindref="member">AESCTR_Mode</ref>;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="603" refid="_a_e_s_c_t_r_8h_1a131d9f356f7308c7d7e9d60435c77cee" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_OP_MODE_MASK<sp/>0x0F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="608" refid="_a_e_s_c_t_r_8h_1acd88e7a4db1af6b55185018f972eb848" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_OP_FLAG_SEGMENTED<sp/>0x10<sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>4<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="_a_e_s_c_t_r_8h_1aa76bccdc66712ba44e8770a1d5b0881c" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_OP_FLAG_FINALIZE<sp/>0x20<sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>5<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="618" refid="_a_e_s_c_t_r_8h_1afbad19da0c6c954c7d62b8fd08ae0a11" refkind="member"><highlight class="preprocessor">#define<sp/>AESCTR_OP_FLAGS_MASK<sp/>(AESCTR_OP_FLAG_SEGMENTED<sp/>|<sp/>AESCTR_OP_FLAG_FINALIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="623" refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="625" refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eaa67b3972817bf145ee9036fd62e70c6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eaa67b3972817bf145ee9036fd62e70c6d" kindref="member">AESCTR_OPERATION_TYPE_ENCRYPT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6a81e20f47ee293654cec99f123beb4a78" kindref="member">AESCTR_MODE_ENCRYPT</ref>,</highlight></codeline>
<codeline lineno="626" refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eaefecbb7bf029eedce369d76698411543" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eaefecbb7bf029eedce369d76698411543" kindref="member">AESCTR_OPERATION_TYPE_DECRYPT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6ab4536ba0413eabcc6f7bfe2296b44c2f" kindref="member">AESCTR_MODE_DECRYPT</ref>,</highlight></codeline>
<codeline lineno="627" refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529ea28aeef0d0b964c789a06c023214238d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529ea28aeef0d0b964c789a06c023214238d6" kindref="member">AESCTR_OPERATION_TYPE_ENCRYPT_SEGMENTED</ref><sp/>=<sp/>(<ref refid="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6a81e20f47ee293654cec99f123beb4a78" kindref="member">AESCTR_MODE_ENCRYPT</ref><sp/>|<sp/><ref refid="_a_e_s_c_t_r_8h_1acd88e7a4db1af6b55185018f972eb848" kindref="member">AESCTR_OP_FLAG_SEGMENTED</ref>),</highlight></codeline>
<codeline lineno="628" refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eaa027d73d2232baf8d15a38dfc773efba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eaa027d73d2232baf8d15a38dfc773efba" kindref="member">AESCTR_OPERATION_TYPE_DECRYPT_SEGMENTED</ref><sp/>=<sp/>(<ref refid="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6ab4536ba0413eabcc6f7bfe2296b44c2f" kindref="member">AESCTR_MODE_DECRYPT</ref><sp/>|<sp/><ref refid="_a_e_s_c_t_r_8h_1acd88e7a4db1af6b55185018f972eb848" kindref="member">AESCTR_OP_FLAG_SEGMENTED</ref>),</highlight></codeline>
<codeline lineno="629" refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eadaceaad96a12d02d8f21ad17e2238e13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eadaceaad96a12d02d8f21ad17e2238e13" kindref="member">AESCTR_OPERATION_TYPE_ENCRYPT_FINALIZE</ref><sp/><sp/>=<sp/>(<ref refid="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6a81e20f47ee293654cec99f123beb4a78" kindref="member">AESCTR_MODE_ENCRYPT</ref><sp/>|<sp/><ref refid="_a_e_s_c_t_r_8h_1aa76bccdc66712ba44e8770a1d5b0881c" kindref="member">AESCTR_OP_FLAG_FINALIZE</ref>),</highlight></codeline>
<codeline lineno="630" refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eaa02d826846b31cae622334671e1b8871" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529eaa02d826846b31cae622334671e1b8871" kindref="member">AESCTR_OPERATION_TYPE_DECRYPT_FINALIZE</ref><sp/><sp/>=<sp/>(<ref refid="_a_e_s_c_t_r_8h_1a1b77091ac8d8c88f6d7a9514ab8e0cc6ab4536ba0413eabcc6f7bfe2296b44c2f" kindref="member">AESCTR_MODE_DECRYPT</ref><sp/>|<sp/><ref refid="_a_e_s_c_t_r_8h_1aa76bccdc66712ba44e8770a1d5b0881c" kindref="member">AESCTR_OP_FLAG_FINALIZE</ref>),</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529e" kindref="member">AESCTR_OperationType</ref>;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="644" refid="_a_e_s_c_t_r_8h_1ab53ceee62301f4109aa47953eee5ae41" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_common___config" kindref="compound">AESCommon_Config</ref><sp/><ref refid="_a_e_s_c_t_r_8h_1ab53ceee62301f4109aa47953eee5ae41" kindref="member">AESCTR_Config</ref>;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>AESCTR_Config<sp/>*<ref refid="_a_e_s_c_t_r_8h_1aa0294b11b975a0227891d616ce130503" kindref="member">AESCTR_Handle</ref>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="666" refid="_a_e_s_c_t_r_8h_1adc2c56e8ba2292d0b57d8fd3b28d92e3" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_a_e_s_c_t_r_8h_1adc2c56e8ba2292d0b57d8fd3b28d92e3" kindref="member">AESCTR_CallbackFxn</ref>)(AESCTR_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>returnValue,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_a_e_s_c_t_r___operation_union" kindref="compound">AESCTR_OperationUnion</ref><sp/>*operation,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1a09812f1f01333df2b7cf00570b8e529e" kindref="member">AESCTR_OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="679" refid="struct_a_e_s_c_t_r___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681" refid="struct_a_e_s_c_t_r___params_1ac930590eb152c4f26d680430ed1d6011" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>AESCTR_ReturnBehavior<sp/><ref refid="struct_a_e_s_c_t_r___params_1ac930590eb152c4f26d680430ed1d6011" kindref="member">returnBehavior</ref>;<sp/></highlight></codeline>
<codeline lineno="682" refid="struct_a_e_s_c_t_r___params_1a76253d2ea50257d85f829222dc4aaaf1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_t_r_8h_1adc2c56e8ba2292d0b57d8fd3b28d92e3" kindref="member">AESCTR_CallbackFxn</ref><sp/><ref refid="struct_a_e_s_c_t_r___params_1a76253d2ea50257d85f829222dc4aaaf1" kindref="member">callbackFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="683" refid="struct_a_e_s_c_t_r___params_1afb9a73ad258ff2043be344c05cacb16a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_a_e_s_c_t_r___params_1afb9a73ad258ff2043be344c05cacb16a" kindref="member">timeout</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="686" refid="struct_a_e_s_c_t_r___params_1a04431100c1fdbe0da28240c403b0f00b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_a_e_s_c_t_r___params_1a04431100c1fdbe0da28240c403b0f00b" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="689"><highlight class="normal">}<sp/><ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref>;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref><sp/><ref refid="_a_e_s_c_t_r_8h_1ac30036f5de20f0c36474dc5470c1fc35" kindref="member">AESCTR_defaultParams</ref>;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_t_r_8h_1a09d8aeedd73b5cb95c4bc3e8089ea8ac" kindref="member">AESCTR_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_t_r_8h_1a1f896d0c0acd590dcc9cc796fa96a647" kindref="member">AESCTR_Params_init</ref>(<ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal">AESCTR_Handle<sp/><ref refid="_a_e_s_c_t_r_8h_1ae60ed1df2e6c103601ad406b5ed7664b" kindref="member">AESCTR_open</ref>(uint_least8_t<sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_t_r_8h_1acb72a953b2a3426278555b267824f817" kindref="member">AESCTR_close</ref>(AESCTR_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_t_r_8h_1aff0a4d5aa1bc42d9d862462f36a496a4" kindref="member">AESCTR_setupEncrypt</ref>(AESCTR_Handle<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*initialCounter);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_t_r_8h_1af482d0963698740905ae0b25a4f2de53" kindref="member">AESCTR_setupDecrypt</ref>(AESCTR_Handle<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*initialCounter);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_t_r_8h_1a268380d059ea502beb8d1e9ec98813f2" kindref="member">AESCTR_addData</ref>(AESCTR_Handle<sp/>handle,<sp/><ref refid="struct_a_e_s_c_t_r___segmented_operation" kindref="compound">AESCTR_SegmentedOperation</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_t_r_8h_1a7993acdb3c9124ac7024b70cca8e2c51" kindref="member">AESCTR_finalize</ref>(AESCTR_Handle<sp/>handle,<sp/><ref refid="struct_a_e_s_c_t_r___segmented_operation" kindref="compound">AESCTR_SegmentedOperation</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_t_r_8h_1a55748990b81e9dfbfebf783ab9e21df2" kindref="member">AESCTR_Operation_init</ref>(AESCTR_Operation<sp/>*operation);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_t_r_8h_1a795df729c916c7e2eb22b8dac194b086" kindref="member">AESCTR_OneStepOperation_init</ref>(<ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_t_r_8h_1adc4622c828393764b4eedea50982ca23" kindref="member">AESCTR_SegmentedOperation_init</ref>(<ref refid="struct_a_e_s_c_t_r___segmented_operation" kindref="compound">AESCTR_SegmentedOperation</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_t_r_8h_1aae8c7d322afc0ae2099c9ae1fe5727f6" kindref="member">AESCTR_oneStepEncrypt</ref>(AESCTR_Handle<sp/>handle,<sp/><ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_t_r_8h_1a7265c273f23276a91f81d9e1759972b2" kindref="member">AESCTR_oneStepDecrypt</ref>(AESCTR_Handle<sp/>handle,<sp/><ref refid="struct_a_e_s_c_t_r___one_step_operation" kindref="compound">AESCTR_OneStepOperation</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_t_r_8h_1a738efd3afe2bf4a14ebe9a19aecbe91f" kindref="member">AESCTR_cancelOperation</ref>(AESCTR_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal">AESCTR_Handle<sp/><ref refid="_a_e_s_c_t_r_8h_1ad51fedf3d21b002b529eae2fbb31ca23" kindref="member">AESCTR_construct</ref>(AESCTR_Config<sp/>*config,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_c_t_r___params" kindref="compound">AESCTR_Params</ref><sp/>*<ref refid="_driver___init_8h_1af93f10d4f7393a01dff58c92f91d8cbc" kindref="member">params</ref>);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_AESCTR__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/AESCTR.h"/>
  </compounddef>
</doxygen>
