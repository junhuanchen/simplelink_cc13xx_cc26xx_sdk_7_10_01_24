<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_crypto_utils_8h" kind="file" language="C++">
    <compoundname>CryptoUtils.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="603">
        <label>stdbool.h</label>
      </node>
      <node id="602">
        <label>stdint.h</label>
      </node>
      <node id="604">
        <label>string.h</label>
      </node>
      <node id="601">
        <label>CryptoUtils.h</label>
        <link refid="_crypto_utils_8h"/>
        <childnode refid="602" relation="include">
        </childnode>
        <childnode refid="603" relation="include">
        </childnode>
        <childnode refid="604" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_crypto_utils_8h_1aa8886027241f60fc9b0df815586fb480" prot="public" static="no">
        <name>CryptoUtils_Endianess</name>
        <enumvalue id="_crypto_utils_8h_1aa8886027241f60fc9b0df815586fb480aacbef4afb276f3f188b38efdf7b6bb67" prot="public">
          <name>CryptoUtils_ENDIANESS_BIG</name>
          <initializer>= 0u</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MSB at lowest address. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_crypto_utils_8h_1aa8886027241f60fc9b0df815586fb480a2f4ec9eb053da51fe070d81e99ca926c" prot="public">
          <name>CryptoUtils_ENDIANESS_LITTLE</name>
          <initializer>= 1u</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LSB at highest address. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Indicates the endianess (byte order) of a multi-byte value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" line="54" column="1" bodyfile="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" bodystart="53" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_crypto_utils_8h_1ad691f4762b00aaabe9b624d01f45a131" prot="public" static="no" mutable="no">
        <type>const uint8_t *</type>
        <definition>const uint8_t* CryptoUtils_limitZero</definition>
        <argsstring></argsstring>
        <name>CryptoUtils_limitZero</name>
        <briefdescription>
<para>Limit value of 0. </para>        </briefdescription>
        <detaileddescription>
<para>This is a value provided for convenience when checking a value against a range.</para><para><simplesect kind="see"><para><ref refid="_crypto_utils_8h_1a2e03f3453ad6a977d9db6117f04ff525" kindref="member">CryptoUtils_limitOne</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_crypto_utils_8h_1a834df5fd62ca6fd298d471127147f91e" kindref="member">CryptoUtils_isNumberInRange</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_crypto_utils_8h_1a2e03f3453ad6a977d9db6117f04ff525" prot="public" static="no" mutable="no">
        <type>const uint8_t *</type>
        <definition>const uint8_t* CryptoUtils_limitOne</definition>
        <argsstring></argsstring>
        <name>CryptoUtils_limitOne</name>
        <briefdescription>
<para>Limit value of 1. </para>        </briefdescription>
        <detaileddescription>
<para>This is a value provided for convenience when checking a value against a range.</para><para><simplesect kind="see"><para><ref refid="_crypto_utils_8h_1ad691f4762b00aaabe9b624d01f45a131" kindref="member">CryptoUtils_limitZero</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_crypto_utils_8h_1a834df5fd62ca6fd298d471127147f91e" kindref="member">CryptoUtils_isNumberInRange</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" line="79" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_crypto_utils_8h_1a129318383b475594fd17cf1f1d0a04b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CryptoUtils_buffersMatch</definition>
        <argsstring>(const volatile void *volatile buffer0, const volatile void *volatile buffer1, size_t bufferByteLength)</argsstring>
        <name>CryptoUtils_buffersMatch</name>
        <param>
          <type>const volatile void *volatile</type>
          <declname>buffer0</declname>
        </param>
        <param>
          <type>const volatile void *volatile</type>
          <declname>buffer1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufferByteLength</declname>
        </param>
        <briefdescription>
<para>Compares two buffers for equality without branching. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is not a drop-in replacement for memcmp!</para></simplesect>
Most memcmp implementations break out of their comparison loop immediately once a mismatch is detected to save execution time. For cryptographic purposes, this is a flaw.</para><para>This function compares two buffers without branching thus requiring a an amount of time that does not vary with the content of <computeroutput>buffer0</computeroutput> and <computeroutput>buffer1</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer0</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to compare against <computeroutput>buffer1</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer1</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer tp compare against <computeroutput>buffer0</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferByteLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in bytes of <computeroutput>buffer0</computeroutput> and <computeroutput>buffer1</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The contents of the buffers match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The contents of the buffers do not match. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_utils_8h_1aae3615e127059d7e2049421d81c47cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CryptoUtils_buffersMatchWordAligned</definition>
        <argsstring>(const volatile uint32_t *volatile buffer0, const volatile uint32_t *volatile buffer1, size_t bufferByteLength)</argsstring>
        <name>CryptoUtils_buffersMatchWordAligned</name>
        <param>
          <type>const volatile uint32_t *volatile</type>
          <declname>buffer0</declname>
        </param>
        <param>
          <type>const volatile uint32_t *volatile</type>
          <declname>buffer1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufferByteLength</declname>
        </param>
        <briefdescription>
<para>Compares two buffers for equality word-by-word without branching. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is not a drop-in replacement for memcmp!</para></simplesect>
Most memcmp implementations break out of their comparison loop immediately once a mismatch is detected to save execution time. For cryptographic purposes, this is a flaw.</para><para>This function compares two buffers without branching thus requiring a an amount of time that does not vary with the content of <computeroutput>buffer0</computeroutput> and <computeroutput>buffer1</computeroutput>.</para><para>Unlike <ref refid="_crypto_utils_8h_1a129318383b475594fd17cf1f1d0a04b3" kindref="member">CryptoUtils_buffersMatch()</ref>, this function expects <computeroutput>buffer0</computeroutput> and <computeroutput>buffer1</computeroutput> to be 32-bit aligned. It will only perform 32-bit aligned accesses to memory. This is needed to access the registers of certain peripherals.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer0</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to compare against <computeroutput>buffer1</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer1</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer tp compare against <computeroutput>buffer0</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferByteLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in bytes of <computeroutput>buffer0</computeroutput> and <computeroutput>buffer1</computeroutput>. Must be evenly divisible by sizeof(uint32_t). This function will return false if <computeroutput>bufferByteLength</computeroutput> is not evenly divisible by sizeof(uin32_t). </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The contents of the buffers match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The contents of the buffers do not match. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_utils_8h_1ad46b40dca481aa47aa00867c625e29ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CryptoUtils_isBufferAllZeros</definition>
        <argsstring>(const void *buffer, size_t bufferByteLength)</argsstring>
        <name>CryptoUtils_isBufferAllZeros</name>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufferByteLength</declname>
        </param>
        <briefdescription>
<para>Check whether the provided buffer only contains 0x00 bytes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to search for non-zero bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferByteLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <computeroutput>buffer</computeroutput> in bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contained only bytes with value 0x00 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contained at least on non-zero byte </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_utils_8h_1aeeb9c9d2e060a8e5d35bdbf26e005e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CryptoUtils_memset</definition>
        <argsstring>(void *dest, size_t destSize, uint8_t val, size_t count)</argsstring>
        <name>CryptoUtils_memset</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>destSize</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Copies <computeroutput>val</computeroutput> into the first <computeroutput>count</computeroutput> bytes of the buffer pointed to by <computeroutput>dest</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to destination buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of destination buffer in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Fill byte value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to fill </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_utils_8h_1a5272fb483ed7d4851fb80c75262b0ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CryptoUtils_reverseBufferBytewise</definition>
        <argsstring>(void *buffer, size_t bufferByteLength)</argsstring>
        <name>CryptoUtils_reverseBufferBytewise</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufferByteLength</declname>
        </param>
        <briefdescription>
<para>Reverses the byte order in a buffer of a given length. </para>        </briefdescription>
        <detaileddescription>
<para>The left-most byte will become the right-most byte and vice versa.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the data to be reversed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferByteLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in bytes of <computeroutput>buffer</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_utils_8h_1ab30cb9ca38ce2e29fa6278d594803304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CryptoUtils_copyPad</definition>
        <argsstring>(const void *source, uint32_t *destination, size_t sourceLength)</argsstring>
        <name>CryptoUtils_copyPad</name>
        <param>
          <type>const void *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sourceLength</declname>
        </param>
        <briefdescription>
<para>Copies and pads an array of words. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>source</computeroutput> array is copied into the <computeroutput>destination</computeroutput> array. Writes are done word-wise. If <computeroutput>sourceLength</computeroutput> is not a multiple of 4, any remaining bytes up to the next word boundary are padded with 0.</para><para>The length of the destination array must be a multiple of 4, rounded up to the padded <computeroutput>sourceLength</computeroutput> if required.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Source array</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination array</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourceLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the source array </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_utils_8h_1a1dec0653eaff204ac209fbde7c8dfa1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CryptoUtils_reverseCopyPad</definition>
        <argsstring>(const void *source, uint32_t *destination, size_t sourceLength)</argsstring>
        <name>CryptoUtils_reverseCopyPad</name>
        <param>
          <type>const void *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sourceLength</declname>
        </param>
        <briefdescription>
<para>Reverses, copies, and pads an array of words. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>source</computeroutput> array is reversed byte-wise and copied into the <computeroutput>destination</computeroutput> array. Writes are done word-wise. If <computeroutput>sourceLength</computeroutput> is not a multiple of 4, any remaining bytes up to the next word boundary are padded with 0.</para><para>The length of the destination array must be a multiple of 4, rounded up to the padded <computeroutput>sourceLength</computeroutput> if required.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Source array</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination array</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourceLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the source array </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_utils_8h_1a3473aead5a4596fee8c38431f56bfbc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CryptoUtils_reverseCopy</definition>
        <argsstring>(const void *source, void *destination, size_t sourceLength)</argsstring>
        <name>CryptoUtils_reverseCopy</name>
        <param>
          <type>const void *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sourceLength</declname>
        </param>
        <briefdescription>
<para>Reverses and copies an array of bytes. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>source</computeroutput> array is reversed byte-wise and copied into the <computeroutput>destination</computeroutput> array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Source array</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination array</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourceLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the source array </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_utils_8h_1a834df5fd62ca6fd298d471127147f91e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CryptoUtils_isNumberInRange</definition>
        <argsstring>(const void *number, size_t bitLength, CryptoUtils_Endianess endianess, const void *lowerLimit, const void *upperLimit)</argsstring>
        <name>CryptoUtils_isNumberInRange</name>
        <param>
          <type>const void *</type>
          <declname>number</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bitLength</declname>
        </param>
        <param>
          <type><ref refid="_crypto_utils_8h_1aa8886027241f60fc9b0df815586fb480" kindref="member">CryptoUtils_Endianess</ref></type>
          <declname>endianess</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>lowerLimit</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>upperLimit</declname>
        </param>
        <briefdescription>
<para>Checks if number is within the range [lowerLimit, upperLimit) </para>        </briefdescription>
        <detaileddescription>
<para>Checks if the specified number is at greater than or equal to the lower limit and less than the upper limit. Note that the boundary set by the upper limit is not inclusive.</para><para>Note that the special values of <ref refid="_crypto_utils_8h_1ad691f4762b00aaabe9b624d01f45a131" kindref="member">CryptoUtils_limitZero</ref> and <ref refid="_crypto_utils_8h_1a2e03f3453ad6a977d9db6117f04ff525" kindref="member">CryptoUtils_limitOne</ref> are available to pass in for the <computeroutput>lowerLimit</computeroutput>. (These values can also be used for the <computeroutput>upperLimit</computeroutput> but their use for the upperLimit has no practical use.)</para><para>If <computeroutput>lowerLimit</computeroutput> is NULL then the lower limit is taken as 0. If <computeroutput>upperLimit</computeroutput> is NULL then the upper limit is taken as 2<superscript>(<computeroutput>bitLength</computeroutput> + 1)</superscript>.</para><para>The implemented algorithm is timing-constant when the following parameters are held constant: <computeroutput>lowerLimit</computeroutput>, <computeroutput>upperLimit</computeroutput>, <computeroutput>bitLength</computeroutput>, and <computeroutput>endianess</computeroutput>. Thus, the <computeroutput>number</computeroutput> being checked may change and timing will not leak its relation to the limits. However, timing may leak the bitLength, the endianess, and the use of <ref refid="_crypto_utils_8h_1ad691f4762b00aaabe9b624d01f45a131" kindref="member">CryptoUtils_limitZero</ref>, <ref refid="_crypto_utils_8h_1a2e03f3453ad6a977d9db6117f04ff525" kindref="member">CryptoUtils_limitOne</ref>, and NULL for the limit values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to number to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in bits of <computeroutput>number</computeroutput>, <computeroutput>lowerLimit</computeroutput>, and <computeroutput>upperLimit</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endianess</parametername>
</parameternamelist>
<parameterdescription>
<para>The endianess of <computeroutput>number</computeroutput>, <computeroutput>lowerLimit</computeroutput>, and <computeroutput>upperLimit</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lowerLimit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to lower limit value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upperLimit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to upper limit value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The randomNumber is within [<computeroutput>lowerLimit</computeroutput>, <computeroutput>upperLimit</computeroutput>). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The randomNumber is not within [<computeroutput>lowerLimit</computeroutput>, <computeroutput>upperLimit</computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h" line="254" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection of utility functions for cryptographic purposes. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================ </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019-2021,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_cryptoutils_utils_CryptoUtils__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_cryptoutils_utils_CryptoUtils__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="_crypto_utils_8h_1aa8886027241f60fc9b0df815586fb480" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55" refid="_crypto_utils_8h_1aa8886027241f60fc9b0df815586fb480aacbef4afb276f3f188b38efdf7b6bb67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_crypto_utils_8h_1aa8886027241f60fc9b0df815586fb480aacbef4afb276f3f188b38efdf7b6bb67" kindref="member">CryptoUtils_ENDIANESS_BIG</ref><sp/><sp/><sp/><sp/>=<sp/>0u,<sp/></highlight></codeline>
<codeline lineno="56" refid="_crypto_utils_8h_1aa8886027241f60fc9b0df815586fb480a2f4ec9eb053da51fe070d81e99ca926c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_crypto_utils_8h_1aa8886027241f60fc9b0df815586fb480a2f4ec9eb053da51fe070d81e99ca926c" kindref="member">CryptoUtils_ENDIANESS_LITTLE</ref><sp/>=<sp/>1u,<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal">}<sp/><ref refid="_crypto_utils_8h_1aa8886027241f60fc9b0df815586fb480" kindref="member">CryptoUtils_Endianess</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<ref refid="_crypto_utils_8h_1ad691f4762b00aaabe9b624d01f45a131" kindref="member">CryptoUtils_limitZero</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<ref refid="_crypto_utils_8h_1a2e03f3453ad6a977d9db6117f04ff525" kindref="member">CryptoUtils_limitOne</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_crypto_utils_8h_1a129318383b475594fd17cf1f1d0a04b3" kindref="member">CryptoUtils_buffersMatch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>buffer0,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>buffer1,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferByteLength);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_crypto_utils_8h_1aae3615e127059d7e2049421d81c47cd1" kindref="member">CryptoUtils_buffersMatchWordAligned</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>buffer0,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>buffer1,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferByteLength);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_crypto_utils_8h_1ad46b40dca481aa47aa00867c625e29ec" kindref="member">CryptoUtils_isBufferAllZeros</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferByteLength);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_utils_8h_1aeeb9c9d2e060a8e5d35bdbf26e005e14" kindref="member">CryptoUtils_memset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>destSize,<sp/>uint8_t<sp/>val,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_utils_8h_1a5272fb483ed7d4851fb80c75262b0ed8" kindref="member">CryptoUtils_reverseBufferBytewise</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferByteLength);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_utils_8h_1ab30cb9ca38ce2e29fa6278d594803304" kindref="member">CryptoUtils_copyPad</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*source,<sp/>uint32_t<sp/>*destination,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sourceLength);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_utils_8h_1a1dec0653eaff204ac209fbde7c8dfa1f" kindref="member">CryptoUtils_reverseCopyPad</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*source,<sp/>uint32_t<sp/>*destination,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sourceLength);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_utils_8h_1a3473aead5a4596fee8c38431f56bfbc2" kindref="member">CryptoUtils_reverseCopy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*source,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*destination,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sourceLength);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_crypto_utils_8h_1a834df5fd62ca6fd298d471127147f91e" kindref="member">CryptoUtils_isNumberInRange</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*number,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bitLength,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CryptoUtils_Endianess<sp/>endianess,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lowerLimit,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*upperLimit);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_cryptoutils_utils_CryptoUtils__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/cryptoutils/utils/CryptoUtils.h"/>
  </compounddef>
</doxygen>
