<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_crypto_key_8h" kind="file" language="C++">
    <compoundname>CryptoKey.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includedby refid="_a_e_s_c_b_c_8h" local="no">AESCBC.h</includedby>
    <includedby refid="_a_e_s_c_c_m_c_c26_x4_8h" local="no">AESCCMCC26X4.h</includedby>
    <includedby refid="_a_e_s_c_c_m_c_c26_x_x_8h" local="no">AESCCMCC26XX.h</includedby>
    <includedby refid="_a_e_s_c_c_m_8h" local="no">AESCCM.h</includedby>
    <includedby refid="_a_e_s_c_m_a_c_8h" local="no">AESCMAC.h</includedby>
    <includedby refid="_a_e_s_c_t_r_8h" local="no">AESCTR.h</includedby>
    <includedby refid="_a_e_s_c_t_r_d_r_b_g_8h" local="no">AESCTRDRBG.h</includedby>
    <includedby refid="_a_e_s_e_c_b_c_c26_x_x_8h" local="no">AESECBCC26XX.h</includedby>
    <includedby refid="_a_e_s_e_c_b_8h" local="no">AESECB.h</includedby>
    <includedby refid="_a_e_s_g_c_m_c_c26_x4_8h" local="no">AESGCMCC26X4.h</includedby>
    <includedby refid="_a_e_s_g_c_m_c_c26_x_x_8h" local="no">AESGCMCC26XX.h</includedby>
    <includedby refid="_a_e_s_g_c_m_8h" local="no">AESGCM.h</includedby>
    <includedby refid="_crypto_key_key_store___p_s_a__init_8h" local="no">CryptoKeyKeyStore_PSA_init.h</includedby>
    <includedby refid="_crypto_key_plaintext_8h" local="no">CryptoKeyPlaintext.h</includedby>
    <includedby refid="_e_c_c_params_8h" local="no">ECCParams.h</includedby>
    <includedby refid="_e_c_d_h_c_c26_x2_8h" local="no">ECDHCC26X2.h</includedby>
    <includedby refid="_e_c_d_h_8h" local="no">ECDH.h</includedby>
    <includedby refid="_e_c_d_s_a_c_c26_x2_8h" local="no">ECDSACC26X2.h</includedby>
    <includedby refid="_e_c_d_s_a_8h" local="no">ECDSA.h</includedby>
    <includedby refid="_e_c_j_p_a_k_e_c_c26_x2_8h" local="no">ECJPAKECC26X2.h</includedby>
    <includedby refid="_e_c_j_p_a_k_e_8h" local="no">ECJPAKE.h</includedby>
    <includedby refid="_e_d_d_s_a_8h" local="no">EDDSA.h</includedby>
    <includedby refid="_r_n_g_8h" local="no">RNG.h</includedby>
    <includedby refid="_s_h_a2_8h" local="no">SHA2.h</includedby>
    <includedby refid="_t_r_n_g_c_c26_x_x_8h" local="no">TRNGCC26XX.h</includedby>
    <includedby refid="_t_r_n_g_8h" local="no">TRNG.h</includedby>
    <incdepgraph>
      <node id="497">
        <label>stdbool.h</label>
      </node>
      <node id="496">
        <label>stdint.h</label>
      </node>
      <node id="495">
        <label>CryptoKey.h</label>
        <link refid="_crypto_key_8h"/>
        <childnode refid="496" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="515">
        <label>AESCTRCC26XX.h</label>
        <link refid="_a_e_s_c_t_r_c_c26_x_x_8h"/>
      </node>
      <node id="530">
        <label>CryptoKeyPlaintext.h</label>
        <link refid="_crypto_key_plaintext_8h"/>
      </node>
      <node id="525">
        <label>AESGCMCC26XX.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x_x_8h"/>
      </node>
      <node id="549">
        <label>SHA2CC26X1.h</label>
        <link refid="_s_h_a2_c_c26_x1_8h"/>
      </node>
      <node id="506">
        <label>AESCCMCC26X4_ns.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x4__ns_8h"/>
      </node>
      <node id="524">
        <label>AESGCMCC26X4.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x4_8h"/>
      </node>
      <node id="514">
        <label>AESCTRCC26X4_s.h</label>
        <link refid="_a_e_s_c_t_r_c_c26_x4__s_8h"/>
      </node>
      <node id="521">
        <label>AESECB.h</label>
        <link refid="_a_e_s_e_c_b_8h"/>
        <childnode refid="522" relation="include">
        </childnode>
        <childnode refid="523" relation="include">
        </childnode>
        <childnode refid="520" relation="include">
        </childnode>
      </node>
      <node id="556">
        <label>TRNGCC26X4_s.h</label>
        <link refid="_t_r_n_g_c_c26_x4__s_8h"/>
        <childnode refid="555" relation="include">
        </childnode>
      </node>
      <node id="518">
        <label>AESCTRDRBGX4_s.h</label>
        <link refid="_a_e_s_c_t_r_d_r_b_g_x4__s_8h"/>
      </node>
      <node id="552">
        <label>SHA2CC26X4_s.h</label>
        <link refid="_s_h_a2_c_c26_x4__s_8h"/>
      </node>
      <node id="527">
        <label>AESGCMCC26X4_ns.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x4__ns_8h"/>
      </node>
      <node id="517">
        <label>AESCTRDRBGX4_ns.h</label>
        <link refid="_a_e_s_c_t_r_d_r_b_g_x4__ns_8h"/>
      </node>
      <node id="498">
        <label>CryptoKey.h</label>
        <link refid="_crypto_key_8h"/>
        <childnode refid="499" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="505" relation="include">
        </childnode>
        <childnode refid="508" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
        <childnode refid="520" relation="include">
        </childnode>
        <childnode refid="521" relation="include">
        </childnode>
        <childnode refid="524" relation="include">
        </childnode>
        <childnode refid="525" relation="include">
        </childnode>
        <childnode refid="526" relation="include">
        </childnode>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="531" relation="include">
        </childnode>
        <childnode refid="533" relation="include">
        </childnode>
        <childnode refid="534" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="542" relation="include">
        </childnode>
        <childnode refid="543" relation="include">
        </childnode>
        <childnode refid="544" relation="include">
        </childnode>
        <childnode refid="546" relation="include">
        </childnode>
        <childnode refid="548" relation="include">
        </childnode>
        <childnode refid="553" relation="include">
        </childnode>
        <childnode refid="554" relation="include">
        </childnode>
      </node>
      <node id="510">
        <label>AESCMACCC26X4_s.h</label>
        <link refid="_a_e_s_c_m_a_c_c_c26_x4__s_8h"/>
      </node>
      <node id="534">
        <label>ECDH.h</label>
        <link refid="_e_c_d_h_8h"/>
        <childnode refid="535" relation="include">
        </childnode>
        <childnode refid="533" relation="include">
        </childnode>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
      </node>
      <node id="505">
        <label>AESCCM.h</label>
        <link refid="_a_e_s_c_c_m_8h"/>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="506" relation="include">
        </childnode>
        <childnode refid="507" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
      </node>
      <node id="509">
        <label>AESCMACCC26X4_ns.h</label>
        <link refid="_a_e_s_c_m_a_c_c_c26_x4__ns_8h"/>
      </node>
      <node id="513">
        <label>AESCTRCC26X4_ns.h</label>
        <link refid="_a_e_s_c_t_r_c_c26_x4__ns_8h"/>
      </node>
      <node id="504">
        <label>AESCCMCC26XX.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x_x_8h"/>
      </node>
      <node id="537">
        <label>ECDHCC26X4_s.h</label>
        <link refid="_e_c_d_h_c_c26_x4__s_8h"/>
      </node>
      <node id="550">
        <label>SHA2CC26X2.h</label>
        <link refid="_s_h_a2_c_c26_x2_8h"/>
        <childnode refid="545" relation="include">
        </childnode>
      </node>
      <node id="531">
        <label>ECCParams.h</label>
        <link refid="_e_c_c_params_8h"/>
        <childnode refid="532" relation="include">
        </childnode>
        <childnode refid="533" relation="include">
        </childnode>
        <childnode refid="534" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="542" relation="include">
        </childnode>
        <childnode refid="543" relation="include">
        </childnode>
        <childnode refid="544" relation="include">
        </childnode>
      </node>
      <node id="543">
        <label>ECJPAKE.h</label>
        <link refid="_e_c_j_p_a_k_e_8h"/>
        <childnode refid="542" relation="include">
        </childnode>
      </node>
      <node id="535">
        <label>ECDHCC26X1.h</label>
        <link refid="_e_c_d_h_c_c26_x1_8h"/>
      </node>
      <node id="520">
        <label>AESECBCC26XX.h</label>
        <link refid="_a_e_s_e_c_b_c_c26_x_x_8h"/>
      </node>
      <node id="503">
        <label>AESCCMCC26X4.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x4_8h"/>
      </node>
      <node id="541">
        <label>ECDSACC26X4_s.h</label>
        <link refid="_e_c_d_s_a_c_c26_x4__s_8h"/>
      </node>
      <node id="555">
        <label>TRNGCC26X4_ns.h</label>
        <link refid="_t_r_n_g_c_c26_x4__ns_8h"/>
      </node>
      <node id="538">
        <label>ECDSACC26X2.h</label>
        <link refid="_e_c_d_s_a_c_c26_x2_8h"/>
      </node>
      <node id="553">
        <label>TRNGCC26XX.h</label>
        <link refid="_t_r_n_g_c_c26_x_x_8h"/>
        <childnode refid="540" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="547" relation="include">
        </childnode>
      </node>
      <node id="502">
        <label>AESCBCCC26XX.h</label>
        <link refid="_a_e_s_c_b_c_c_c26_x_x_8h"/>
      </node>
      <node id="512">
        <label>AESCTR.h</label>
        <link refid="_a_e_s_c_t_r_8h"/>
        <childnode refid="513" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
        <childnode refid="515" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
      </node>
      <node id="529">
        <label>CryptoKeyKeyStore_PSA_init.h</label>
        <link refid="_crypto_key_key_store___p_s_a__init_8h"/>
      </node>
      <node id="548">
        <label>SHA2.h</label>
        <link refid="_s_h_a2_8h"/>
        <childnode refid="545" relation="include">
        </childnode>
        <childnode refid="549" relation="include">
        </childnode>
        <childnode refid="550" relation="include">
        </childnode>
        <childnode refid="551" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
      </node>
      <node id="546">
        <label>RNG.h</label>
        <link refid="_r_n_g_8h"/>
        <childnode refid="547" relation="include">
        </childnode>
      </node>
      <node id="533">
        <label>ECDHCC26X2.h</label>
        <link refid="_e_c_d_h_c_c26_x2_8h"/>
      </node>
      <node id="554">
        <label>TRNG.h</label>
        <link refid="_t_r_n_g_8h"/>
        <childnode refid="540" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="547" relation="include">
        </childnode>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
        <childnode refid="553" relation="include">
        </childnode>
      </node>
      <node id="511">
        <label>AESCMACCC26XX.h</label>
        <link refid="_a_e_s_c_m_a_c_c_c26_x_x_8h"/>
      </node>
      <node id="542">
        <label>ECJPAKECC26X2.h</label>
        <link refid="_e_c_j_p_a_k_e_c_c26_x2_8h"/>
      </node>
      <node id="500">
        <label>AESCBCCC26X4_ns.h</label>
        <link refid="_a_e_s_c_b_c_c_c26_x4__ns_8h"/>
      </node>
      <node id="499">
        <label>AESCBC.h</label>
        <link refid="_a_e_s_c_b_c_8h"/>
        <childnode refid="500" relation="include">
        </childnode>
        <childnode refid="501" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
      </node>
      <node id="523">
        <label>AESECBCC26X4_s.h</label>
        <link refid="_a_e_s_e_c_b_c_c26_x4__s_8h"/>
      </node>
      <node id="507">
        <label>AESCCMCC26X4_s.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x4__s_8h"/>
      </node>
      <node id="501">
        <label>AESCBCCC26X4_s.h</label>
        <link refid="_a_e_s_c_b_c_c_c26_x4__s_8h"/>
      </node>
      <node id="519">
        <label>AESCTRDRBGXX.h</label>
        <link refid="_a_e_s_c_t_r_d_r_b_g_x_x_8h"/>
      </node>
      <node id="547">
        <label>RNGCC26XX.h</label>
        <link refid="_r_n_g_c_c26_x_x_8h"/>
      </node>
      <node id="536">
        <label>ECDHCC26X4_ns.h</label>
        <link refid="_e_c_d_h_c_c26_x4__ns_8h"/>
      </node>
      <node id="532">
        <label>ECCParamsCC26X4_s.h</label>
        <link refid="_e_c_c_params_c_c26_x4__s_8h"/>
      </node>
      <node id="540">
        <label>ECDSACC26X1.h</label>
        <link refid="_e_c_d_s_a_c_c26_x1_8h"/>
      </node>
      <node id="508">
        <label>AESCMAC.h</label>
        <link refid="_a_e_s_c_m_a_c_8h"/>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="510" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
      </node>
      <node id="516">
        <label>AESCTRDRBG.h</label>
        <link refid="_a_e_s_c_t_r_d_r_b_g_8h"/>
        <childnode refid="517" relation="include">
        </childnode>
        <childnode refid="518" relation="include">
        </childnode>
        <childnode refid="519" relation="include">
        </childnode>
      </node>
      <node id="539">
        <label>ECDSA.h</label>
        <link refid="_e_c_d_s_a_8h"/>
        <childnode refid="540" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
      </node>
      <node id="544">
        <label>EDDSA.h</label>
        <link refid="_e_d_d_s_a_8h"/>
        <childnode refid="545" relation="include">
        </childnode>
      </node>
      <node id="526">
        <label>AESGCM.h</label>
        <link refid="_a_e_s_g_c_m_8h"/>
        <childnode refid="524" relation="include">
        </childnode>
        <childnode refid="527" relation="include">
        </childnode>
        <childnode refid="528" relation="include">
        </childnode>
        <childnode refid="525" relation="include">
        </childnode>
      </node>
      <node id="551">
        <label>SHA2CC26X4_ns.h</label>
        <link refid="_s_h_a2_c_c26_x4__ns_8h"/>
      </node>
      <node id="545">
        <label>EDDSACC26X2.h</label>
        <link refid="_e_d_d_s_a_c_c26_x2_8h"/>
      </node>
      <node id="522">
        <label>AESECBCC26X4_ns.h</label>
        <link refid="_a_e_s_e_c_b_c_c26_x4__ns_8h"/>
      </node>
      <node id="528">
        <label>AESGCMCC26X4_s.h</label>
        <link refid="_a_e_s_g_c_m_c_c26_x4__s_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_crypto_key___plaintext" prot="public">CryptoKey_Plaintext</innerclass>
    <innerclass refid="struct_crypto_key___key_store" prot="public">CryptoKey_KeyStore</innerclass>
    <innerclass refid="struct_crypto_key" prot="public">CryptoKey</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___crypto_key___c_o_n_t_r_o_l_1ga804fde3a9a6494b4beeb058556cb6212" prot="public" static="no">
        <name>CryptoKey_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common CryptoKey_control status code reservation offset. <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> driver implementations should offset status codes with CryptoKey_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>CryptoKeyXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>CryptoKey_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CryptoKeyXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>CryptoKey_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CryptoKeyXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>CryptoKey_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="113" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___crypto_key___s_t_a_t_u_s_1ga57bc657c5ea7a274cfc47c3a66829882" prot="public" static="no">
        <name>CryptoKey_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code. </para>        </briefdescription>
        <detaileddescription>
<para>CryptoKey_control() returns CryptoKey_STATUS_SUCCESS if the control code was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="128" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___crypto_key___s_t_a_t_u_s_1gade8db452abe2f9f233fd4dbb207d4acc" prot="public" static="no">
        <name>CryptoKey_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code. </para>        </briefdescription>
        <detaileddescription>
<para>CryptoKey_control() returns CryptoKey_STATUS_ERROR if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="136" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___crypto_key___s_t_a_t_u_s_1ga936ba18446ed96ed60511b7e1922da25" prot="public" static="no">
        <name>CryptoKey_STATUS_UNDEFINED_ENCODING</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>Returned if the encoding of a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> is not a CryptoKey_Encoding value. </para>        </briefdescription>
        <detaileddescription>
<para>CryptoKey_control() returns CryptoKey_STATUS_ERROR if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="144" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_crypto_key_8h_1a0f873057fadfdcb5d99fd38f72c74e86" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t CryptoKey_Encoding</definition>
        <argsstring></argsstring>
        <name>CryptoKey_Encoding</name>
        <briefdescription>
<para>List of the different types of <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="154" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_crypto_key_8h_1a300e189aa57e904bfb5d82a3606a3ce3" prot="public" static="no">
        <type>struct CryptoKey_SecurityPolicy_</type>
        <definition>typedef struct CryptoKey_SecurityPolicy_ CryptoKey_SecurityPolicy</definition>
        <argsstring></argsstring>
        <name>CryptoKey_SecurityPolicy</name>
        <briefdescription>
<para>Structure that specifies the restrictions on a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This structure is device-specific and declared here in incomplete form. The structure is fully defined in CryptoKeyDEVICE.h. This creates a link-time binding when using the structure with key store functions. If the instance of the CryptoKey_SecurityPolicy is kept in a device-specific application-file, the generic application code may still use references to it despite being an incomplete type in the generic application file at compile time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="158" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_crypto_key_8h_1aa4eae5e0829a90feaa3e9753cbed0972" prot="public" static="yes" mutable="no">
        <type>const <ref refid="_crypto_key_8h_1a0f873057fadfdcb5d99fd38f72c74e86" kindref="member">CryptoKey_Encoding</ref></type>
        <definition>const CryptoKey_Encoding CryptoKey_PLAINTEXT</definition>
        <argsstring></argsstring>
        <name>CryptoKey_PLAINTEXT</name>
        <initializer>= 0x02U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="155" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_crypto_key_8h_1aa8e52787f18d04b31b1b68b8dff67299" prot="public" static="yes" mutable="no">
        <type>const <ref refid="_crypto_key_8h_1a0f873057fadfdcb5d99fd38f72c74e86" kindref="member">CryptoKey_Encoding</ref></type>
        <definition>const CryptoKey_Encoding CryptoKey_BLANK_PLAINTEXT</definition>
        <argsstring></argsstring>
        <name>CryptoKey_BLANK_PLAINTEXT</name>
        <initializer>= 0x04U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="156" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_crypto_key_8h_1a032b6d05c9a337b47a6fa13806cfacd8" prot="public" static="yes" mutable="no">
        <type>const <ref refid="_crypto_key_8h_1a0f873057fadfdcb5d99fd38f72c74e86" kindref="member">CryptoKey_Encoding</ref></type>
        <definition>const CryptoKey_Encoding CryptoKey_KEYSTORE</definition>
        <argsstring></argsstring>
        <name>CryptoKey_KEYSTORE</name>
        <initializer>= 0x08U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="157" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_crypto_key_8h_1a751736d69ee5553c81be13b53ecd3fd4" prot="public" static="yes" mutable="no">
        <type>const <ref refid="_crypto_key_8h_1a0f873057fadfdcb5d99fd38f72c74e86" kindref="member">CryptoKey_Encoding</ref></type>
        <definition>const CryptoKey_Encoding CryptoKey_BLANK_KEYSTORE</definition>
        <argsstring></argsstring>
        <name>CryptoKey_BLANK_KEYSTORE</name>
        <initializer>= 0x10U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="158" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_crypto_key_8h_1a885338e1a52e7c404d38d5ff42cd68ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t CryptoKey_getCryptoKeyType</definition>
        <argsstring>(CryptoKey *keyHandle, CryptoKey_Encoding *keyType)</argsstring>
        <name>CryptoKey_getCryptoKeyType</name>
        <param>
          <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>keyHandle</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_8h_1a0f873057fadfdcb5d99fd38f72c74e86" kindref="member">CryptoKey_Encoding</ref> *</type>
          <declname>keyType</declname>
        </param>
        <briefdescription>
<para>Gets the key type of the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">keyHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">keyType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a status code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_8h_1a8642218d598c03e80669d18d2b839216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t CryptoKey_isBlank</definition>
        <argsstring>(CryptoKey *keyHandle, bool *isBlank)</argsstring>
        <name>CryptoKey_isBlank</name>
        <param>
          <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>keyHandle</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isBlank</declname>
        </param>
        <briefdescription>
<para>Wheather the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> is &apos;blank&apos; or represents valid keying material. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">keyHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">isBlank</parametername>
</parameternamelist>
<parameterdescription>
<para>Wheather the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> is &apos;blank&apos; or not</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a status code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_8h_1a3e15a94bfae314256531235c50c59e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t CryptoKey_markAsBlank</definition>
        <argsstring>(CryptoKey *keyHandle)</argsstring>
        <name>CryptoKey_markAsBlank</name>
        <param>
          <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>keyHandle</declname>
        </param>
        <briefdescription>
<para>Marks a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> as &apos;blank&apos;. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> will be unlinked from any previously connected keying material</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">keyHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a status code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_8h_1a31717a6db75f38dabe19f3f26343a36c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t CryptoKey_initSecurityPolicy</definition>
        <argsstring>(CryptoKey_SecurityPolicy *policy)</argsstring>
        <name>CryptoKey_initSecurityPolicy</name>
        <param>
          <type><ref refid="_crypto_key_8h_1a300e189aa57e904bfb5d82a3606a3ce3" kindref="member">CryptoKey_SecurityPolicy</ref> *</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
<para>Function to initialize the CryptoKey_SecurityPolicy struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para>This will zero-out all fields that cannot be set to safe defaults</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">policy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a CryptoKey_SecurityPolicy</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a status code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_8h_1ab638887f421b138f338a808d541f7731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t CryptoKey_verifySecureInputKey</definition>
        <argsstring>(CryptoKey *secureKey)</argsstring>
        <name>CryptoKey_verifySecureInputKey</name>
        <param>
          <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>secureKey</declname>
        </param>
        <briefdescription>
<para>Function to verify a secure <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This will check that the key type is valid and verify plaintext key material is located in non-secure read-access memory.</para><para><simplesect kind="note"><para>This function may not be available in all implementations</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">secureKey</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> struct located in secure memory</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CryptoKey_STATUS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Key passes all verification checks </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CryptoKey_STATUS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Key fails any verification check </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_8h_1aaab052c0aecbe0617d293514f49783e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t CryptoKey_verifySecureOutputKey</definition>
        <argsstring>(CryptoKey *secureKey)</argsstring>
        <name>CryptoKey_verifySecureOutputKey</name>
        <param>
          <type><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> *</type>
          <declname>secureKey</declname>
        </param>
        <briefdescription>
<para>Function to verify a secure output <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This will check that the key type is valid and verify plaintext key material is located in non-secure RW-access memory.</para><para><simplesect kind="note"><para>This function may not be available in all implementations</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">secureKey</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> struct located in secure memory</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CryptoKey_STATUS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Key passes all verification checks </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CryptoKey_STATUS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Key fails any verification check </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h" line="284" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> type is an opaque representation of a cryptographic key. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para><simplesect kind="warning"><para>This is a beta API. It may change in future releases.</para></simplesect>
Cryptographic keying material may be stored on an embedded system multiple ways.<itemizedlist>
<listitem><para>plaintext: in plaintext in flash or RAM</para></listitem><listitem><para>key store: in a dedicated hardware database whose entries can not be directly read out.</para></listitem></itemizedlist>
</para><para>Each storage option requires different approaches to handling the keying material when performing a crypto operation. In order to separate these concerns from the API of the various crypto drivers available with TI-RTOS, the <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> type abstracts away from these details. It does not contain any cryptographic keying material itself but instead contains the details necessary for drivers to use the keying material. The driver implementation handles preparing and moving the keying material as necessary to perform the desired crypto operation.</para><para>The same <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> may be passed to crypto APIs of different modes subject to restrictions placed on the key by their storage types. Plaintext keys may be used without restriction while key store keys have their permitted uses restricted when the keying material is loaded. These restrictions are specified in a CryptoKey_SecurityPolicy that is device-specific and depends on the hardware capability of the device.</para><para>An application should never access a field within a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> struct itself. Where needed, helper functions are provided to do so.</para><para>Before using a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> in another crypto API call, it must be initialized with a call to one of the initialization functions.<itemizedlist>
<listitem><para><ref refid="_crypto_key_plaintext_8h_1ace81a1078fd0befbde3f44a9d9d58cc4" kindref="member">CryptoKeyPlaintext_initKey()</ref></para></listitem><listitem><para><ref refid="_crypto_key_plaintext_8h_1a85196071ac68f8d826f5073b86ce593e" kindref="member">CryptoKeyPlaintext_initBlankKey()</ref></para></listitem><listitem><para><ref refid="_crypto_key_key_store___p_s_a__init_8h_1a11d417c3b743f7e1747560d8cd063d37" kindref="member">KeyStore_PSA_initKey()</ref></para></listitem><listitem><para><ref refid="_crypto_key_key_store___p_s_a__init_8h_1a7190920687bab274e8a2206421a13e9b" kindref="member">KeyStore_PSA_initBlankKey()</ref></para></listitem></itemizedlist>
</para><para>The keystore CryptoKeys may be used to load a key into a key store after its respective _init call.</para><para>CryptoKeys can be initialized &quot;blank&quot;, without keying material but with an empty buffer or key store entry, to encode the destination of a key to be created in the future. This way, keys may be generated securely within a key store for example and never even be stored in RAM temporarily.</para><para>Not all devices support all <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> functionality. This is hardware-dependent. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017-2022,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_cryptoutils_cyptokey_CryptoKey__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_cryptoutils_cyptokey_CryptoKey__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="group___crypto_key___c_o_n_t_r_o_l_1ga804fde3a9a6494b4beeb058556cb6212" refkind="member"><highlight class="preprocessor">#define<sp/>CryptoKey_STATUS_RESERVED<sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="group___crypto_key___s_t_a_t_u_s_1ga57bc657c5ea7a274cfc47c3a66829882" refkind="member"><highlight class="preprocessor">#define<sp/>CryptoKey_STATUS_SUCCESS<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="group___crypto_key___s_t_a_t_u_s_1gade8db452abe2f9f233fd4dbb207d4acc" refkind="member"><highlight class="preprocessor">#define<sp/>CryptoKey_STATUS_ERROR<sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="group___crypto_key___s_t_a_t_u_s_1ga936ba18446ed96ed60511b7e1922da25" refkind="member"><highlight class="preprocessor">#define<sp/>CryptoKey_STATUS_UNDEFINED_ENCODING<sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="_crypto_key_8h_1a0f873057fadfdcb5d99fd38f72c74e86" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="_crypto_key_8h_1a0f873057fadfdcb5d99fd38f72c74e86" kindref="member">CryptoKey_Encoding</ref>;</highlight></codeline>
<codeline lineno="155" refid="_crypto_key_8h_1aa4eae5e0829a90feaa3e9753cbed0972" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CryptoKey_Encoding<sp/><ref refid="_crypto_key_8h_1aa4eae5e0829a90feaa3e9753cbed0972" kindref="member">CryptoKey_PLAINTEXT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x02U;</highlight></codeline>
<codeline lineno="156" refid="_crypto_key_8h_1aa8e52787f18d04b31b1b68b8dff67299" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CryptoKey_Encoding<sp/><ref refid="_crypto_key_8h_1aa8e52787f18d04b31b1b68b8dff67299" kindref="member">CryptoKey_BLANK_PLAINTEXT</ref><sp/>=<sp/>0x04U;</highlight></codeline>
<codeline lineno="157" refid="_crypto_key_8h_1a032b6d05c9a337b47a6fa13806cfacd8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CryptoKey_Encoding<sp/><ref refid="_crypto_key_8h_1a032b6d05c9a337b47a6fa13806cfacd8" kindref="member">CryptoKey_KEYSTORE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x08U;</highlight></codeline>
<codeline lineno="158" refid="_crypto_key_8h_1a751736d69ee5553c81be13b53ecd3fd4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CryptoKey_Encoding<sp/><ref refid="_crypto_key_8h_1a751736d69ee5553c81be13b53ecd3fd4" kindref="member">CryptoKey_BLANK_KEYSTORE</ref><sp/><sp/>=<sp/>0x10U;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="struct_crypto_key___plaintext" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168" refid="struct_crypto_key___plaintext_1a27936967448f716b2b45493e2d758f5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_crypto_key___plaintext_1a27936967448f716b2b45493e2d758f5e" kindref="member">keyMaterial</ref>;</highlight></codeline>
<codeline lineno="169" refid="struct_crypto_key___plaintext_1a87b8da16b2f1cba4a5dcd7604b924f5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_crypto_key___plaintext_1a87b8da16b2f1cba4a5dcd7604b924f5f" kindref="member">keyLength</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}<sp/><ref refid="struct_crypto_key___plaintext" kindref="compound">CryptoKey_Plaintext</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="struct_crypto_key___key_store" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180" refid="struct_crypto_key___key_store_1a97cb3c755fa0055dc2b356199cf498cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_crypto_key___key_store_1a97cb3c755fa0055dc2b356199cf498cb" kindref="member">keyLength</ref>;</highlight></codeline>
<codeline lineno="181" refid="struct_crypto_key___key_store_1a889975900c0ddcd1baae2d6e0e21a565" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_crypto_key___key_store_1a889975900c0ddcd1baae2d6e0e21a565" kindref="member">keyID</ref>;</highlight></codeline>
<codeline lineno="182" refid="struct_crypto_key___key_store_1a60a9838615efcc48da185aecfaae13ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_crypto_key___key_store_1a60a9838615efcc48da185aecfaae13ec" kindref="member">keyAttributes</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}<sp/><ref refid="struct_crypto_key___key_store" kindref="compound">CryptoKey_KeyStore</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="struct_crypto_key" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194" refid="struct_crypto_key_1aca98dd203405514003b840747e216ba2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CryptoKey_Encoding<sp/><ref refid="struct_crypto_key_1aca98dd203405514003b840747e216ba2" kindref="member">encoding</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197" refid="struct_crypto_key_1aaaaeeeb8717326cc4e98cf19e5b31101" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_crypto_key___plaintext" kindref="compound">CryptoKey_Plaintext</ref><sp/><ref refid="struct_crypto_key_1aaaaeeeb8717326cc4e98cf19e5b31101" kindref="member">plaintext</ref>;</highlight></codeline>
<codeline lineno="198" refid="struct_crypto_key_1afb8577e2118da199c81fd8b27b017d73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_crypto_key___key_store" kindref="compound">CryptoKey_KeyStore</ref><sp/><ref refid="struct_crypto_key_1afb8577e2118da199c81fd8b27b017d73" kindref="member">keyStore</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>u;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}<sp/><ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="_crypto_key_8h_1a300e189aa57e904bfb5d82a3606a3ce3" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CryptoKey_SecurityPolicy_<sp/><ref refid="_crypto_key_8h_1a300e189aa57e904bfb5d82a3606a3ce3" kindref="member">CryptoKey_SecurityPolicy</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_8h_1a885338e1a52e7c404d38d5ff42cd68ae" kindref="member">CryptoKey_getCryptoKeyType</ref>(<ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*keyHandle,<sp/>CryptoKey_Encoding<sp/>*keyType);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_8h_1a8642218d598c03e80669d18d2b839216" kindref="member">CryptoKey_isBlank</ref>(<ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*keyHandle,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*isBlank);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_8h_1a3e15a94bfae314256531235c50c59e75" kindref="member">CryptoKey_markAsBlank</ref>(<ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*keyHandle);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_8h_1a31717a6db75f38dabe19f3f26343a36c" kindref="member">CryptoKey_initSecurityPolicy</ref>(<ref refid="_crypto_key_8h_1a300e189aa57e904bfb5d82a3606a3ce3" kindref="member">CryptoKey_SecurityPolicy</ref><sp/>*policy);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_8h_1ab638887f421b138f338a808d541f7731" kindref="member">CryptoKey_verifySecureInputKey</ref>(<ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*secureKey);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_8h_1aaab052c0aecbe0617d293514f49783e1" kindref="member">CryptoKey_verifySecureOutputKey</ref>(<ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref><sp/>*secureKey);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_cryptoutils_cyptokey_CryptoKey__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKey.h"/>
  </compounddef>
</doxygen>
