<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_crypto_key_key_store___p_s_a_8h" kind="file" language="C++">
    <compoundname>CryptoKeyKeyStore_PSA.h</compoundname>
    <includes local="no">third_party/mbedcrypto/include/psa/crypto.h</includes>
    <includedby refid="_crypto_key_key_store___p_s_a__helpers_8h" local="no">CryptoKeyKeyStore_PSA_helpers.h</includedby>
    <includedby refid="_crypto_key_key_store___p_s_a__init_8h" local="no">CryptoKeyKeyStore_PSA_init.h</includedby>
    <includedby refid="_crypto_key_key_store___p_s_a__s_8h" local="no">CryptoKeyKeyStore_PSA_s.h</includedby>
    <incdepgraph>
      <node id="558">
        <label>third_party/mbedcrypto/include/psa/crypto.h</label>
      </node>
      <node id="557">
        <label>CryptoKeyKeyStore_PSA.h</label>
        <link refid="_crypto_key_key_store___p_s_a_8h"/>
        <childnode refid="558" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="560">
        <label>CryptoKeyKeyStore_PSA_helpers.h</label>
        <link refid="_crypto_key_key_store___p_s_a__helpers_8h"/>
      </node>
      <node id="562">
        <label>CryptoKeyKeyStore_PSA_s.h</label>
        <link refid="_crypto_key_key_store___p_s_a__s_8h"/>
      </node>
      <node id="561">
        <label>CryptoKeyKeyStore_PSA_init.h</label>
        <link refid="_crypto_key_key_store___p_s_a__init_8h"/>
      </node>
      <node id="559">
        <label>CryptoKeyKeyStore_PSA.h</label>
        <link refid="_crypto_key_key_store___p_s_a_8h"/>
        <childnode refid="560" relation="include">
        </childnode>
        <childnode refid="561" relation="include">
        </childnode>
        <childnode refid="562" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_key_store___pre_provisioned_key_meta_data" prot="public">KeyStore_PreProvisionedKeyMetaData</innerclass>
    <innerclass refid="struct_key_store__pre_provisioned_key_storage_format" prot="public">KeyStore_preProvisionedKeyStorageFormat</innerclass>
    <innerclass refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds" prot="public">KeyStore_PSA_preProvisionedKeyIDs</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_SUCCESS</name>
        <initializer>((int_fast16_t)PSA_SUCCESS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The action was completed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="143" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a212b767d34258f884e4fd794ae51e132" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_GENERIC_ERROR</name>
        <initializer>((int_fast16_t)PSA_ERROR_GENERIC_ERROR)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An error occurred that does not correspond to any defined failure cause.</para><para>Implementations may use this error code if none of the other standard error codes are applicable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="150" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1aaf6c1ae5694a2fe490e2bda815a42a87" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_NOT_SUPPORTED</name>
        <initializer>((int_fast16_t)PSA_ERROR_NOT_SUPPORTED)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The requested operation or a parameter is not supported by this implementation.</para><para>Implementations should return this error code when an enumeration parameter such as a key type, algorithm, etc. is not recognized. If a combination of parameters is recognized and identified as not valid, return <ref refid="_crypto_key_key_store___p_s_a_8h_1a51c63940bcb6c2f8ded25f308da32653" kindref="member">KEYSTORE_PSA_STATUS_INVALID_ARGUMENT</ref> instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="159" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a4a8ec2db48e0c5f8ac76b2ee910685b3" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_NOT_PERMITTED</name>
        <initializer>((int_fast16_t)PSA_ERROR_NOT_PERMITTED)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The requested action is denied by a policy.</para><para>Implementations should return this error code when the parameters are recognized as valid and supported, and a policy explicitly denies the requested operation.</para><para>If a subset of the parameters of a function call identify a forbidden operation, and another subset of the parameters are not valid or not supported, it is unspecified whether the function returns <ref refid="_crypto_key_key_store___p_s_a_8h_1a4a8ec2db48e0c5f8ac76b2ee910685b3" kindref="member">KEYSTORE_PSA_STATUS_NOT_PERMITTED</ref>, <ref refid="_crypto_key_key_store___p_s_a_8h_1aaf6c1ae5694a2fe490e2bda815a42a87" kindref="member">KEYSTORE_PSA_STATUS_NOT_SUPPORTED</ref> or <ref refid="_crypto_key_key_store___p_s_a_8h_1a51c63940bcb6c2f8ded25f308da32653" kindref="member">KEYSTORE_PSA_STATUS_INVALID_ARGUMENT</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="172" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_INVALID_KEY_ID</name>
        <initializer>((int_fast16_t)PSA_ERROR_INVALID_HANDLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The key ID is not valid or does not exist. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="176" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a9f0693894499148fbfba1e3769b1efa3" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_BUFFER_TOO_SMALL</name>
        <initializer>((int_fast16_t)PSA_ERROR_BUFFER_TOO_SMALL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An output buffer is too small.</para><para>Applications can call the <computeroutput>PSA_xxx_SIZE</computeroutput> macro listed in the function description to determine a sufficient buffer size.</para><para>Implementations should preferably return this error code only in cases when performing the operation with a larger output buffer would succeed. However implementations may return this error if a function has invalid or unsupported parameters in addition to the parameters that determine the necessary output buffer size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="188" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1ab2a8c963faf4969ef26718691dd44ec5" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_ALREADY_EXISTS</name>
        <initializer>((int_fast16_t)PSA_ERROR_ALREADY_EXISTS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Asking for an item that already exists</para><para>Implementations should return this error, when attempting to write an item (like a key) that already exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="194" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a371295236e0ea6ba6f22dd4431744daf" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_DOES_NOT_EXIST</name>
        <initializer>((int_fast16_t)PSA_ERROR_DOES_NOT_EXIST)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Asking for an item that doesn&apos;t exist</para><para>Implementations should return this error, if a requested item (like a key) does not exist. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="200" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_BAD_STATE</name>
        <initializer>((int_fast16_t)PSA_ERROR_BAD_STATE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The requested action cannot be performed in the current state.</para><para>Multipart operations return this error when one of the functions is called out of sequence. Refer to the function descriptions for permitted sequencing of functions.</para><para>Implementations shall not return this error code to indicate that a key either exists or not, but shall instead return <ref refid="_crypto_key_key_store___p_s_a_8h_1ab2a8c963faf4969ef26718691dd44ec5" kindref="member">KEYSTORE_PSA_STATUS_ALREADY_EXISTS</ref> or <ref refid="_crypto_key_key_store___p_s_a_8h_1a371295236e0ea6ba6f22dd4431744daf" kindref="member">KEYSTORE_PSA_STATUS_DOES_NOT_EXIST</ref> as applicable.</para><para>Implementations shall not return this error code to indicate that a key ID is invalid, but shall return <ref refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" kindref="member">KEYSTORE_PSA_STATUS_INVALID_KEY_ID</ref> instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="216" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a51c63940bcb6c2f8ded25f308da32653" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_INVALID_ARGUMENT</name>
        <initializer>((int_fast16_t)PSA_ERROR_INVALID_ARGUMENT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The parameters passed to the function are invalid.</para><para>Implementations may return this error any time a parameter or combination of parameters are recognized as invalid.</para><para>Implementations shall not return this error code to indicate that a key ID is invalid, but shall return <ref refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" kindref="member">KEYSTORE_PSA_STATUS_INVALID_KEY_ID</ref> instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="227" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a5105691651cb9d272e30d3edbf7dbbaa" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_INSUFFICIENT_MEMORY</name>
        <initializer>((int_fast16_t)PSA_ERROR_INSUFFICIENT_MEMORY)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>There is not enough runtime memory.</para><para>If the action is carried out across multiple security realms, this error can refer to available memory in any of the security realms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="233" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a64f88ebad3ed76cbd696f5b6da79f9cc" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_INSUFFICIENT_STORAGE</name>
        <initializer>((int_fast16_t)PSA_ERROR_INSUFFICIENT_STORAGE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>There is not enough persistent storage.</para><para>Functions that modify the key storage return this error code if there is insufficient storage space on the host media. In addition, many functions that do not otherwise access storage may return this error code if the implementation requires a mandatory log entry for the requested action and the log storage space is full. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="242" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a50f49fd2693d0b28895fd411f1b5b2bb" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_COMMUNICATION_FAILURE</name>
        <initializer>((int_fast16_t)PSA_ERROR_COMMUNICATION_FAILURE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>There was a communication failure inside the implementation.</para><para>This can indicate a communication failure between the application and an external cryptoprocessor or between the cryptoprocessor and an external volatile or persistent memory. A communication failure may be transient or permanent depending on the cause.</para><para><simplesect kind="warning"><para>If a function returns this error, it is undetermined whether the requested action has completed or not. Implementations should return <ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref> on successful completion whenever possible, however functions may return <ref refid="_crypto_key_key_store___p_s_a_8h_1a50f49fd2693d0b28895fd411f1b5b2bb" kindref="member">KEYSTORE_PSA_STATUS_COMMUNICATION_FAILURE</ref> if the requested action was completed successfully in an external cryptoprocessor but there was a breakdown of communication before the cryptoprocessor could report the status to the application. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="260" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a2879b4e5c574ef3c72866f10a2f57f3d" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_STORAGE_FAILURE</name>
        <initializer>((int_fast16_t)PSA_ERROR_STORAGE_FAILURE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>There was a storage failure that may have led to data loss.</para><para>This error indicates that some persistent storage is corrupted. It should not be used for a corruption of volatile memory (use <ref refid="_crypto_key_key_store___p_s_a_8h_1a784be5480b9ca7255f8956a17d18d852" kindref="member">KEYSTORE_PSA_STATUS_CORRUPTION_DETECTED</ref>), for a communication error between the cryptoprocessor and its external storage (use <ref refid="_crypto_key_key_store___p_s_a_8h_1a50f49fd2693d0b28895fd411f1b5b2bb" kindref="member">KEYSTORE_PSA_STATUS_COMMUNICATION_FAILURE</ref>), or when the storage is in a valid state but is full (use <ref refid="_crypto_key_key_store___p_s_a_8h_1a64f88ebad3ed76cbd696f5b6da79f9cc" kindref="member">KEYSTORE_PSA_STATUS_INSUFFICIENT_STORAGE</ref>).</para><para>Note that a storage failure does not indicate that any data that was previously read is invalid. However this previously read data may no longer be readable from storage.</para><para>When a storage failure occurs, it is no longer possible to ensure the global integrity of the keystore. Depending on the global integrity guarantees offered by the implementation, access to other data may or may not fail even if the data is still readable but its integrity cannot be guaranteed.</para><para>Implementations should only use this error code to report a permanent storage corruption. However application writers should keep in mind that transient errors while reading the storage may be reported using this error code. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="285" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a822e35765c5724075f67509d4d4001b9" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_HARDWARE_FAILURE</name>
        <initializer>((int_fast16_t)PSA_ERROR_HARDWARE_FAILURE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A hardware failure was detected.</para><para>A hardware failure may be transient or permanent depending on the cause. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="291" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a3d7242ef739e418dc674275bd54d56c5" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_INSUFFICIENT_ENTROPY</name>
        <initializer>((int_fast16_t)PSA_ERROR_INSUFFICIENT_ENTROPY)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>There is not enough entropy to generate random data needed for the requested action.</para><para>This error indicates a failure of a hardware random generator. Application writers should note that this error can be returned not only by functions whose purpose is to generate random data, such as key, IV or nonce generation, but also by functions that execute an algorithm with a randomized result, as well as functions that use randomization of intermediate computations as a countermeasure to certain attacks.</para><para>Implementations should avoid returning this error after <ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init()</ref> has succeeded. Implementations should generate sufficient entropy during initialization and subsequently use a cryptographically secure pseudorandom generator (PRNG). However implementations may return this error at any time if a policy requires the PRNG to be reseeded during normal operation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="310" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a784be5480b9ca7255f8956a17d18d852" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_CORRUPTION_DETECTED</name>
        <initializer>((int_fast16_t)PSA_ERROR_CORRUPTION_DETECTED)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A tampering attempt was detected.</para><para>If an application receives this error code, there is no guarantee that previously accessed or computed data was correct and remains confidential. Applications should not perform any security function and should enter a safe failure state.</para><para>Implementations may return this error code if they detect an invalid state that cannot happen during normal operation and that indicates that the implementation&apos;s security guarantees no longer hold. Depending on the implementation architecture and on its security and safety goals, the implementation may forcibly terminate the application.</para><para>This error code is intended as a last resort when a security breach is detected and it is unsure whether the keystore data is still protected. Implementations shall only return this error code to report an alarm from a tampering detector, to indicate that the confidentiality of stored data can no longer be guaranteed, or to indicate that the integrity of previously returned data is now considered compromised. Implementations shall not use this error code to indicate a hardware failure that merely makes it impossible to perform the requested operation (use <ref refid="_crypto_key_key_store___p_s_a_8h_1a50f49fd2693d0b28895fd411f1b5b2bb" kindref="member">KEYSTORE_PSA_STATUS_COMMUNICATION_FAILURE</ref>, <ref refid="_crypto_key_key_store___p_s_a_8h_1a2879b4e5c574ef3c72866f10a2f57f3d" kindref="member">KEYSTORE_PSA_STATUS_STORAGE_FAILURE</ref>, <ref refid="_crypto_key_key_store___p_s_a_8h_1a822e35765c5724075f67509d4d4001b9" kindref="member">KEYSTORE_PSA_STATUS_HARDWARE_FAILURE</ref> or other applicable error code instead).</para><para>This error indicates an attack against the application. Implementations shall not return this error code as a consequence of the behavior of the application itself. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="340" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1aac85cef511781f98b0071828def22430" prot="public" static="no">
        <name>KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</name>
        <initializer>((int_fast16_t)-250)</initializer>
        <briefdescription>
<para>An error status code returned if the hardware or software resource is currently unavailable. </para>        </briefdescription>
        <detaileddescription>
<para>KeyStore driver implementation may have limitations on how many clients can simultaneously perform operations on the same key. This status code is returned if the mutual exclusion mechanism signals that an operation cannot currently be performed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="352" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a9660db2b6b9cc23e39c3c686f54a2913" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_TYPE_RAW_DATA</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_KEY_TYPE_RAW_DATA)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw data.</para><para>A &quot;key&quot; of this type cannot be used for any cryptographic operation. Applications may use this type to store arbitrary data in the keystore. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="362" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a604223da8ca256c5668828e8df2237cc" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_TYPE_HMAC</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_KEY_TYPE_HMAC)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMAC key.</para><para>The key policy determines which underlying hash algorithm the key can be used for.</para><para>HMAC keys should generally have the same size as the underlying hash. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="370" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a80a4990b97c18a647e1421d3ddede23a" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_TYPE_DERIVE</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_KEY_TYPE_DERIVE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A secret for key derivation.</para><para>The key policy determines which key derivation algorithm the key can be used for. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="377" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a6f086c3b74e444de391172b98cc5c1ef" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_TYPE_AES</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_KEY_TYPE_AES)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key for a cipher, AEAD or MAC algorithm based on the AES block cipher.</para><para>The size of the key can be 16 bytes (AES-128), 24 bytes (AES-192) or 32 bytes (AES-256). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="384" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1aeb6689700d62749da62d274f13423c01" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_TYPE_DES</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_KEY_TYPE_DES)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key for a cipher or MAC algorithm based on DES or 3DES (Triple-DES).</para><para>The size of the key can be 64 bits (single DES), 128 bits (2-key 3DES) or 192 bits (3-key 3DES).</para><para>Note that single DES and 2-key 3DES are weak and strongly deprecated and should only be used to decrypt legacy data. 3-key 3DES is weak and deprecated and should only be used in legacy protocols. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="395" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a1927793b24e14417c23249a44c67eb8a" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_TYPE_CAMELLIA</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_KEY_TYPE_CAMELLIA)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key for a cipher, AEAD or MAC algorithm based on the Camellia block cipher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="399" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1adf33810806558bfa9d7a74a1d72e7f3d" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_TYPE_ARC4</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_KEY_TYPE_ARC4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key for the RC4 stream cipher.</para><para>Note that RC4 is weak and deprecated and should only be used in legacy protocols. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="405" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1ad5b5a0848b4e5df059094bb0bf9a1df6" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_TYPE_CHACHA20</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_KEY_TYPE_CHACHA20)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Key for the ChaCha20 stream cipher or the Chacha20-Poly1305 AEAD algorithm.</para><para>ChaCha20 and the ChaCha20_Poly1305 construction are defined in RFC 7539.</para><para>Implementations must support 12-byte nonces, may support 8-byte nonces, and should reject other sizes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="414" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a4c6673755f418f1796f0c49d82956224" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_TYPE_RSA_PUBLIC_KEY</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_KEY_TYPE_RSA_PUBLIC_KEY)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RSA public key.</para><para>The size of an RSA key is the bit size of the modulus. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="420" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a361841dc2f13cf2adc4f3a39dfcc4bb4" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_TYPE_RSA_KEY_PAIR</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_KEY_TYPE_RSA_KEY_PAIR)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RSA key pair (private and public key).</para><para>The size of an RSA key is the bit size of the modulus. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="425" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a0e1d8f241228e49c9cadadfb4579ef1a" prot="public" static="no">
        <name>PSA_KEY_TYPE_IS_RSA</name>
        <param><defname>type</defname></param>
        <initializer>(PSA_KEY_TYPE_PUBLIC_KEY_OF_KEY_PAIR(type) == PSA_KEY_TYPE_RSA_PUBLIC_KEY)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether a key type is an RSA key (pair or public-only). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="427" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a65d37ff8756bcd5924979b83021ecddb" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_TYPE_ECC_PUBLIC_KEY_BASE</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_KEY_TYPE_ECC_PUBLIC_KEY_BASE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="429" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a76dc9c66e99c259489b539e5e6e56d24" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_TYPE_ECC_KEY_PAIR_BASE</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_KEY_TYPE_ECC_KEY_PAIR_BASE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="430" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a88cd65b116acd1c2f11182418dbb19e1" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_SHA_224</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_SHA_224)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA2-224 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="443" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1aef7060634005c4b54211c05654ccd128" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_SHA_256</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_SHA_256)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA2-256 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="445" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a2b5ed960ed187e8b04b8d66ce0368f79" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_SHA_384</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_SHA_384)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA2-384 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="447" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a2b43e1de1bfb6bcb13025c989a1d766d" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_SHA_512</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_SHA_512)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA2-512 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="449" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a16f862bc36cc9445f786f72910876673" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_SHA_512_224</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_SHA_512_224)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA2-512/224 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="451" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a7d33fc6bf9ca4232e2176780daec25bc" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_SHA_512_256</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_SHA_512_256)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SHA2-512/256 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="453" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a2deaf3fc38f71fae2c66ae2749790b34" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_CBC_MAC</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_CBC_MAC)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CBC-MAC construction over a block cipher</para><para><simplesect kind="warning"><para>CBC-MAC is insecure in many cases. A more secure mode, such as <ref refid="_crypto_key_key_store___p_s_a_8h_1a591037e8602a42e1609d30be41a66658" kindref="member">KEYSTORE_PSA_ALG_CMAC</ref>, is recommended. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="460" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a591037e8602a42e1609d30be41a66658" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_CMAC</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_CMAC)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CMAC construction over a block cipher </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="462" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1aa3b9f6c8ff7bc830c71100a80c908782" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_CTR</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_CTR)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CTR stream cipher mode.</para><para>CTR is a stream cipher which is built from a block cipher. The underlying block cipher is determined by the key type. For example, to use AES-128-CTR, use this algorithm with a key of type <ref refid="_crypto_key_key_store___p_s_a_8h_1a6f086c3b74e444de391172b98cc5c1ef" kindref="member">KEYSTORE_PSA_KEY_TYPE_AES</ref> and a length of 128 bits (16 bytes). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="471" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1ac75edf66c87a990e2572cf1438d2ac19" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_CBC_NO_PADDING</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_CBC_NO_PADDING)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CBC block cipher chaining mode, with no padding.</para><para>The underlying block cipher is determined by the key type.</para><para>This symmetric cipher mode can only be used with messages whose lengths are whole number of blocks for the chosen block cipher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="480" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a39ae8e9de3539d10243b8d852988062c" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_CCM</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_CCM)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The CCM authenticated encryption algorithm.</para><para>The underlying block cipher is determined by the key type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="486" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1ab06f39b8650abf93f1135afb44a0f717" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_GCM</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_GCM)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The GCM authenticated encryption algorithm.</para><para>The underlying block cipher is determined by the key type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="492" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a8ea355792a3ecca4b258c1f4176ab508" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_CHACHA20_POLY1305</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_CHACHA20_POLY1305)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Chacha20-Poly1305 AEAD algorithm.</para><para>The ChaCha20_Poly1305 construction is defined in RFC 7539.</para><para>Implementations must support 12-byte nonces, may support 8-byte nonces, and should reject other sizes.</para><para>Implementations must support 16-byte tags and should reject other sizes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="503" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1aa335536d1c4a661d8066ca0e87838267" prot="public" static="no">
        <name>KEYSTORE_PSA_ALG_ECDH</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>)PSA_ALG_ECDH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elliptic curve Diffie-Hellman (ECDH) key agreement algorithm.</para><para>The shared secret produced by key agreement is the x-coordinate of the shared secret point. It is always <computeroutput>ceiling(m / 8)</computeroutput> bytes long where <computeroutput>m</computeroutput> is the bit size associated with the curve, i.e. the bit size of the order of the curve&apos;s coordinate field. When <computeroutput>m</computeroutput> is not a multiple of 8, the byte containing the most significant bit of the shared secret is padded with zero bits. The byte order is either little-endian or big-endian depending on the curve type.</para><para><itemizedlist>
<listitem><para>For Montgomery curves (curve types <computeroutput>PSA_ECC_FAMILY_CURVEXXX</computeroutput>), the shared secret is the x-coordinate of <computeroutput>d_A Q_B = d_B Q_A</computeroutput> in little-endian byte order. The bit size is 448 for Curve448 and 255 for Curve25519.</para></listitem><listitem><para>For Weierstrass curves over prime fields (curve types <computeroutput>PSA_ECC_FAMILY_SECPXXX</computeroutput> and <computeroutput>PSA_ECC_FAMILY_BRAINPOOL_PXXX</computeroutput>), the shared secret is the x-coordinate of <computeroutput>d_A Q_B = d_B Q_A</computeroutput> in big-endian byte order. The bit size is <computeroutput>m = ceiling(log_2(p))</computeroutput> for the field <computeroutput>F_p</computeroutput>.</para></listitem><listitem><para>For Weierstrass curves over binary fields (curve types <computeroutput>PSA_ECC_FAMILY_SECTXXX</computeroutput>), the shared secret is the x-coordinate of <computeroutput>d_A Q_B = d_B Q_A</computeroutput> in big-endian byte order. The bit size is <computeroutput>m</computeroutput> for the field <computeroutput>F_{2^m}</computeroutput>. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="530" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a8181437a2a58beec61299849b2d79795" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT163K1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT163K1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="537" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="537" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a1271eb117da68463d2655ea2a128e321" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT163R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT163R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="538" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1adcfbaa2f578a9e42fb4a7bd97044763a" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT163R2</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT163R2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="539" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a9c8a13c3213c676fe28800e665acf17a" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT193R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT193R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="540" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a966c934bcac5776094fcd6051ffcdb80" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT193R2</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT193R2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="541" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1abcfaa607f2d33ce6c9ec971a6692694e" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT233K1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT233K1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="542" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a51ab637e1d58d0fb7a3ae14dd1a9d239" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT233R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT233R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="543" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a5f8b5858e8bcfe903abfa334d1291604" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT239K1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT239K1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="544" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1ab1628419bd22750dbe6374cd8f2b2287" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT283K1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT283K1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="545" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a15bffd02b63d2799326b1b73ffc1c074" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT283R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT283R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="546" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a04b609ea3f218b00bdcbeb38b9107996" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT409K1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT409K1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="547" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a723240858d0685733d8fb8e0442a5352" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT409R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT409R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="548" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1aac4132761312826488989f14a11a86b6" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT571K1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT571K1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="549" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a5b84a9b73196d9b00d4b739939d68516" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECT571R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECT571R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="550" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a342d4f5c34d81b0e8287d836dc8b36d7" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECP160K1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECP160K1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="551" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="551" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1aafa5e2bf8830c89d2f100c46ee580591" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECP160R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECP160R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="552" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="552" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1afe6e7d08f961c3604e004551bde30b7e" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECP160R2</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECP160R2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="553" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a131be3805205d07fb673c305a5fbd2c5" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECP192K1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECP192K1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="554" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a96d90dd1023b8133fa6125326d066654" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECP192R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECP192R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="555" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="555" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a279669b034f7034f784360cc6b4ffc01" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECP224K1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECP224K1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="556" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a163097a865ef0a6fe677bc7e16902025" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECP224R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECP224R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="557" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a83625d935737b4e15ca784d398dc03b7" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECP256K1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECP256K1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="558" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="558" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a12f9545558f42abe5545f316a712139f" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECP256R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECP256R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="559" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1afc9f05cf50fc0bba921df931a8e278fc" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECP384R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECP384R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="560" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a73ee464f665675b3a7ea124e0ca15f47" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_SECP521R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_SECP521R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="561" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a36efab0ede845bd7b356b1064d9a15bf" prot="public" static="no">
        <name>KEYSTRORE_ECC_CURVE_BRAINPOOL_P256R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_BRAINPOOL_P256R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="562" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a32f0b537f2f78f12f13d7724e523c249" prot="public" static="no">
        <name>KEYSTRORE_ECC_CURVE_BRAINPOOL_P384R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_BRAINPOOL_P384R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="563" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a786aff9cb22058e9da37d1d9cd07325a" prot="public" static="no">
        <name>KEYSTRORE_ECC_CURVE_BRAINPOOL_P512R1</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_BRAINPOOL_P512R1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="564" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a6c689f51db7db7441af0a55ad54fb863" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_CURVE25519</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_CURVE25519)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cur KEYSTRORE_ECC_CURVE_SECPv((KeyStore_PSA_KeyType)e25519.</para><para>This is the curve defined in Bernstein et al., <emphasis>Curve25519: new Diffie-Hellman speed records</emphasis>, LNCS 3958, 2006. The algorithm <ref refid="_crypto_key_key_store___p_s_a_8h_1aa335536d1c4a661d8066ca0e87838267" kindref="member">KEYSTORE_PSA_ALG_ECDH</ref> performs X25519 when used with this curve. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="571" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="571" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a87ead5c5ef881e8deffa30adb5a32930" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_CURVE448</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_CURVE448)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Curve448</para><para>This is the curve defined in Hamburg, <emphasis>Ed448-Goldilocks, a new elliptic curve</emphasis>, NIST ECC Workshop, 2015. The algorithm <ref refid="_crypto_key_key_store___p_s_a_8h_1aa335536d1c4a661d8066ca0e87838267" kindref="member">KEYSTORE_PSA_ALG_ECDH</ref> performs X448 when used with this curve. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="578" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1aa43cb48050594a3109465d7ed78dd84a" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_VENDOR_MIN</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_VENDOR_MIN)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Minimum value for a vendor-defined ECC curve identifier</para><para>The range for vendor-defined curve identifiers is a subset of the IANA registry private use range, <computeroutput>0xfe00</computeroutput> - <computeroutput>0xfeff</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="585" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a83ba98e43cbc96da4176714d5a1445d0" prot="public" static="no">
        <name>KEYSTORE_PSA_ECC_CURVE_VENDOR_MAX</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>)PSA_ECC_CURVE_VENDOR_MAX)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum value for a vendor-defined ECC curve identifier</para><para>The range for vendor-defined curve identifiers is a subset of the IANA registry private use range, <computeroutput>0xfe00</computeroutput> - <computeroutput>0xfeff</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="591" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a7bb18342bd1614b96c555a9dfcdc29c7" prot="public" static="no">
        <name>KEYSTORE_PSA_MAX_VOLATILE_KEY_ID</name>
        <initializer>PSA_KEY_SLOT_COUNT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="597" column="13" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a4411361b7b39fe77832ce053152480e7" prot="public" static="no">
        <name>MEMBER_SIZE</name>
        <param><defname>type</defname></param>
        <param><defname>member</defname></param>
        <initializer>sizeof(((type *)0)-&gt;member)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="607" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__lifetimes_1ga67c68b7d1a3dd9775e6436682378c455" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_LIFETIME_VOLATILE</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a6606ab969b68d63d56d28a8d718fcbb9" kindref="member">KeyStore_PSA_KeyLifetime</ref>)PSA_KEY_LIFETIME_VOLATILE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A volatile key only exists as long as the handle to it is not closed. The key material is guaranteed to be erased on a power reset. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="616" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__lifetimes_1ga0f9d5620a69b0815445736338f370355" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_LIFETIME_PERSISTENT</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a6606ab969b68d63d56d28a8d718fcbb9" kindref="member">KeyStore_PSA_KeyLifetime</ref>)PSA_KEY_LIFETIME_PERSISTENT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The default storage area for persistent keys.</para><para>A persistent key remains in storage until it is explicitly destroyed or until the corresponding storage area is wiped. This specification does not define any mechanism to wipe a storage area, but implementations may provide their own mechanism (for example to perform a factory reset, to prepare for device refurbishment, or to uninstall an application).</para><para>This lifetime value is the default storage area for the calling application. Implementations may offer other storage areas designated by other lifetime values as implementation-specific extensions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="630" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__lifetimes_1ga2139eb197f8e363d1ff623139dbd84a7" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_ID_NULL</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref>)0x0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The null key identifier. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="634" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="634" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__lifetimes_1gadb82894cdb81fad99975fabc1f5bac81" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_ID_USER_MIN</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref>)PSA_KEY_ID_USER_MIN)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The minimum value for a key identifier chosen by the application. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="638" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__lifetimes_1ga7f7147e268efa63e10cd3418b76d0e02" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_ID_PERSISTENT_USER_MIN</name>
        <initializer>0x41</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The minimum value for a persistent key identifier chosen by the application. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="642" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="642" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__lifetimes_1ga9593d39dd9a49a79dbeca893ff04e2a4" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_ID_WITH_CERTIFICATE_USER_MAX</name>
        <initializer>0x1fffffff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum value for a persistent key identifier with associated certificate chosen by the application. KeyStore uses Bit 29 in KeyID to indicate certificate storage. Application may choose any key ID less than 2^29 for persistent keys Persistent Key ID limit [KEYSTORE_PSA_MAX_VOLATILE_KEY_ID + 1, KEYSTORE_PSA_KEY_ID_USER_MIN] (Setting bit 30 makes KeyID greater than PSA_KEY_ID_USER_MIN which will fall into VENDOR limit) (Setting bit 31 makes KeyID greater than PSA_KEY_ID_VENDOR_MAX which is not a valid KeyID) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="651" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__lifetimes_1gaf74e56b3c4cc9779d4ce28bb962ce946" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_ID_CERTIFICATE_BIT</name>
        <initializer>(1 &lt;&lt; 29)</initializer>
        <briefdescription>
<para>Bit mask to set 29th bit to indicate certificate storage. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="657" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="657" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__lifetimes_1gac487d6aa798bfd9970defd5f8a3c8048" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_ID_VENDOR_MIN</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref>)PSA_KEY_ID_VENDOR_MIN)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The minimum value for a key identifier chosen by the implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="661" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__lifetimes_1ga61b58d606ee33b8ffc9d21b6ecd68927" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_ID_VENDOR_MAX</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref>)PSA_KEY_ID_VENDOR_MAX)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum value for a key identifier chosen by the implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="665" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__lifetimes_1ga4e1a19f2b2d0b365d65a23809c8e16db" prot="public" static="no">
        <name>KEYSTORE_PSA_DEFAULT_OWNER</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default Key Owner </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="669" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__policies_1ga434328ced4e7eb4ee65d547bc05118b5" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_USAGE_EXPORT</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref>)PSA_KEY_USAGE_EXPORT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the key may be exported.</para><para>A public key or the public part of a key pair may always be exported regardless of the value of this permission flag.</para><para>If a key does not have export permission, implementations shall not allow the key to be exported in plain form from the cryptoprocessor, whether through <ref refid="_crypto_key_key_store___p_s_a_8h_1acaf3de92ced3940ebaca0e179ac38768" kindref="member">KeyStore_PSA_exportKey()</ref> or through a proprietary interface. The key may however be exportable in a wrapped form, i.e. in a form where it is encrypted by another key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="688" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__policies_1ga7b01130e88538177a92063ed7c39c404" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_USAGE_COPY</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref>)PSA_KEY_USAGE_COPY)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the key may be copied.</para><para>This flag allows the use of KeyStore_PSA_copyKey() to make a copy of the key with the same policy or a more restrictive policy.</para><para>For lifetimes for which the key is located in a secure element which enforce the non-exportability of keys, copying a key outside the secure element also requires the usage flag <ref refid="group__key__policies_1ga434328ced4e7eb4ee65d547bc05118b5" kindref="member">KEYSTORE_PSA_KEY_USAGE_EXPORT</ref>. Copying the key inside the secure element is permitted with just <ref refid="group__key__policies_1ga7b01130e88538177a92063ed7c39c404" kindref="member">KEYSTORE_PSA_KEY_USAGE_COPY</ref> if the secure element supports it. For keys with the lifetime <ref refid="group__key__lifetimes_1ga67c68b7d1a3dd9775e6436682378c455" kindref="member">KEYSTORE_PSA_KEY_LIFETIME_VOLATILE</ref> or <ref refid="group__key__lifetimes_1ga0f9d5620a69b0815445736338f370355" kindref="member">KEYSTORE_PSA_KEY_LIFETIME_PERSISTENT</ref>, the usage flag <ref refid="group__key__policies_1ga7b01130e88538177a92063ed7c39c404" kindref="member">KEYSTORE_PSA_KEY_USAGE_COPY</ref> is sufficient to permit the copy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="704" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__policies_1gaa67d52dc99c8cb9f35522abeb2fa3a04" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_USAGE_ENCRYPT</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref>)PSA_KEY_USAGE_ENCRYPT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the key may be used to encrypt a message.</para><para>This flag allows the key to be used for a symmetric encryption operation, for an AEAD encryption-and-authentication operation, or for an asymmetric encryption operation, if otherwise permitted by the key&apos;s type and policy.</para><para>For a key pair, this concerns the public key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="715" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__policies_1ga0e2ed070c15e64eb148d40e85dcb105b" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_USAGE_DECRYPT</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref>)PSA_KEY_USAGE_DECRYPT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the key may be used to decrypt a message.</para><para>This flag allows the key to be used for a symmetric decryption operation, for an AEAD decryption-and-verification operation, or for an asymmetric decryption operation, if otherwise permitted by the key&apos;s type and policy.</para><para>For a key pair, this concerns the private key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="726" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__policies_1ga999d229525d5dfbfaa61d3b6c89aed07" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_USAGE_SIGN_HASH</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref>)PSA_KEY_USAGE_SIGN_HASH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the key may be used to sign a message.</para><para>This flag allows the key to be used for a MAC calculation operation or for an asymmetric signature operation, if otherwise permitted by the key&apos;s type and policy.</para><para>For a key pair, this concerns the private key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="736" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__policies_1gafe6143ba20ba93fd0321c2c279be1ef8" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_USAGE_VERIFY_HASH</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref>)PSA_KEY_USAGE_VERIFY_HASH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the key may be used to verify a message signature.</para><para>This flag allows the key to be used for a MAC verification operation or for an asymmetric signature verification operation, if otherwise permitted by by the key&apos;s type and policy.</para><para>For a key pair, this concerns the public key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="746" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="746" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__key__policies_1ga29a66a6486f87634ecbaaf885b953d19" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_USAGE_DERIVE</name>
        <initializer>((<ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref>)PSA_KEY_USAGE_DERIVE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the key may be used to derive other keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="750" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="750" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1ga383aa20c778dfebe26d78ae2b569f253" prot="public" static="no">
        <name>KEYSTORE_PSA_KEY_ATTRIBUTES_INIT</name>
        <initializer>PSA_KEY_ATTRIBUTES_INIT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="868" column="13" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1gac7a4b1f276d3ff9453d05360826fbb78" prot="public" static="no">
        <name>GET_KEY_ID</name>
        <param><defname>keyID</defname></param>
        <param><defname>ID</defname></param>
        <initializer>keyID = ID</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to assign and get keyID</para><para>It depends on MBEDTLS_PSA_CRYPTO_KEY_FILE_ID_ENCODES_OWNER to assign keyID and owner if multiple partition supported by mbedtls </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="882" column="22" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__attributes_1ga8d275b44bc2bed4b0121ab919ace07cc" prot="public" static="no">
        <name>SET_KEY_ID</name>
        <param><defname>ID</defname></param>
        <param><defname>keyID</defname></param>
        <initializer>ID = keyID</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="884" column="17" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="884" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1ab20ef6a59131b56c4a762a2d37a2ba74" prot="public" static="no">
        <name>KEYSTORE_PSA_PREPROVISIONED_AREA_ADDR</name>
        <initializer>0x0000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starting address of Pre-provisioned keys.</para><para>The Immutable platform Root of Trust stores the pre-provisioned key&apos;s programmed at production. SKS implementation will read this address to obtain the KeyStore_PSA_KeyFileId and other relevant meta data of all the pre-provisioned keys stored at this address </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="923" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="923" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a47334e376fdfc74368a094a098477e41" prot="public" static="no">
        <name>KEYSTORE_PSA_PREPROVISIONED_AREA_SIZE</name>
        <initializer>(0x700) /* 1792 B */</initializer>
        <briefdescription>
<para>Area size for pre-provisioned keys, 2KB - 256B (reserved for attestation data) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="927" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="927" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a12efa00311960d6e9fa72f6b6ff3d01c" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_KEY_EXPORT_FLAG</name>
        <initializer>0xAAAA</initializer>
        <briefdescription>
<para>Exportable pre-provisioned key prefix. </para>        </briefdescription>
        <detaileddescription>
<para>Prefix the plaintext key in pre-provisioned key that can be exported to the non-secure application with this flag </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="934" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="934" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1af244339028e7cb31a0c2ec2a5cad76b2" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_KEY_EXPORT_FLAG_LENGTH</name>
        <initializer>(sizeof(<ref refid="_crypto_key_key_store___p_s_a_8h_1a12efa00311960d6e9fa72f6b6ff3d01c" kindref="member">KEYSTORE_PSA_PRE_PROVISIONED_KEY_EXPORT_FLAG</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="935" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="935" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1af88f2c615e616640c2c6bb37a47c6c9f" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_KEY_NO_EXPORT_FLAG</name>
        <initializer>0xA5A5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="936" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="936" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a660684b66e4cd6a549ed05a6cfa2a75d" prot="public" static="no">
        <name>KEYSTORE_PSA_PREPROVISIONED_KEYS_EMPTY</name>
        <initializer>0xFFFF</initializer>
        <briefdescription>
<para>Macro to indicate empty pre-provisioned key memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="941" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="941" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a06ab45a5fa13a3ab909904ecc6f2d65e" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_KEY_MAGIC_HEADER</name>
        <initializer>&quot;HUK\0KEY&quot;</initializer>
        <briefdescription>
<para>Pre-provisioned key storage magic header. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="946" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="946" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a245471f73a81c1399191098480e76aed" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_KEYS_END</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="947" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="947" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a5cb43a1c16726e4c59419a8ee76cf1f6" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_KEY_MAGIC_HEADER_LENGTH</name>
        <initializer>(sizeof(<ref refid="_crypto_key_key_store___p_s_a_8h_1a06ab45a5fa13a3ab909904ecc6f2d65e" kindref="member">KEYSTORE_PSA_PRE_PROVISIONED_KEY_MAGIC_HEADER</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="948" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="948" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1ae7699792f625e323ef027e69ef166a1a" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_KEYS_END_LENGTH</name>
        <initializer>(sizeof(<ref refid="_crypto_key_key_store___p_s_a_8h_1a245471f73a81c1399191098480e76aed" kindref="member">KEYSTORE_PSA_PRE_PROVISIONED_KEYS_END</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="949" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="949" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a15641bfd22500dde6b99b72553905df3" prot="public" static="no">
        <name>KEYSTORE_PSA_MAX_PREPROVISIONED_KEYS</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="950" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="950" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a92ce73a489af978faee98abe2bc1dcbc" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_KEY_VALID_LIFETIME</name>
        <initializer>0xAAAA</initializer>
        <briefdescription>
<para>Pre-provisioned key Lifetime. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="955" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a5cc084a55ab9aebfa1e5f9b7238fc685" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_KEY_INVALID_LIFETIME</name>
        <initializer>0x8888</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="956" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="956" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a2cd486fcd3f741025f63a21039b62e85" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_KEY_ID_MAX</name>
        <initializer>0x40</initializer>
        <briefdescription>
<para>Admissible key ID range for Pre-provisioned keys. </para>        </briefdescription>
        <detaileddescription>
<para>0x21 - 0x40 is reserved to store pre-provisioned keys. Correspondingly, 0x10000021 - 0x10000040 is reserved for any associated certificates. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="964" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="964" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1aad00aefd28ed4e03648992bfbc25b17e" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_KEY_ID_MIN</name>
        <initializer>0x21</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="965" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="965" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1aad309e9f08c40995e6222673539045bd" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_CERTIFICATE_ID_MAX</name>
        <initializer>(<ref refid="_crypto_key_key_store___p_s_a_8h_1a2cd486fcd3f741025f63a21039b62e85" kindref="member">KEYSTORE_PSA_PRE_PROVISIONED_KEY_ID_MAX</ref> | <ref refid="group__key__lifetimes_1gaf74e56b3c4cc9779d4ce28bb962ce946" kindref="member">KEYSTORE_PSA_KEY_ID_CERTIFICATE_BIT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="966" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="966" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a237605d50e08764c92760358defa2bc4" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_CERTIFICATE_ID_MIN</name>
        <initializer>(<ref refid="_crypto_key_key_store___p_s_a_8h_1aad00aefd28ed4e03648992bfbc25b17e" kindref="member">KEYSTORE_PSA_PRE_PROVISIONED_KEY_ID_MIN</ref> | <ref refid="group__key__lifetimes_1gaf74e56b3c4cc9779d4ce28bb962ce946" kindref="member">KEYSTORE_PSA_KEY_ID_CERTIFICATE_BIT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="968" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="968" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a13bd3ebc73ba1f39736b29c5dfe3041f" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_ATTESTATION_PUB_KEY_ID</name>
        <initializer>0x40</initializer>
        <briefdescription>
<para>Reserved pre-provisioned key IDs. </para>        </briefdescription>
        <detaileddescription>
<para>Some known pre-provisioned key used by attestation service have reserved key IDs in the admissible range for pre-provisioned keys </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="977" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1ac86d898831bcac8a80ea22f88056c86e" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_ATTESTATION_PRI_KEY_ID</name>
        <initializer>0X3F</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="978" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="978" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1ab1097b5502ca4dc978f874555ee14f47" prot="public" static="no">
        <name>KEYSTORE_PSA_PRE_PROVISIONED_ATTESTATION_CERTIFICATE_ID</name>
        <initializer>(<ref refid="_crypto_key_key_store___p_s_a_8h_1a13bd3ebc73ba1f39736b29c5dfe3041f" kindref="member">KEYSTORE_PSA_PRE_PROVISIONED_ATTESTATION_PUB_KEY_ID</ref> | <ref refid="group__key__lifetimes_1gaf74e56b3c4cc9779d4ce28bb962ce946" kindref="member">KEYSTORE_PSA_KEY_ID_CERTIFICATE_BIT</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="979" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="979" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a5e969b597ac5700d3ce3ebeff6a0bb09" prot="public" static="no">
        <name>KEYSTORE_PRE_PROVISIONED_KEY_METADATA_SIZE</name>
        <initializer>sizeof(<ref refid="struct_key_store___pre_provisioned_key_meta_data" kindref="compound">KeyStore_PreProvisionedKeyMetaData</ref>)</initializer>
        <briefdescription>
<para>Size of the meta data associated with the pre-provisoned key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1006" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="1006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_crypto_key_key_store___p_s_a_8h_1a0b120f9d13294e90446089429bd417ed" prot="public" static="no">
        <name>KEYSTORE_PSA_PREPROVISIONED_KEY_FORMAT_INIT</name>
        <initializer>{                                                                                                               \
        <ref refid="_crypto_key_key_store___p_s_a_8h_1a06ab45a5fa13a3ab909904ecc6f2d65e" kindref="member">KEYSTORE_PSA_PRE_PROVISIONED_KEY_MAGIC_HEADER</ref>, 0, <ref refid="_crypto_key_key_store___p_s_a_8h_1a12efa00311960d6e9fa72f6b6ff3d01c" kindref="member">KEYSTORE_PSA_PRE_PROVISIONED_KEY_EXPORT_FLAG</ref>, 0, 0, 0, 0, \
            <ref refid="_crypto_key_key_store___p_s_a_8h_1a245471f73a81c1399191098480e76aed" kindref="member">KEYSTORE_PSA_PRE_PROVISIONED_KEYS_END</ref>, 0                                                                \
    }</initializer>
        <briefdescription>
<para>Initialize a <ref refid="struct_key_store__pre_provisioned_key_storage_format" kindref="compound">KeyStore_preProvisionedKeyStorageFormat</ref> struct variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1025" column="9" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="1025" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" prot="public" static="no">
        <type>psa_key_usage_t</type>
        <definition>typedef psa_key_usage_t KeyStore_PSA_KeyUsage</definition>
        <argsstring></argsstring>
        <name>KeyStore_PSA_KeyUsage</name>
        <briefdescription>
<para>Encoding of permitted usage on a key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="124" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_crypto_key_key_store___p_s_a_8h_1a6606ab969b68d63d56d28a8d718fcbb9" prot="public" static="no">
        <type>psa_key_lifetime_t</type>
        <definition>typedef psa_key_lifetime_t KeyStore_PSA_KeyLifetime</definition>
        <argsstring></argsstring>
        <name>KeyStore_PSA_KeyLifetime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encoding of key lifetimes.</para><para>The lifetime of a key indicates where it is stored and what system actions may create and destroy it.</para><para>Keys with the lifetime <ref refid="group__key__lifetimes_1ga67c68b7d1a3dd9775e6436682378c455" kindref="member">KEYSTORE_PSA_KEY_LIFETIME_VOLATILE</ref> are automatically destroyed when the application terminates or on a power reset.</para><para>Keys with a lifetime other than <ref refid="group__key__lifetimes_1ga67c68b7d1a3dd9775e6436682378c455" kindref="member">KEYSTORE_PSA_KEY_LIFETIME_VOLATILE</ref> are said to be <emphasis>persistent</emphasis>. Persistent keys are preserved if the application or the system restarts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="138" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" prot="public" static="no">
        <type>psa_key_type_t</type>
        <definition>typedef psa_key_type_t KeyStore_PSA_KeyType</definition>
        <argsstring></argsstring>
        <name>KeyStore_PSA_KeyType</name>
        <briefdescription>
<para>Encoding of a key type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="356" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" prot="public" static="no">
        <type>psa_algorithm_t</type>
        <definition>typedef psa_algorithm_t KeyStore_PSA_Algorithm</definition>
        <argsstring></argsstring>
        <name>KeyStore_PSA_Algorithm</name>
        <briefdescription>
<para>Encoding of a cryptographic algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>For algorithms that can be applied to multiple key types, this type does not encode the key type. For example, for symmetric ciphers based on a block cipher, <ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref> encodes the block cipher mode and the padding mode while the block cipher itself is encoded via <ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="440" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" prot="public" static="no">
        <type>psa_key_file_id_t</type>
        <definition>typedef psa_key_file_id_t KeyStore_PSA_KeyFileId</definition>
        <argsstring></argsstring>
        <name>KeyStore_PSA_KeyFileId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A Key owner is a PSA partition identifier. This definition follow &apos;psa_key_owner_id_t&apos; from crypto_platform.h </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="762" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="762" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" prot="public" static="no">
        <type>psa_key_attributes_t</type>
        <definition>typedef psa_key_attributes_t KeyStore_PSA_KeyAttributes</definition>
        <argsstring></argsstring>
        <name>KeyStore_PSA_KeyAttributes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of a structure containing key attributes.</para><para>This is an opaque structure that can represent the metadata of a key object. Metadata that can be stored in attributes includes:<itemizedlist>
<listitem><para>The location of the key in storage, indicated by its key identifier and its lifetime.</para></listitem><listitem><para>The key&apos;s policy, comprising usage flags and a specification of the permitted algorithm(s).</para></listitem><listitem><para>Information about the key itself: the key type and its size.</para></listitem></itemizedlist>
</para><para>The actual key material is not considered an attribute of a key. Key attributes do not contain information that is generally considered highly confidential.</para><para>An attribute structure can be a simple data structure where each function <computeroutput>KeyStore_PSA_setKeyXXX</computeroutput> sets a field and the corresponding function <computeroutput>KeyStore_PSA_getKeyXXX</computeroutput> retrieves the value of the corresponding field. However, implementations may report values that are equivalent to the original one, but have a different encoding. For example, an implementation may use a more compact representation for types where many bit-patterns are invalid or not supported, and store all values that it does not support as a special marker value. In such an implementation, after setting an invalid value, the corresponding get function returns an invalid value which may not be the one that was originally stored.</para><para>An attribute structure may contain references to auxiliary resources, for example pointers to allocated memory or indirect references to pre-calculated values. In order to free such resources, the application must call <ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes()</ref>. As an exception, calling <ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes()</ref> on an attribute structure is optional if the structure has only been modified by the following functions since it was initialized or last reset with <ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes()</ref>:<itemizedlist>
<listitem><para><ref refid="_crypto_key_key_store___p_s_a_8h_1aa39deef86055b0c230c8f6f3a1c833ef" kindref="member">KeyStore_PSA_setKeyId()</ref></para></listitem><listitem><para><ref refid="_crypto_key_key_store___p_s_a_8h_1a7b2babf52d14d2711a83b99bb2d02d1b" kindref="member">KeyStore_PSA_setKeyLifetime()</ref></para></listitem><listitem><para><ref refid="_crypto_key_key_store___p_s_a_8h_1a4d6a1462d50186c8a726894a4f7b2dbf" kindref="member">KeyStore_PSA_setKeyType()</ref></para></listitem><listitem><para><ref refid="_crypto_key_key_store___p_s_a_8h_1a5bf5666e2ec6334bc9ff5c098c968c18" kindref="member">KeyStore_PSA_setKeyBits()</ref></para></listitem><listitem><para><ref refid="_crypto_key_key_store___p_s_a_8h_1a9355a2890799fe9255e8ef92c4e52e61" kindref="member">KeyStore_PSA_setKeyUsageFlags()</ref></para></listitem><listitem><para><ref refid="_crypto_key_key_store___p_s_a_8h_1a31ded95ae232e8b6fae4414fd8be8f46" kindref="member">KeyStore_PSA_setKeyAlgorithm()</ref></para></listitem></itemizedlist>
</para><para>Before calling any function on a key attribute structure, the application must initialize it by any of the following means:<itemizedlist>
<listitem><para>Set the structure to all-bits-zero, for example: <programlisting><codeline><highlight class="normal">KeyStore_PSA_KeyAttributes<sp/>attributes;</highlight></codeline>
<codeline><highlight class="normal">memset(&amp;attributes,<sp/>0,<sp/>sizeof(attributes));</highlight></codeline>
</programlisting></para></listitem><listitem><para>Initialize the structure to logical zero values, for example: <programlisting><codeline><highlight class="normal">KeyStore_PSA_KeyAttributes<sp/>attributes<sp/>=<sp/>{0};</highlight></codeline>
</programlisting></para></listitem><listitem><para>Initialize the structure to the initializer <ref refid="group__attributes_1ga383aa20c778dfebe26d78ae2b569f253" kindref="member">KEYSTORE_PSA_KEY_ATTRIBUTES_INIT</ref>, for example:<programlisting><codeline><highlight class="normal">KeyStore_PSA_KeyAttributes<sp/>attributes<sp/>=<sp/>KEYSTORE_PSA_KEY_ATTRIBUTES_INIT;</highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para>A freshly initialized attribute structure contains the following values:</para><para><itemizedlist>
<listitem><para>lifetime: <ref refid="group__key__lifetimes_1ga67c68b7d1a3dd9775e6436682378c455" kindref="member">KEYSTORE_PSA_KEY_LIFETIME_VOLATILE</ref>.</para></listitem><listitem><para>key identifier: <computeroutput>0</computeroutput> (which is not a valid key identifier).</para></listitem><listitem><para>type: <computeroutput>0</computeroutput> (meaning that the type is unspecified).</para></listitem><listitem><para>key size: <computeroutput>0</computeroutput> (meaning that the size is unspecified).</para></listitem><listitem><para>usage flags: <computeroutput>0</computeroutput> (which allows no usage except exporting a public key).</para></listitem><listitem><para>algorithm: <computeroutput>0</computeroutput> (which allows no cryptographic usage, but allows exporting).</para></listitem></itemizedlist>
</para><para>A typical sequence to create a key is as follows:<orderedlist>
<listitem><para>Create and initialize an attribute structure.</para></listitem><listitem><para>If the key is persistent, call <ref refid="_crypto_key_key_store___p_s_a_8h_1aa39deef86055b0c230c8f6f3a1c833ef" kindref="member">KeyStore_PSA_setKeyId()</ref>. Also call <ref refid="_crypto_key_key_store___p_s_a_8h_1a7b2babf52d14d2711a83b99bb2d02d1b" kindref="member">KeyStore_PSA_setKeyLifetime()</ref> to place the key in a non-default location.</para></listitem><listitem><para>Set the key policy with <ref refid="_crypto_key_key_store___p_s_a_8h_1a9355a2890799fe9255e8ef92c4e52e61" kindref="member">KeyStore_PSA_setKeyUsageFlags()</ref> and <ref refid="_crypto_key_key_store___p_s_a_8h_1a31ded95ae232e8b6fae4414fd8be8f46" kindref="member">KeyStore_PSA_setKeyAlgorithm()</ref>.</para></listitem><listitem><para>Set the key type with <ref refid="_crypto_key_key_store___p_s_a_8h_1a4d6a1462d50186c8a726894a4f7b2dbf" kindref="member">KeyStore_PSA_setKeyType()</ref>.</para></listitem><listitem><para>When generating a random key with KeyStore_PSA_generateKey() or deriving a key with KeyStore_PSA_key_derivation_output_key(), set the desired key size with <ref refid="_crypto_key_key_store___p_s_a_8h_1a5bf5666e2ec6334bc9ff5c098c968c18" kindref="member">KeyStore_PSA_setKeyBits()</ref>.</para></listitem><listitem><para>Call a key creation function: <ref refid="_crypto_key_key_store___p_s_a_8h_1aa9425eeaa708cf28b9101c34a152ec36" kindref="member">KeyStore_PSA_importKey()</ref>, KeyStore_PSA_generateKey(), KeyStore_PSA_key_derivation_output_key(). This function reads the attribute structure, creates a key with these attributes, and outputs a handle to the newly created key.</para></listitem><listitem><para>The attribute structure is now no longer necessary. You may call <ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes()</ref>, although this is optional with the workflow presented here because the attributes currently defined in this specification do not require any additional resources beyond the structure itself.</para></listitem></orderedlist>
</para><para>A typical sequence to query a key&apos;s attributes is as follows:<orderedlist>
<listitem><para>Call <ref refid="_crypto_key_key_store___p_s_a_8h_1ae8fe5bcd8dd9c72f4a801660dd6333b5" kindref="member">KeyStore_PSA_getKeyAttributes()</ref>.</para></listitem><listitem><para>Call <computeroutput>KeyStore_PSA_get_key_xxx</computeroutput> functions to retrieve the attribute(s) that you are interested in.</para></listitem><listitem><para>Call <ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes()</ref> to free any resources that may be used by the attribute structure.</para></listitem></orderedlist>
</para><para>Once a key has been created, it is impossible to change its attributes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="866" column="1" bodyfile="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" bodystart="866" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1aa39deef86055b0c230c8f6f3a1c833ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KeyStore_PSA_setKeyId</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes, KeyStore_PSA_KeyFileId key)</argsstring>
        <name>KeyStore_PSA_setKeyId</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Declare a key as persistent and set its key identifier. </para>        </briefdescription>
        <detaileddescription>
<para>If the attribute structure currently declares the key as volatile (which is the default content of an attribute structure), this function sets the lifetime attribute to <ref refid="group__key__lifetimes_1ga0f9d5620a69b0815445736338f370355" kindref="member">KEYSTORE_PSA_KEY_LIFETIME_PERSISTENT</ref>.</para><para>This function does not access storage, it merely stores the given value in the structure. The persistent key will be written to storage when the attribute structure is passed to a key creation function such as KeyStore_PSA_import_key(), KeyStore_PSA_generate_key(), KeyStore_PSA_key_derivation_output_key() or KeyStore_PSA_copy_key().</para><para>This function may be declared as <computeroutput>static</computeroutput> (i.e. without external linkage). This function may be provided as a function-like macro, but in this case it must evaluate each of its arguments exactly once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute structure to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The persistent identifier for the key. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1074" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1a7b2babf52d14d2711a83b99bb2d02d1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KeyStore_PSA_setKeyLifetime</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes, KeyStore_PSA_KeyLifetime lifetime)</argsstring>
        <name>KeyStore_PSA_setKeyLifetime</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a6606ab969b68d63d56d28a8d718fcbb9" kindref="member">KeyStore_PSA_KeyLifetime</ref></type>
          <declname>lifetime</declname>
        </param>
        <briefdescription>
<para>Set the location of a persistent key. </para>        </briefdescription>
        <detaileddescription>
<para>To make a key persistent, you must give it a persistent key identifier with <ref refid="_crypto_key_key_store___p_s_a_8h_1aa39deef86055b0c230c8f6f3a1c833ef" kindref="member">KeyStore_PSA_setKeyId()</ref>. By default, a key that has a persistent identifier is stored in the default storage area identifier by <ref refid="group__key__lifetimes_1ga0f9d5620a69b0815445736338f370355" kindref="member">KEYSTORE_PSA_KEY_LIFETIME_PERSISTENT</ref>. Call this function to choose a storage area, or to explicitly declare the key as volatile.</para><para>This function does not access storage, it merely stores the given value in the structure. The persistent key will be written to storage when the attribute structure is passed to a key creation function such as KeyStore_PSA_import_key(), KeyStore_PSA_generate_key(), KeyStore_PSA_key_derivation_output_key() or KeyStore_PSA_copy_key().</para><para>This function may be declared as <computeroutput>static</computeroutput> (i.e. without external linkage). This function may be provided as a function-like macro, but in this case it must evaluate each of its arguments exactly once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute structure to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lifetime</parametername>
</parameternamelist>
<parameterdescription>
<para>The lifetime for the key. If this is <ref refid="group__key__lifetimes_1ga67c68b7d1a3dd9775e6436682378c455" kindref="member">KEYSTORE_PSA_KEY_LIFETIME_VOLATILE</ref>, the key will be volatile, and the key identifier attribute is reset to 0. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1ad3bc2b0c06134db54dc023f4407a3c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref></type>
        <definition>KeyStore_PSA_KeyFileId KeyStore_PSA_getKeyId</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes)</argsstring>
        <name>KeyStore_PSA_getKeyId</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
<para>Retrieve the key identifier from key attributes. </para>        </briefdescription>
        <detaileddescription>
<para>This function may be declared as <computeroutput>static</computeroutput> (i.e. without external linkage). This function may be provided as a function-like macro, but in this case it must evaluate its argument exactly once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The key attribute structure to query.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The persistent identifier stored in the attribute structure. This value is unspecified if the attribute structure declares the key as volatile. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1a20a8474a6b0c24e1a4d2aa095204e946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a6606ab969b68d63d56d28a8d718fcbb9" kindref="member">KeyStore_PSA_KeyLifetime</ref></type>
        <definition>KeyStore_PSA_KeyLifetime KeyStore_PSA_getKeyLifetime</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes)</argsstring>
        <name>KeyStore_PSA_getKeyLifetime</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
<para>Retrieve the lifetime from key attributes. </para>        </briefdescription>
        <detaileddescription>
<para>This function may be declared as <computeroutput>static</computeroutput> (i.e. without external linkage). This function may be provided as a function-like macro, but in this case it must evaluate its argument exactly once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The key attribute structure to query.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The lifetime value stored in the attribute structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1a9355a2890799fe9255e8ef92c4e52e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KeyStore_PSA_setKeyUsageFlags</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes, KeyStore_PSA_KeyUsage usage_flags)</argsstring>
        <name>KeyStore_PSA_setKeyUsageFlags</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref></type>
          <declname>usage_flags</declname>
        </param>
        <briefdescription>
<para>Declare usage flags for a key. </para>        </briefdescription>
        <detaileddescription>
<para>Usage flags are part of a key&apos;s usage policy. They encode what kind of operations are permitted on the key. For more details, refer to the documentation of the type <ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref>.</para><para>This function overwrites any usage flags previously set in <computeroutput>attributes</computeroutput>.</para><para>This function may be declared as <computeroutput>static</computeroutput> (i.e. without external linkage). This function may be provided as a function-like macro, but in this case it must evaluate each of its arguments exactly once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute structure to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usage_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The usage flags to write. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1af15020c653aecdfb33990c6cc30185ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref></type>
        <definition>KeyStore_PSA_KeyUsage KeyStore_PSA_getKeyUsageFlags</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes)</argsstring>
        <name>KeyStore_PSA_getKeyUsageFlags</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
<para>Retrieve the usage flags from key attributes. </para>        </briefdescription>
        <detaileddescription>
<para>This function may be declared as <computeroutput>static</computeroutput> (i.e. without external linkage). This function may be provided as a function-like macro, but in this case it must evaluate its argument exactly once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The key attribute structure to query.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The usage flags stored in the attribute structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1a31ded95ae232e8b6fae4414fd8be8f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KeyStore_PSA_setKeyAlgorithm</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes, KeyStore_PSA_Algorithm alg)</argsstring>
        <name>KeyStore_PSA_setKeyAlgorithm</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref></type>
          <declname>alg</declname>
        </param>
        <briefdescription>
<para>Declare the permitted algorithm policy for a key. </para>        </briefdescription>
        <detaileddescription>
<para>The permitted algorithm policy of a key encodes which algorithm or algorithms are permitted to be used with this key. The following algorithm policies are supported:<itemizedlist>
<listitem><para>0 does not allow any cryptographic operation with the key. The key may be used for non-cryptographic actions such as exporting (if permitted by the usage flags).</para></listitem><listitem><para>An algorithm value permits this particular algorithm.</para></listitem></itemizedlist>
</para><para>This function overwrites any algorithm policy previously set in <computeroutput>attributes</computeroutput>.</para><para>This function may be declared as <computeroutput>static</computeroutput> (i.e. without external linkage). This function may be provided as a function-like macro, but in this case it must evaluate each of its arguments exactly once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute structure to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The permitted algorithm policy to write. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1a7bd37a6f0aa7c856f2eb18b2cd7f6431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref></type>
        <definition>KeyStore_PSA_Algorithm KeyStore_PSA_getKeyAlgorithm</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes)</argsstring>
        <name>KeyStore_PSA_getKeyAlgorithm</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
<para>Retrieve the algorithm policy from key attributes. </para>        </briefdescription>
        <detaileddescription>
<para>This function may be declared as <computeroutput>static</computeroutput> (i.e. without external linkage). This function may be provided as a function-like macro, but in this case it must evaluate its argument exactly once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The key attribute structure to query.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The algorithm stored in the attribute structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1a4d6a1462d50186c8a726894a4f7b2dbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KeyStore_PSA_setKeyType</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes, KeyStore_PSA_KeyType type)</argsstring>
        <name>KeyStore_PSA_setKeyType</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Declare the type of a key. </para>        </briefdescription>
        <detaileddescription>
<para>This function overwrites any key type previously set in <computeroutput>attributes</computeroutput>.</para><para>This function may be declared as <computeroutput>static</computeroutput> (i.e. without external linkage). This function may be provided as a function-like macro, but in this case it must evaluate each of its arguments exactly once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute structure to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The key type to write. If this is 0, the key type in <computeroutput>attributes</computeroutput> becomes unspecified. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1a5bf5666e2ec6334bc9ff5c098c968c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KeyStore_PSA_setKeyBits</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes, size_t bits)</argsstring>
        <name>KeyStore_PSA_setKeyBits</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Declare the size of a key. </para>        </briefdescription>
        <detaileddescription>
<para>This function overwrites any key size previously set in <computeroutput>attributes</computeroutput>.</para><para>This function may be declared as <computeroutput>static</computeroutput> (i.e. without external linkage). This function may be provided as a function-like macro, but in this case it must evaluate each of its arguments exactly once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute structure to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>The key size in bits. If this is 0, the key size in <computeroutput>attributes</computeroutput> becomes unspecified. Keys of size 0 are not supported. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1ab76e66f5212c2aeea3576a6d670cf933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref></type>
        <definition>KeyStore_PSA_KeyType KeyStore_PSA_getKeyType</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes)</argsstring>
        <name>KeyStore_PSA_getKeyType</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
<para>Retrieve the key type from key attributes. </para>        </briefdescription>
        <detaileddescription>
<para>This function may be declared as <computeroutput>static</computeroutput> (i.e. without external linkage). This function may be provided as a function-like macro, but in this case it must evaluate its argument exactly once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The key attribute structure to query.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The key type stored in the attribute structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1a2f514bb3bbd55b337e21d68fe6246c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t KeyStore_PSA_getKeyBits</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes)</argsstring>
        <name>KeyStore_PSA_getKeyBits</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
<para>Retrieve the key size from key attributes. </para>        </briefdescription>
        <detaileddescription>
<para>This function may be declared as <computeroutput>static</computeroutput> (i.e. without external linkage). This function may be provided as a function-like macro, but in this case it must evaluate its argument exactly once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The key attribute structure to query.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The key size stored in the attribute structure, in bits. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KeyStore_PSA_resetKeyAttributes</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes)</argsstring>
        <name>KeyStore_PSA_resetKeyAttributes</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
<para>Reset a key attribute structure to a freshly initialized state. </para>        </briefdescription>
        <detaileddescription>
<para>You must initialize the attribute structure as described in the documentation of the type <ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> before calling this function. Once the structure has been initialized, you may call this function at any time.</para><para>This function frees any auxiliary resources that the structure may contain.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute structure to reset. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1a27ac03844a5cb0899f68e3cf1bc266de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_exportCertificate</definition>
        <argsstring>(KeyStore_PSA_KeyFileId key, uint8_t *data, size_t dataSize, size_t *dataLength)</argsstring>
        <name>KeyStore_PSA_exportCertificate</name>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dataSize</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>dataLength</declname>
        </param>
        <briefdescription>
<para>Export a certificate in binary format. </para>        </briefdescription>
        <detaileddescription>
<para>The output of this function can be passed to <ref refid="_crypto_key_key_store___p_s_a_8h_1a59a557ed9bd4f24c710db17d53a6a319" kindref="member">KeyStore_PSA_importCertificate()</ref> to create an equivalent object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key file ID of the key associated with the certificate to export. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the certificate data is to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dataSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>data</computeroutput> buffer in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dataLength</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes that make up the certificate data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" kindref="member">KEYSTORE_PSA_STATUS_INVALID_KEY_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key identifier does not exist. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1aaf6c1ae5694a2fe490e2bda815a42a87" kindref="member">KEYSTORE_PSA_STATUS_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a9f0693894499148fbfba1e3769b1efa3" kindref="member">KEYSTORE_PSA_STATUS_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>data</computeroutput> buffer is too small. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a2879b4e5c574ef3c72866f10a2f57f3d" kindref="member">KEYSTORE_PSA_STATUS_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a5105691651cb9d272e30d3edbf7dbbaa" kindref="member">KEYSTORE_PSA_STATUS_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" kindref="member">KEYSTORE_PSA_STATUS_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1a918428f2b07212d0412afc9c5298df4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_exportPublicKey</definition>
        <argsstring>(KeyStore_PSA_KeyFileId key, uint8_t *data, size_t dataSize, size_t *dataLength)</argsstring>
        <name>KeyStore_PSA_exportPublicKey</name>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dataSize</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>dataLength</declname>
        </param>
        <briefdescription>
<para>Export a public key or the public part of a key pair in binary format. </para>        </briefdescription>
        <detaileddescription>
<para>The output of this function can be passed to <ref refid="_crypto_key_key_store___p_s_a_8h_1aa9425eeaa708cf28b9101c34a152ec36" kindref="member">KeyStore_PSA_importKey()</ref> to create an object that is equivalent to the public key.</para><para>This specification supports a single format for each key type. Implementations may support other formats as long as the standard format is supported. Implementations that support other formats should ensure that the formats are clearly unambiguous so as to minimize the risk that an invalid input is accidentally interpreted according to a different format.</para><para><itemizedlist>
<listitem><para>For elliptic curve public keys, the format for:<itemizedlist>
<listitem><para>Montgomery curves (curve types <computeroutput>PSA_ECC_CURVE_CURVEXXX</computeroutput>), is<itemizedlist>
<listitem><para><computeroutput>x_P</computeroutput> as a <computeroutput>ceiling(m/8)</computeroutput>-byte string, little-endian;</para></listitem></itemizedlist>
</para></listitem><listitem><para>Weierstrass curves (curve types <computeroutput>PSA_ECC_CURVE_SECTXXX</computeroutput>, <computeroutput>PSA_ECC_CURVE_SECPXXX</computeroutput> and <computeroutput>PSA_ECC_CURVE_BRAINPOOL_PXXX</computeroutput>), is the uncompressed representation defined by SEC1 <sect/>2.3.3 as the content of an ECPoint. Let <computeroutput>m</computeroutput> be the bit size associated with the curve, i.e. the bit size of <computeroutput>q</computeroutput> for a curve over <computeroutput>F_q</computeroutput>. The representation consists of:<itemizedlist>
<listitem><para>The byte 0x04;</para></listitem><listitem><para><computeroutput>x_P</computeroutput> as a <computeroutput>ceiling(m/8)</computeroutput>-byte string, big-endian;</para></listitem><listitem><para><computeroutput>y_P</computeroutput> as a <computeroutput>ceiling(m/8)</computeroutput>-byte string, big-endian.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem><listitem><para>For Diffie-Hellman key exchange public keys, the format is the representation of the public key <computeroutput>y = g^x mod p</computeroutput> as a big-endian byte string. The length of the byte string is the length of the base prime <computeroutput>p</computeroutput> in bytes.</para></listitem></itemizedlist>
</para><para>Exporting a public key object or the public part of a key pair is always permitted, regardless of the key&apos;s usage flags.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key file ID of the key to export. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the key data is to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dataSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>data</computeroutput> buffer in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dataLength</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes that make up the key data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" kindref="member">KEYSTORE_PSA_STATUS_INVALID_KEY_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a51c63940bcb6c2f8ded25f308da32653" kindref="member">KEYSTORE_PSA_STATUS_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key is neither a public key nor a key pair. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1aaf6c1ae5694a2fe490e2bda815a42a87" kindref="member">KEYSTORE_PSA_STATUS_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a9f0693894499148fbfba1e3769b1efa3" kindref="member">KEYSTORE_PSA_STATUS_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>data</computeroutput> buffer is too small. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a50f49fd2693d0b28895fd411f1b5b2bb" kindref="member">KEYSTORE_PSA_STATUS_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a822e35765c5724075f67509d4d4001b9" kindref="member">KEYSTORE_PSA_STATUS_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a784be5480b9ca7255f8956a17d18d852" kindref="member">KEYSTORE_PSA_STATUS_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a2879b4e5c574ef3c72866f10a2f57f3d" kindref="member">KEYSTORE_PSA_STATUS_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a5105691651cb9d272e30d3edbf7dbbaa" kindref="member">KEYSTORE_PSA_STATUS_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" kindref="member">KEYSTORE_PSA_STATUS_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1acaf3de92ced3940ebaca0e179ac38768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_exportKey</definition>
        <argsstring>(KeyStore_PSA_KeyFileId key, uint8_t *data, size_t dataSize, size_t *dataLength)</argsstring>
        <name>KeyStore_PSA_exportKey</name>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dataSize</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>dataLength</declname>
        </param>
        <briefdescription>
<para>Export a key in binary format. </para>        </briefdescription>
        <detaileddescription>
<para>The key must designated as exportable. The output of this function can be passed to <ref refid="_crypto_key_key_store___p_s_a_8h_1aa9425eeaa708cf28b9101c34a152ec36" kindref="member">KeyStore_PSA_importKey()</ref> to create an equivalent object.</para><para>If the implementation of <ref refid="_crypto_key_key_store___p_s_a_8h_1aa9425eeaa708cf28b9101c34a152ec36" kindref="member">KeyStore_PSA_importKey()</ref> supports other formats beyond the format specified here, the output from <ref refid="_crypto_key_key_store___p_s_a_8h_1acaf3de92ced3940ebaca0e179ac38768" kindref="member">KeyStore_PSA_exportKey()</ref> must use the representation specified here, not the original representation.</para><para>For standard key types, the output format is as follows:</para><para><itemizedlist>
<listitem><para>For symmetric keys (including MAC keys), the format is the raw bytes of the key.</para></listitem><listitem><para>For elliptic curve key pairs, the format is a representation of the private value as a <computeroutput>ceiling(m/8)</computeroutput>-byte string where <computeroutput>m</computeroutput> is the bit size associated with the curve, i.e. the bit size of the order of the curve&apos;s coordinate field. This byte string is in little-endian order for Montgomery curves (curve types <computeroutput>PSA_ECC_CURVE_CURVEXXX</computeroutput>), and in big-endian order for Weierstrass curves (curve types <computeroutput>PSA_ECC_CURVE_SECTXXX</computeroutput>, <computeroutput>PSA_ECC_CURVE_SECPXXX</computeroutput> and <computeroutput>PSA_ECC_CURVE_BRAINPOOL_PXXX</computeroutput>). This is the content of the <computeroutput>privateKey</computeroutput> field of the <computeroutput>ECPrivateKey</computeroutput> format defined by RFC 5915.</para></listitem><listitem><para>For Diffie-Hellman key exchange key pairs, the format is the representation of the private key <computeroutput>x</computeroutput> as a big-endian byte string. The length of the byte string is the private key size in bytes (leading zeroes are not stripped).</para></listitem><listitem><para>For public keys, the format is the same as for <ref refid="_crypto_key_key_store___p_s_a_8h_1a918428f2b07212d0412afc9c5298df4c" kindref="member">KeyStore_PSA_exportPublicKey()</ref>.</para></listitem></itemizedlist>
</para><para>The policy on the key must have the usage flag <ref refid="group__key__policies_1ga434328ced4e7eb4ee65d547bc05118b5" kindref="member">KEYSTORE_PSA_KEY_USAGE_EXPORT</ref> set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key file ID of the key to export. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer where the key data is to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dataSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>data</computeroutput> buffer in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dataLength</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the number of bytes that make up the key data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" kindref="member">KEYSTORE_PSA_STATUS_INVALID_KEY_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key identifier does not exist. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a4a8ec2db48e0c5f8ac76b2ee910685b3" kindref="member">KEYSTORE_PSA_STATUS_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key does not have the <ref refid="group__key__policies_1ga434328ced4e7eb4ee65d547bc05118b5" kindref="member">KEYSTORE_PSA_KEY_USAGE_EXPORT</ref> flag. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1aaf6c1ae5694a2fe490e2bda815a42a87" kindref="member">KEYSTORE_PSA_STATUS_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a9f0693894499148fbfba1e3769b1efa3" kindref="member">KEYSTORE_PSA_STATUS_BUFFER_TOO_SMALL</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <computeroutput>data</computeroutput> buffer is too small. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a2879b4e5c574ef3c72866f10a2f57f3d" kindref="member">KEYSTORE_PSA_STATUS_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a5105691651cb9d272e30d3edbf7dbbaa" kindref="member">KEYSTORE_PSA_STATUS_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" kindref="member">KEYSTORE_PSA_STATUS_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1a59a557ed9bd4f24c710db17d53a6a319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_importCertificate</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes, KeyStore_PSA_KeyFileId *key, uint8_t *data, size_t dataLength)</argsstring>
        <name>KeyStore_PSA_importCertificate</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dataLength</declname>
        </param>
        <briefdescription>
<para>Import a certificate in binary format. </para>        </briefdescription>
        <detaileddescription>
<para>This function supports the output from <ref refid="_crypto_key_key_store___p_s_a_8h_1a27ac03844a5cb0899f68e3cf1bc266de" kindref="member">KeyStore_PSA_exportCertificate()</ref>.</para><para>Multiple certificates cannot be imported for the same key ID. If an additional certificate needs to be associated with a particular key pair or public key, that key data must be imported again with a different key ID. Additionally, the key store does not interpret the contents of the certificate and cannot verify that the key embedded within the certificate matches the associated key.</para><para>Implementations must reject an attempt to import a certificate of size 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attributes for the new certificate. The certificate size is always determined from the <computeroutput>data</computeroutput> buffer. If the certificate size in <computeroutput>attributes</computeroutput> is nonzero, it must be equal to the size from <computeroutput>data</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">key</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the key file ID of the previously imported key associated with the certificate. <computeroutput>0</computeroutput> on failure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the certificate data in binary format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dataLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>data</computeroutput> buffer in bytes.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. If the certificate is persistent, the certificate material and the certificate&apos;s metadata have been saved to persistent storage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1ab2a8c963faf4969ef26718691dd44ec5" kindref="member">KEYSTORE_PSA_STATUS_ALREADY_EXISTS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is an attempt to create a certificate, and there is already a certificate with the given identifier. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1aaf6c1ae5694a2fe490e2bda815a42a87" kindref="member">KEYSTORE_PSA_STATUS_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The certificate type or certificate size is not supported, either by the implementation in general or in this particular persistent location. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a51c63940bcb6c2f8ded25f308da32653" kindref="member">KEYSTORE_PSA_STATUS_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The certificate attributes, as a whole, are invalid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a51c63940bcb6c2f8ded25f308da32653" kindref="member">KEYSTORE_PSA_STATUS_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The certificate data is not correctly formatted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a51c63940bcb6c2f8ded25f308da32653" kindref="member">KEYSTORE_PSA_STATUS_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size in <computeroutput>attributes</computeroutput> is nonzero and does not match the size of the certificate data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a5105691651cb9d272e30d3edbf7dbbaa" kindref="member">KEYSTORE_PSA_STATUS_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a64f88ebad3ed76cbd696f5b6da79f9cc" kindref="member">KEYSTORE_PSA_STATUS_INSUFFICIENT_STORAGE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a50f49fd2693d0b28895fd411f1b5b2bb" kindref="member">KEYSTORE_PSA_STATUS_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a2879b4e5c574ef3c72866f10a2f57f3d" kindref="member">KEYSTORE_PSA_STATUS_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a822e35765c5724075f67509d4d4001b9" kindref="member">KEYSTORE_PSA_STATUS_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a784be5480b9ca7255f8956a17d18d852" kindref="member">KEYSTORE_PSA_STATUS_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" kindref="member">KEYSTORE_PSA_STATUS_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1aa9425eeaa708cf28b9101c34a152ec36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_importKey</definition>
        <argsstring>(KeyStore_PSA_KeyAttributes *attributes, uint8_t *data, size_t dataLength, KeyStore_PSA_KeyFileId *key)</argsstring>
        <name>KeyStore_PSA_importKey</name>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dataLength</declname>
        </param>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Import a key in binary format. </para>        </briefdescription>
        <detaileddescription>
<para>This function supports any output from <ref refid="_crypto_key_key_store___p_s_a_8h_1acaf3de92ced3940ebaca0e179ac38768" kindref="member">KeyStore_PSA_exportKey()</ref>. Refer to the documentation of <ref refid="_crypto_key_key_store___p_s_a_8h_1a918428f2b07212d0412afc9c5298df4c" kindref="member">KeyStore_PSA_exportPublicKey()</ref> for the format of public keys and to the documentation of <ref refid="_crypto_key_key_store___p_s_a_8h_1acaf3de92ced3940ebaca0e179ac38768" kindref="member">KeyStore_PSA_exportKey()</ref> for the format for other key types.</para><para>The dataLength determines the key size. The attributes may optionally specify a key size; in this case it must match the dataLength. A key size of 0 in <computeroutput>attributes</computeroutput> indicates that the key size is solely determined by the key data.</para><para>Implementations must reject an attempt to import a key of size 0.</para><para>This specification supports a single format for each key type. Implementations may support other formats as long as the standard format is supported. Implementations that support other formats should ensure that the formats are clearly unambiguous so as to minimize the risk that an invalid input is accidentally interpreted according to a different format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attributes for the new key. The key size is always determined from the <computeroutput>data</computeroutput> buffer. If the key size in <computeroutput>attributes</computeroutput> is nonzero, it must be equal to the size from <computeroutput>data</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing the key data. The content of this buffer is interpreted according to the type declared in <computeroutput>attributes</computeroutput>. All implementations must support at least the format described in the documentation of <ref refid="_crypto_key_key_store___p_s_a_8h_1acaf3de92ced3940ebaca0e179ac38768" kindref="member">KeyStore_PSA_exportKey()</ref> or <ref refid="_crypto_key_key_store___p_s_a_8h_1a918428f2b07212d0412afc9c5298df4c" kindref="member">KeyStore_PSA_exportPublicKey()</ref> for the chosen type. Implementations may allow other formats, but should be conservative: implementations should err on the side of rejecting content if it may be erroneous (e.g. wrong type or truncated data). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dataLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>data</computeroutput> buffer in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">key</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the key file ID of the newly created key. <computeroutput>0</computeroutput> on failure.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Success. If the key is persistent, the key material and the key&apos;s metadata have been saved to persistent storage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1ab2a8c963faf4969ef26718691dd44ec5" kindref="member">KEYSTORE_PSA_STATUS_ALREADY_EXISTS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This is an attempt to create a key, and there is already a key with the given key file identifier. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1aaf6c1ae5694a2fe490e2bda815a42a87" kindref="member">KEYSTORE_PSA_STATUS_NOT_SUPPORTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key type or key size is not supported, either by the implementation in general or in this particular persistent location. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a51c63940bcb6c2f8ded25f308da32653" kindref="member">KEYSTORE_PSA_STATUS_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key attributes, as a whole, are invalid. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a51c63940bcb6c2f8ded25f308da32653" kindref="member">KEYSTORE_PSA_STATUS_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key data is not correctly formatted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a51c63940bcb6c2f8ded25f308da32653" kindref="member">KEYSTORE_PSA_STATUS_INVALID_ARGUMENT</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The size in <computeroutput>attributes</computeroutput> is nonzero and does not match the size of the key data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a5105691651cb9d272e30d3edbf7dbbaa" kindref="member">KEYSTORE_PSA_STATUS_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a64f88ebad3ed76cbd696f5b6da79f9cc" kindref="member">KEYSTORE_PSA_STATUS_INSUFFICIENT_STORAGE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a50f49fd2693d0b28895fd411f1b5b2bb" kindref="member">KEYSTORE_PSA_STATUS_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a2879b4e5c574ef3c72866f10a2f57f3d" kindref="member">KEYSTORE_PSA_STATUS_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a822e35765c5724075f67509d4d4001b9" kindref="member">KEYSTORE_PSA_STATUS_HARDWARE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a784be5480b9ca7255f8956a17d18d852" kindref="member">KEYSTORE_PSA_STATUS_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" kindref="member">KEYSTORE_PSA_STATUS_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1ae8fe5bcd8dd9c72f4a801660dd6333b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_getKeyAttributes</definition>
        <argsstring>(KeyStore_PSA_KeyFileId key, KeyStore_PSA_KeyAttributes *attributes)</argsstring>
        <name>KeyStore_PSA_getKeyAttributes</name>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref> *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
<para>Retrieve the attributes of a key. </para>        </briefdescription>
        <detaileddescription>
<para>This function first resets the attribute structure as with <ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes()</ref>. It then copies the attributes of the given key into the given attribute structure.</para><para><simplesect kind="note"><para>This function may allocate memory or other resources. Once you have called this function on an attribute structure, you must call <ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes()</ref> to free these resources.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the key to query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, the attributes of the key. On failure, equivalent to a freshly-initialized structure.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1aac85cef511781f98b0071828def22430" kindref="member">KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" kindref="member">KEYSTORE_PSA_STATUS_INVALID_KEY_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a5105691651cb9d272e30d3edbf7dbbaa" kindref="member">KEYSTORE_PSA_STATUS_INSUFFICIENT_MEMORY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a50f49fd2693d0b28895fd411f1b5b2bb" kindref="member">KEYSTORE_PSA_STATUS_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a784be5480b9ca7255f8956a17d18d852" kindref="member">KEYSTORE_PSA_STATUS_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a2879b4e5c574ef3c72866f10a2f57f3d" kindref="member">KEYSTORE_PSA_STATUS_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" kindref="member">KEYSTORE_PSA_STATUS_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by KeyStore_PSA_crypto_init(). It is implementation-dependent whether a failure to initialize results in this error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1580" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1ae30b5ec1aabc664aa97b01c9b6c6a459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_purgeKey</definition>
        <argsstring>(KeyStore_PSA_KeyFileId key)</argsstring>
        <name>KeyStore_PSA_purgeKey</name>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Remove non-essential copies of key material from memory. </para>        </briefdescription>
        <detaileddescription>
<para>An implementation is permitted to make additional copies of key material for keys that have been created with the cache policy, an implementation is permitted to make additional copies of the key material that are not in storage and not for the purpose of ongoing operations. This function will remove these extra copies of the key material from memory.</para><para>This function is not required to remove key material from memory in any of the following situations:<itemizedlist>
<listitem><para>The key is currently in use in a cryptographic operation.</para></listitem><listitem><para>The key is volatile</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key handle to close. . If this is <computeroutput>0</computeroutput>, do nothing and return <computeroutput>KEYSTORE_PSA_STATUS_SUCCESS</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>Handle</computeroutput> was valid and the key material that it referred to has been closed. Alternatively, <computeroutput>Handle</computeroutput> is <computeroutput>0</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" kindref="member">KEYSTORE_PSA_STATUS_INVALID_KEY_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>handle</computeroutput> is not a valid handle nor <computeroutput>0</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a50f49fd2693d0b28895fd411f1b5b2bb" kindref="member">KEYSTORE_PSA_STATUS_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There was an failure in communication with the cryptoprocessor. The key material may still be present in the cryptoprocessor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a2879b4e5c574ef3c72866f10a2f57f3d" kindref="member">KEYSTORE_PSA_STATUS_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The storage is corrupted. Implementations shall make a best effort to erase key material even in this stage, however applications should be aware that it may be impossible to guarantee that the key material is not recoverable in such cases. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a784be5480b9ca7255f8956a17d18d852" kindref="member">KEYSTORE_PSA_STATUS_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>An unexpected condition which is not a storage corruption or a communication failure occurred. The cryptoprocessor may have been compromised. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" kindref="member">KEYSTORE_PSA_STATUS_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1624" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1abe79a1483bbf619c54f4d4ded92bea03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_destroyCertificate</definition>
        <argsstring>(KeyStore_PSA_KeyFileId key)</argsstring>
        <name>KeyStore_PSA_destroyCertificate</name>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Destroy a certificate associated with a key. </para>        </briefdescription>
        <detaileddescription>
<para>This function destroys a certificate from both volatile memory and, if applicable, non-volatile storage.</para><para>This function also erases any metadata such as policies and frees resources associated with the certificate.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key file ID of the key associated with certificate to erase. If key ID portion is <computeroutput>0</computeroutput>, do nothing and return <computeroutput>KEYSTORE_PSA_STATUS_SUCCESS</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>ID</computeroutput> was a valid ID and the certificate material that it referred to has been erased. Alternatively, <computeroutput>ID</computeroutput> is <computeroutput>0</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a4a8ec2db48e0c5f8ac76b2ee910685b3" kindref="member">KEYSTORE_PSA_STATUS_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The certificate cannot be erased because it is read-only, either due to a policy or due to physical restrictions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" kindref="member">KEYSTORE_PSA_STATUS_INVALID_KEY_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>ID</computeroutput> is not a validI D. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a50f49fd2693d0b28895fd411f1b5b2bb" kindref="member">KEYSTORE_PSA_STATUS_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There was an failure in communication with the cryptoprocessor. The certificate material may still be present in the cryptoprocessor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a2879b4e5c574ef3c72866f10a2f57f3d" kindref="member">KEYSTORE_PSA_STATUS_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The storage is corrupted. Implementations shall make a best effort to erase certificate material even in this stage, however applications should be aware that it may be impossible to guarantee that the certificate material is not recoverable in such cases. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a784be5480b9ca7255f8956a17d18d852" kindref="member">KEYSTORE_PSA_STATUS_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>An unexpected condition which is not a storage corruption or a communication failure occurred. The cryptoprocessor may have been compromised. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" kindref="member">KEYSTORE_PSA_STATUS_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1664" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_crypto_key_key_store___p_s_a_8h_1ab31d2f98590286a0035caf322d230e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t KeyStore_PSA_destroyKey</definition>
        <argsstring>(KeyStore_PSA_KeyFileId key)</argsstring>
        <name>KeyStore_PSA_destroyKey</name>
        <param>
          <type><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Destroy a key. </para>        </briefdescription>
        <detaileddescription>
<para>This function destroys a key from both volatile memory and, if applicable, non-volatile storage. Implementations shall make a best effort to ensure that that the key material cannot be recovered.</para><para>If the key has an associated certificate, <ref refid="_crypto_key_key_store___p_s_a_8h_1abe79a1483bbf619c54f4d4ded92bea03" kindref="member">KeyStore_PSA_destroyCertificate()</ref> must be called to destroy the certificate before destroying the key.</para><para>This function also erases any metadata such as policies and frees resources associated with the key.</para><para>Destroying the key makes the ID invalid, and the key ID must not be used again by the application.</para><para>If a key is currently in use in a multipart operation, then destroying the key will cause the multipart operation to fail.</para><para>After a volatile key is destroyed, it is recommended that the implementation does not immediately reuse the same key ID value for a different key. This reduces the risk of an attack that is able to exploit a key identifier reuse vulnerability within an application.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key file ID of the key to erase. If key ID portion is <computeroutput>0</computeroutput>, do nothing and return <computeroutput>KEYSTORE_PSA_STATUS_SUCCESS</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" kindref="member">KEYSTORE_PSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>ID</computeroutput> was a valid ID and the key material that it referred to has been erased. Alternatively, <computeroutput>ID</computeroutput> is <computeroutput>0</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a4a8ec2db48e0c5f8ac76b2ee910685b3" kindref="member">KEYSTORE_PSA_STATUS_NOT_PERMITTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The key cannot be erased because it has an associated certificate or is read-only, either due to a policy or due to physical restrictions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" kindref="member">KEYSTORE_PSA_STATUS_INVALID_KEY_ID</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>ID</computeroutput> is not a valid ID. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a50f49fd2693d0b28895fd411f1b5b2bb" kindref="member">KEYSTORE_PSA_STATUS_COMMUNICATION_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There was an failure in communication with the cryptoprocessor. The key material may still be present in the cryptoprocessor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a2879b4e5c574ef3c72866f10a2f57f3d" kindref="member">KEYSTORE_PSA_STATUS_STORAGE_FAILURE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The storage is corrupted. Implementations shall make a best effort to erase key material even in this stage, however applications should be aware that it may be impossible to guarantee that the key material is not recoverable in such cases. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a784be5480b9ca7255f8956a17d18d852" kindref="member">KEYSTORE_PSA_STATUS_CORRUPTION_DETECTED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>An unexpected condition which is not a storage corruption or a communication failure occurred. The cryptoprocessor may have been compromised. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" kindref="member">KEYSTORE_PSA_STATUS_BAD_STATE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The library has not been previously initialized by <ref refid="_crypto_key_key_store___p_s_a__helpers_8h_1ab3d366892b06309b604394f2b6d1a0b3" kindref="member">KeyStore_PSA_init()</ref>. It is implementation-dependent whether a failure to initialize results in this error code. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h" line="1721" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CryptoKeyKeyStore_PSA driver header. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para><simplesect kind="warning"><para>This is a beta API. It may change in future releases.</para></simplesect>
<heading level="1">Overview</heading>
</para><para>This file contains the APIs to import, export, copy, and destroy key store CryptoKeys. Key store CryptoKeys reference keying material stored in flash or RAM using a key identifier. These CryptoKeys are subject to enforced usage restrictions as defined by the key attributes assigned during key import. This file provides definitions that are common between the Non-Secure Processing Environment (NSPE) and Secure Processing Environment (SPE).</para><para><heading level="1">Usage</heading>
</para><para>After calling the key store initialization function, a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> must be imported into the key store before it can be used for a crypto operation APIs which takes a <ref refid="struct_crypto_key" kindref="compound">CryptoKey</ref> as an input.</para><para><anchor id="_crypto_key_key_store___p_s_a_8h_1ti_drivers_cryptoutils_cryptokey_CryptoKeyKeyStore_PSA_Example"/> <heading level="2">Importing and exporting AES-CCM KeyStore keys</heading>
</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA_helpers.h&gt;</highlight></codeline>
<codeline><highlight class="normal">....</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint8_t<sp/>keyingMaterial[16];<sp/>//Assume<sp/>keying<sp/>material<sp/>is<sp/>already<sp/>available</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>keyingMaterial2[16];</highlight></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_KeyFileId<sp/>keyID;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>status;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>returnedLength;</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_KeyAttributes<sp/>attributes<sp/>=<sp/>KEYSTORE_PSA_KEY_ATTRIBUTES_INIT;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Assign<sp/>key<sp/>attributes.</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_setKeyUsageFlags(&amp;attributes,<sp/>(KEYSTORE_PSA_KEY_USAGE_DECRYPT<sp/>|<sp/>KEYSTORE_PSA_KEY_USAGE_ENCRYPT));</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_setKeyAlgorithm(&amp;attributes,<sp/>KEYSTORE_PSA_ALG_CCM);</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_setKeyType(&amp;attributes,<sp/>KEYSTORE_PSA_KEY_TYPE_AES);</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_setKeyLifetime(&amp;attributes,<sp/>KEYSTORE_PSA_KEY_LIFETIME_PERSISTENT);</highlight></codeline>
<codeline><highlight class="normal">keyID.key_id<sp/>=<sp/>KEYSTORE_PSA_KEY_ID_PERSISTENT_USER_MIN;</highlight></codeline>
<codeline><highlight class="normal">keyID.owner<sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_setKeyId(&amp;attributes,<sp/>keyID);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Import<sp/>the<sp/>keyingMaterial</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>KeyStore_PSA_importKey(&amp;attributes,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial),<sp/>&amp;keyID);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>!=<sp/>KEYSTORE_PSA_STATUS_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//Initialize<sp/>the<sp/>cryptoKey</highlight></codeline>
<codeline><highlight class="normal">KeyStore_PSA_initKey(&amp;cryptoKey,<sp/>keyID,<sp/>sizeof(keyingMaterial),<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Export<sp/>the<sp/>previously<sp/>imported<sp/>CryptoKey<sp/>using<sp/>keyID</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>KeyStore_PSA_exportKey(keyID,<sp/>keyingMaterial2,<sp/>sizeof(keyingMaterial2),<sp/>&amp;returnedLength);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>!=<sp/>KEYSTORE_PSA_STATUS_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Destroy<sp/>key<sp/>after<sp/>use</highlight></codeline>
<codeline><highlight class="normal">status<sp/>=<sp/>KeyStore_PSA_destroyKey(keyID);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(status<sp/>!=<sp/>KEYSTORE_PSA_STATUS_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2022,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_CryptoKeyKeyStore_PSA__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_CryptoKeyKeyStore_PSA__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(TFM_ENABLED<sp/>==<sp/>0)<sp/>||<sp/>defined(TFM_PSA_API)<sp/></highlight><highlight class="comment">/*<sp/>TFM_PSA_API<sp/>indicates<sp/>this<sp/>is<sp/>a<sp/>TF-M<sp/>build<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;third_party/mbedcrypto/include/psa/crypto.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;third_party/tfm/interface/include/psa/crypto.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#if<sp/>(TFM_ENABLED<sp/>==<sp/>0)<sp/>||<sp/>defined(TFM_PSA_API)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>psa_key_usage_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1ae56fe7b014c6118a37cd85c6952c9e95" kindref="member">KeyStore_PSA_KeyUsage</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="_crypto_key_key_store___p_s_a_8h_1a6606ab969b68d63d56d28a8d718fcbb9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>psa_key_lifetime_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a6606ab969b68d63d56d28a8d718fcbb9" kindref="member">KeyStore_PSA_KeyLifetime</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="_crypto_key_key_store___p_s_a_8h_1a17395988afbd6faee27eacf0d2c8f1d9" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_SUCCESS<sp/>((int_fast16_t)PSA_SUCCESS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="_crypto_key_key_store___p_s_a_8h_1a212b767d34258f884e4fd794ae51e132" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_GENERIC_ERROR<sp/>((int_fast16_t)PSA_ERROR_GENERIC_ERROR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="_crypto_key_key_store___p_s_a_8h_1aaf6c1ae5694a2fe490e2bda815a42a87" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_NOT_SUPPORTED<sp/>((int_fast16_t)PSA_ERROR_NOT_SUPPORTED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="_crypto_key_key_store___p_s_a_8h_1a4a8ec2db48e0c5f8ac76b2ee910685b3" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_NOT_PERMITTED<sp/>((int_fast16_t)PSA_ERROR_NOT_PERMITTED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="_crypto_key_key_store___p_s_a_8h_1ad3cf6be9734956d999d54e1b479619de" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_INVALID_KEY_ID<sp/>((int_fast16_t)PSA_ERROR_INVALID_HANDLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="_crypto_key_key_store___p_s_a_8h_1a9f0693894499148fbfba1e3769b1efa3" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_BUFFER_TOO_SMALL<sp/>((int_fast16_t)PSA_ERROR_BUFFER_TOO_SMALL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="_crypto_key_key_store___p_s_a_8h_1ab2a8c963faf4969ef26718691dd44ec5" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_ALREADY_EXISTS<sp/>((int_fast16_t)PSA_ERROR_ALREADY_EXISTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="_crypto_key_key_store___p_s_a_8h_1a371295236e0ea6ba6f22dd4431744daf" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_DOES_NOT_EXIST<sp/>((int_fast16_t)PSA_ERROR_DOES_NOT_EXIST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="_crypto_key_key_store___p_s_a_8h_1a7655a3dcc04f37cd7b5c95a8de41cf32" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_BAD_STATE<sp/>((int_fast16_t)PSA_ERROR_BAD_STATE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="_crypto_key_key_store___p_s_a_8h_1a51c63940bcb6c2f8ded25f308da32653" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_INVALID_ARGUMENT<sp/>((int_fast16_t)PSA_ERROR_INVALID_ARGUMENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="_crypto_key_key_store___p_s_a_8h_1a5105691651cb9d272e30d3edbf7dbbaa" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_INSUFFICIENT_MEMORY<sp/>((int_fast16_t)PSA_ERROR_INSUFFICIENT_MEMORY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="_crypto_key_key_store___p_s_a_8h_1a64f88ebad3ed76cbd696f5b6da79f9cc" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_INSUFFICIENT_STORAGE<sp/>((int_fast16_t)PSA_ERROR_INSUFFICIENT_STORAGE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="_crypto_key_key_store___p_s_a_8h_1a50f49fd2693d0b28895fd411f1b5b2bb" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_COMMUNICATION_FAILURE<sp/>((int_fast16_t)PSA_ERROR_COMMUNICATION_FAILURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="_crypto_key_key_store___p_s_a_8h_1a2879b4e5c574ef3c72866f10a2f57f3d" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_STORAGE_FAILURE<sp/>((int_fast16_t)PSA_ERROR_STORAGE_FAILURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="_crypto_key_key_store___p_s_a_8h_1a822e35765c5724075f67509d4d4001b9" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_HARDWARE_FAILURE<sp/>((int_fast16_t)PSA_ERROR_HARDWARE_FAILURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="_crypto_key_key_store___p_s_a_8h_1a3d7242ef739e418dc674275bd54d56c5" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_INSUFFICIENT_ENTROPY<sp/>((int_fast16_t)PSA_ERROR_INSUFFICIENT_ENTROPY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="_crypto_key_key_store___p_s_a_8h_1a784be5480b9ca7255f8956a17d18d852" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_CORRUPTION_DETECTED<sp/>((int_fast16_t)PSA_ERROR_CORRUPTION_DETECTED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="_crypto_key_key_store___p_s_a_8h_1aac85cef511781f98b0071828def22430" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_STATUS_RESOURCE_UNAVAILABLE<sp/>((int_fast16_t)-250)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>psa_key_type_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a10854401d8c51e82657f970737dc0c30" kindref="member">KeyStore_PSA_KeyType</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="_crypto_key_key_store___p_s_a_8h_1a9660db2b6b9cc23e39c3c686f54a2913" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_TYPE_RAW_DATA<sp/>((KeyStore_PSA_KeyType)PSA_KEY_TYPE_RAW_DATA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="_crypto_key_key_store___p_s_a_8h_1a604223da8ca256c5668828e8df2237cc" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_TYPE_HMAC<sp/>((KeyStore_PSA_KeyType)PSA_KEY_TYPE_HMAC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="_crypto_key_key_store___p_s_a_8h_1a80a4990b97c18a647e1421d3ddede23a" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_TYPE_DERIVE<sp/>((KeyStore_PSA_KeyType)PSA_KEY_TYPE_DERIVE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="_crypto_key_key_store___p_s_a_8h_1a6f086c3b74e444de391172b98cc5c1ef" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_TYPE_AES<sp/>((KeyStore_PSA_KeyType)PSA_KEY_TYPE_AES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="_crypto_key_key_store___p_s_a_8h_1aeb6689700d62749da62d274f13423c01" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_TYPE_DES<sp/>((KeyStore_PSA_KeyType)PSA_KEY_TYPE_DES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="_crypto_key_key_store___p_s_a_8h_1a1927793b24e14417c23249a44c67eb8a" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_TYPE_CAMELLIA<sp/>((KeyStore_PSA_KeyType)PSA_KEY_TYPE_CAMELLIA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="_crypto_key_key_store___p_s_a_8h_1adf33810806558bfa9d7a74a1d72e7f3d" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_TYPE_ARC4<sp/>((KeyStore_PSA_KeyType)PSA_KEY_TYPE_ARC4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="_crypto_key_key_store___p_s_a_8h_1ad5b5a0848b4e5df059094bb0bf9a1df6" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_TYPE_CHACHA20<sp/>((KeyStore_PSA_KeyType)PSA_KEY_TYPE_CHACHA20)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="_crypto_key_key_store___p_s_a_8h_1a4c6673755f418f1796f0c49d82956224" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_TYPE_RSA_PUBLIC_KEY<sp/>((KeyStore_PSA_KeyType)PSA_KEY_TYPE_RSA_PUBLIC_KEY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="_crypto_key_key_store___p_s_a_8h_1a361841dc2f13cf2adc4f3a39dfcc4bb4" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_TYPE_RSA_KEY_PAIR<sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_KEY_TYPE_RSA_KEY_PAIR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="_crypto_key_key_store___p_s_a_8h_1a0e1d8f241228e49c9cadadfb4579ef1a" refkind="member"><highlight class="preprocessor">#define<sp/>PSA_KEY_TYPE_IS_RSA(type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PSA_KEY_TYPE_PUBLIC_KEY_OF_KEY_PAIR(type)<sp/>==<sp/>PSA_KEY_TYPE_RSA_PUBLIC_KEY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="_crypto_key_key_store___p_s_a_8h_1a65d37ff8756bcd5924979b83021ecddb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_TYPE_ECC_PUBLIC_KEY_BASE<sp/>((KeyStore_PSA_KeyType)PSA_KEY_TYPE_ECC_PUBLIC_KEY_BASE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="_crypto_key_key_store___p_s_a_8h_1a76dc9c66e99c259489b539e5e6e56d24" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_TYPE_ECC_KEY_PAIR_BASE<sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_KEY_TYPE_ECC_KEY_PAIR_BASE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>psa_algorithm_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1affb3aa48f4e8a24ca3cfea0d79bb5ec6" kindref="member">KeyStore_PSA_Algorithm</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="_crypto_key_key_store___p_s_a_8h_1a88cd65b116acd1c2f11182418dbb19e1" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_SHA_224<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_Algorithm)PSA_ALG_SHA_224)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="_crypto_key_key_store___p_s_a_8h_1aef7060634005c4b54211c05654ccd128" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_SHA_256<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_Algorithm)PSA_ALG_SHA_256)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="_crypto_key_key_store___p_s_a_8h_1a2b5ed960ed187e8b04b8d66ce0368f79" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_SHA_384<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_Algorithm)PSA_ALG_SHA_384)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="_crypto_key_key_store___p_s_a_8h_1a2b43e1de1bfb6bcb13025c989a1d766d" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_SHA_512<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_Algorithm)PSA_ALG_SHA_512)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="_crypto_key_key_store___p_s_a_8h_1a16f862bc36cc9445f786f72910876673" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_SHA_512_224<sp/>((KeyStore_PSA_Algorithm)PSA_ALG_SHA_512_224)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="_crypto_key_key_store___p_s_a_8h_1a7d33fc6bf9ca4232e2176780daec25bc" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_SHA_512_256<sp/>((KeyStore_PSA_Algorithm)PSA_ALG_SHA_512_256)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="_crypto_key_key_store___p_s_a_8h_1a2deaf3fc38f71fae2c66ae2749790b34" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_CBC_MAC<sp/>((KeyStore_PSA_Algorithm)PSA_ALG_CBC_MAC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="_crypto_key_key_store___p_s_a_8h_1a591037e8602a42e1609d30be41a66658" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_CMAC<sp/><sp/><sp/><sp/>((KeyStore_PSA_Algorithm)PSA_ALG_CMAC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="_crypto_key_key_store___p_s_a_8h_1aa3b9f6c8ff7bc830c71100a80c908782" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_CTR<sp/>((KeyStore_PSA_Algorithm)PSA_ALG_CTR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="_crypto_key_key_store___p_s_a_8h_1ac75edf66c87a990e2572cf1438d2ac19" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_CBC_NO_PADDING<sp/>((KeyStore_PSA_Algorithm)PSA_ALG_CBC_NO_PADDING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="_crypto_key_key_store___p_s_a_8h_1a39ae8e9de3539d10243b8d852988062c" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_CCM<sp/>((KeyStore_PSA_Algorithm)PSA_ALG_CCM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="_crypto_key_key_store___p_s_a_8h_1ab06f39b8650abf93f1135afb44a0f717" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_GCM<sp/>((KeyStore_PSA_Algorithm)PSA_ALG_GCM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="_crypto_key_key_store___p_s_a_8h_1a8ea355792a3ecca4b258c1f4176ab508" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_CHACHA20_POLY1305<sp/>((KeyStore_PSA_Algorithm)PSA_ALG_CHACHA20_POLY1305)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="530" refid="_crypto_key_key_store___p_s_a_8h_1aa335536d1c4a661d8066ca0e87838267" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ALG_ECDH<sp/>((KeyStore_PSA_Algorithm)PSA_ALG_ECDH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>encoding<sp/>of<sp/>curve<sp/>identifiers<sp/>is<sp/>currently<sp/>aligned<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*<sp/>TLS<sp/>Supported<sp/>Groups<sp/>Registry<sp/>(formerly<sp/>known<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*<sp/>TLS<sp/>EC<sp/>Named<sp/>Curve<sp/>Registry)</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*<sp/>https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-8</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/>The<sp/>values<sp/>are<sp/>defined<sp/>by<sp/>RFC<sp/>8422<sp/>and<sp/>RFC<sp/>7027.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="_crypto_key_key_store___p_s_a_8h_1a8181437a2a58beec61299849b2d79795" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT163K1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT163K1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="_crypto_key_key_store___p_s_a_8h_1a1271eb117da68463d2655ea2a128e321" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT163R1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT163R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="_crypto_key_key_store___p_s_a_8h_1adcfbaa2f578a9e42fb4a7bd97044763a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT163R2<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT163R2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540" refid="_crypto_key_key_store___p_s_a_8h_1a9c8a13c3213c676fe28800e665acf17a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT193R1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT193R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="_crypto_key_key_store___p_s_a_8h_1a966c934bcac5776094fcd6051ffcdb80" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT193R2<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT193R2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="_crypto_key_key_store___p_s_a_8h_1abcfaa607f2d33ce6c9ec971a6692694e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT233K1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT233K1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="_crypto_key_key_store___p_s_a_8h_1a51ab637e1d58d0fb7a3ae14dd1a9d239" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT233R1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT233R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="_crypto_key_key_store___p_s_a_8h_1a5f8b5858e8bcfe903abfa334d1291604" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT239K1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT239K1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545" refid="_crypto_key_key_store___p_s_a_8h_1ab1628419bd22750dbe6374cd8f2b2287" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT283K1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT283K1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="_crypto_key_key_store___p_s_a_8h_1a15bffd02b63d2799326b1b73ffc1c074" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT283R1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT283R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547" refid="_crypto_key_key_store___p_s_a_8h_1a04b609ea3f218b00bdcbeb38b9107996" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT409K1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT409K1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="_crypto_key_key_store___p_s_a_8h_1a723240858d0685733d8fb8e0442a5352" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT409R1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT409R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="_crypto_key_key_store___p_s_a_8h_1aac4132761312826488989f14a11a86b6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT571K1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT571K1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550" refid="_crypto_key_key_store___p_s_a_8h_1a5b84a9b73196d9b00d4b739939d68516" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECT571R1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECT571R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="_crypto_key_key_store___p_s_a_8h_1a342d4f5c34d81b0e8287d836dc8b36d7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECP160K1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECP160K1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="_crypto_key_key_store___p_s_a_8h_1aafa5e2bf8830c89d2f100c46ee580591" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECP160R1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECP160R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553" refid="_crypto_key_key_store___p_s_a_8h_1afe6e7d08f961c3604e004551bde30b7e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECP160R2<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECP160R2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554" refid="_crypto_key_key_store___p_s_a_8h_1a131be3805205d07fb673c305a5fbd2c5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECP192K1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECP192K1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555" refid="_crypto_key_key_store___p_s_a_8h_1a96d90dd1023b8133fa6125326d066654" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECP192R1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECP192R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="_crypto_key_key_store___p_s_a_8h_1a279669b034f7034f784360cc6b4ffc01" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECP224K1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECP224K1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557" refid="_crypto_key_key_store___p_s_a_8h_1a163097a865ef0a6fe677bc7e16902025" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECP224R1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECP224R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="_crypto_key_key_store___p_s_a_8h_1a83625d935737b4e15ca784d398dc03b7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECP256K1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECP256K1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559" refid="_crypto_key_key_store___p_s_a_8h_1a12f9545558f42abe5545f316a712139f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECP256R1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECP256R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="_crypto_key_key_store___p_s_a_8h_1afc9f05cf50fc0bba921df931a8e278fc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECP384R1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECP384R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="_crypto_key_key_store___p_s_a_8h_1a73ee464f665675b3a7ea124e0ca15f47" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_SECP521R1<sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_SECP521R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="_crypto_key_key_store___p_s_a_8h_1a36efab0ede845bd7b356b1064d9a15bf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTRORE_ECC_CURVE_BRAINPOOL_P256R1<sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_BRAINPOOL_P256R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="_crypto_key_key_store___p_s_a_8h_1a32f0b537f2f78f12f13d7724e523c249" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTRORE_ECC_CURVE_BRAINPOOL_P384R1<sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_BRAINPOOL_P384R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564" refid="_crypto_key_key_store___p_s_a_8h_1a786aff9cb22058e9da37d1d9cd07325a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTRORE_ECC_CURVE_BRAINPOOL_P512R1<sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_BRAINPOOL_P512R1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="_crypto_key_key_store___p_s_a_8h_1a6c689f51db7db7441af0a55ad54fb863" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_CURVE25519<sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_CURVE25519)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="_crypto_key_key_store___p_s_a_8h_1a87ead5c5ef881e8deffa30adb5a32930" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_CURVE448<sp/><sp/><sp/><sp/><sp/><sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_CURVE448)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="585" refid="_crypto_key_key_store___p_s_a_8h_1aa43cb48050594a3109465d7ed78dd84a" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_VENDOR_MIN<sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_VENDOR_MIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="591" refid="_crypto_key_key_store___p_s_a_8h_1a83ba98e43cbc96da4176714d5a1445d0" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_ECC_CURVE_VENDOR_MAX<sp/>((KeyStore_PSA_KeyType)PSA_ECC_CURVE_VENDOR_MAX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Volatile<sp/>Key<sp/>Limit<sp/>[1,<sp/>PSA_KEY_SLOT_COUNT]<sp/>for<sp/>TF-Mv1.1</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*<sp/>Upper<sp/>limit<sp/>for<sp/>volatile<sp/>keys,<sp/>PSA_KEY_SLOT_COUNT<sp/>(32)<sp/>is<sp/>the<sp/>size<sp/>of<sp/>global<sp/>slot<sp/>array<sp/>in<sp/>mbedcrypto3.1</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(TFM_ENABLED<sp/>==<sp/>0)<sp/>||<sp/>defined(TFM_PSA_API)<sp/></highlight><highlight class="comment">/*<sp/>TFM_PSA_API<sp/>indicates<sp/>this<sp/>is<sp/>a<sp/>TF-M<sp/>build<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597" refid="_crypto_key_key_store___p_s_a_8h_1a7bb18342bd1614b96c555a9dfcdc29c7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KEYSTORE_PSA_MAX_VOLATILE_KEY_ID<sp/>PSA_KEY_SLOT_COUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>PSA_KEY_SLOT_COUNT<sp/>is<sp/>not<sp/>available<sp/>in<sp/>TF-M&apos;s<sp/>crypto.h<sp/>so<sp/>we<sp/>must</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>hardcode<sp/>it<sp/>to<sp/>match<sp/>the<sp/>value<sp/>in<sp/>mbedCrypto&apos;s<sp/>header.</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KEYSTORE_PSA_MAX_VOLATILE_KEY_ID<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>to<sp/>obtain<sp/>size<sp/>of<sp/>struct<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607" refid="_crypto_key_key_store___p_s_a_8h_1a4411361b7b39fe77832ce053152480e7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEMBER_SIZE(type,<sp/>member)<sp/>sizeof(((type<sp/>*)0)-&gt;member)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="616" refid="group__key__lifetimes_1ga67c68b7d1a3dd9775e6436682378c455" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_LIFETIME_VOLATILE<sp/>((KeyStore_PSA_KeyLifetime)PSA_KEY_LIFETIME_VOLATILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="630" refid="group__key__lifetimes_1ga0f9d5620a69b0815445736338f370355" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_LIFETIME_PERSISTENT<sp/>((KeyStore_PSA_KeyLifetime)PSA_KEY_LIFETIME_PERSISTENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="634" refid="group__key__lifetimes_1ga2139eb197f8e363d1ff623139dbd84a7" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_ID_NULL<sp/>((KeyStore_PSA_KeyFileId)0x0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="638" refid="group__key__lifetimes_1gadb82894cdb81fad99975fabc1f5bac81" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_ID_USER_MIN<sp/>((KeyStore_PSA_KeyFileId)PSA_KEY_ID_USER_MIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="642" refid="group__key__lifetimes_1ga7f7147e268efa63e10cd3418b76d0e02" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_ID_PERSISTENT_USER_MIN<sp/>0x41</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="group__key__lifetimes_1ga9593d39dd9a49a79dbeca893ff04e2a4" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_ID_WITH_CERTIFICATE_USER_MAX<sp/>0x1fffffff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="group__key__lifetimes_1gaf74e56b3c4cc9779d4ce28bb962ce946" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_ID_CERTIFICATE_BIT<sp/>(1<sp/>&lt;&lt;<sp/>29)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="661" refid="group__key__lifetimes_1gac487d6aa798bfd9970defd5f8a3c8048" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_ID_VENDOR_MIN<sp/>((KeyStore_PSA_KeyFileId)PSA_KEY_ID_VENDOR_MIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="group__key__lifetimes_1ga61b58d606ee33b8ffc9d21b6ecd68927" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_ID_VENDOR_MAX<sp/>((KeyStore_PSA_KeyFileId)PSA_KEY_ID_VENDOR_MAX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="669" refid="group__key__lifetimes_1ga4e1a19f2b2d0b365d65a23809c8e16db" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_DEFAULT_OWNER<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="688" refid="group__key__policies_1ga434328ced4e7eb4ee65d547bc05118b5" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_USAGE_EXPORT<sp/>((KeyStore_PSA_KeyUsage)PSA_KEY_USAGE_EXPORT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="704" refid="group__key__policies_1ga7b01130e88538177a92063ed7c39c404" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_USAGE_COPY<sp/>((KeyStore_PSA_KeyUsage)PSA_KEY_USAGE_COPY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="715" refid="group__key__policies_1gaa67d52dc99c8cb9f35522abeb2fa3a04" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_USAGE_ENCRYPT<sp/>((KeyStore_PSA_KeyUsage)PSA_KEY_USAGE_ENCRYPT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="726" refid="group__key__policies_1ga0e2ed070c15e64eb148d40e85dcb105b" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_USAGE_DECRYPT<sp/>((KeyStore_PSA_KeyUsage)PSA_KEY_USAGE_DECRYPT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="736" refid="group__key__policies_1ga999d229525d5dfbfaa61d3b6c89aed07" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_USAGE_SIGN_HASH<sp/>((KeyStore_PSA_KeyUsage)PSA_KEY_USAGE_SIGN_HASH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="group__key__policies_1gafe6143ba20ba93fd0321c2c279be1ef8" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_USAGE_VERIFY_HASH<sp/>((KeyStore_PSA_KeyUsage)PSA_KEY_USAGE_VERIFY_HASH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="750" refid="group__key__policies_1ga29a66a6486f87634ecbaaf885b953d19" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_KEY_USAGE_DERIVE<sp/>((KeyStore_PSA_KeyUsage)PSA_KEY_USAGE_DERIVE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="preprocessor">#if<sp/>(TFM_ENABLED<sp/>==<sp/>0)<sp/>||<sp/>defined(TFM_PSA_API)<sp/></highlight><highlight class="comment">/*<sp/>TFM_PSA_API<sp/>indicates<sp/>this<sp/>is<sp/>a<sp/>TF-M<sp/>build<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(MBEDTLS_PSA_CRYPTO_KEY_FILE_ID_ENCODES_OWNER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Building<sp/>for<sp/>the<sp/>PSA<sp/>Crypto<sp/>service<sp/>on<sp/>a<sp/>PSA<sp/>platform.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>key<sp/>owner<sp/>is<sp/>a<sp/>PSA<sp/>partition<sp/>identifier.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>psa_key_owner_id_t<sp/>KeyStore_PSA_key_owner_id_t;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(MBEDTLS_PSA_CRYPTO_KEY_FILE_ID_ENCODES_OWNER)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762" refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>psa_key_file_id_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref>;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="866" refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>psa_key_attributes_t<sp/><ref refid="group__attributes_1gab8abff1d54bd2e717bf97c7c18727361" kindref="member">KeyStore_PSA_KeyAttributes</ref>;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868" refid="group__attributes_1ga383aa20c778dfebe26d78ae2b569f253" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KEYSTORE_PSA_KEY_ATTRIBUTES_INIT<sp/>PSA_KEY_ATTRIBUTES_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(MBEDTLS_PSA_CRYPTO_KEY_FILE_ID_ENCODES_OWNER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>GET_KEY_ID(keyID,<sp/>ID)<sp/>\</highlight></codeline>
<codeline lineno="877"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyID.key_id<sp/>=<sp/>ID;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="878"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyID.owner<sp/><sp/>=<sp/>KEYSTORE_PSA_DEFAULT_OWNER;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SET_KEY_ID(ID,<sp/>keyID)<sp/>ID<sp/>=<sp/>keyID.key_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882" refid="group__attributes_1gac7a4b1f276d3ff9453d05360826fbb78" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>GET_KEY_ID(keyID,<sp/>ID)<sp/>keyID<sp/>=<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884" refid="group__attributes_1ga8d275b44bc2bed4b0121ab919ace07cc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SET_KEY_ID(ID,<sp/>keyID)<sp/>ID<sp/>=<sp/>keyID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(MBEDTLS_PSA_CRYPTO_KEY_FILE_ID_ENCODES_OWNER)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>psa_key_id_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a51619331e61baadfb5d4abed83da7d55" kindref="member">KeyStore_PSA_KeyFileId</ref>;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>GET_KEY_ID(keyID,<sp/>ID)<sp/>keyID<sp/>=<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SET_KEY_ID(ID,<sp/>keyID)<sp/>ID<sp/>=<sp/>keyID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>the<sp/>client<sp/>view<sp/>of<sp/>the<sp/>`key_attributes`<sp/>structure.<sp/>Only</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/>*<sp/>fields<sp/>which<sp/>need<sp/>to<sp/>be<sp/>set<sp/>by<sp/>the<sp/>PSA<sp/>crypto<sp/>client<sp/>are<sp/>present.</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/>*<sp/>The<sp/>PSA<sp/>crypto<sp/>service<sp/>will<sp/>maintain<sp/>a<sp/>different<sp/>version<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/>*<sp/>data<sp/>structure<sp/>internally.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">psa_client_key_attributes_s<sp/>KeyStore_PSA_KeyAttributes;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KEYSTORE_PSA_KEY_ATTRIBUTES_INIT<sp/>PSA_CLIENT_KEY_ATTRIBUTES_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#if<sp/>(TFM_ENABLED<sp/>==<sp/>0)<sp/>||<sp/>defined(TFM_PSA_API)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="923" refid="_crypto_key_key_store___p_s_a_8h_1ab20ef6a59131b56c4a762a2d37a2ba74" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PREPROVISIONED_AREA_ADDR<sp/>0x0000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="927" refid="_crypto_key_key_store___p_s_a_8h_1a47334e376fdfc74368a094a098477e41" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PREPROVISIONED_AREA_SIZE<sp/>(0x700)<sp/></highlight><highlight class="comment">/*<sp/>1792<sp/>B<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="934" refid="_crypto_key_key_store___p_s_a_8h_1a12efa00311960d6e9fa72f6b6ff3d01c" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEY_EXPORT_FLAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xAAAA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935" refid="_crypto_key_key_store___p_s_a_8h_1af244339028e7cb31a0c2ec2a5cad76b2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEY_EXPORT_FLAG_LENGTH<sp/>(sizeof(KEYSTORE_PSA_PRE_PROVISIONED_KEY_EXPORT_FLAG))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936" refid="_crypto_key_key_store___p_s_a_8h_1af88f2c615e616640c2c6bb37a47c6c9f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEY_NO_EXPORT_FLAG<sp/><sp/><sp/><sp/><sp/>0xA5A5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="941" refid="_crypto_key_key_store___p_s_a_8h_1a660684b66e4cd6a549ed05a6cfa2a75d" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PREPROVISIONED_KEYS_EMPTY<sp/>0xFFFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="946" refid="_crypto_key_key_store___p_s_a_8h_1a06ab45a5fa13a3ab909904ecc6f2d65e" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEY_MAGIC_HEADER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;HUK\0KEY&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947" refid="_crypto_key_key_store___p_s_a_8h_1a245471f73a81c1399191098480e76aed" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEYS_END<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948" refid="_crypto_key_key_store___p_s_a_8h_1a5cb43a1c16726e4c59419a8ee76cf1f6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEY_MAGIC_HEADER_LENGTH<sp/>(sizeof(KEYSTORE_PSA_PRE_PROVISIONED_KEY_MAGIC_HEADER))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949" refid="_crypto_key_key_store___p_s_a_8h_1ae7699792f625e323ef027e69ef166a1a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEYS_END_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sizeof(KEYSTORE_PSA_PRE_PROVISIONED_KEYS_END))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950" refid="_crypto_key_key_store___p_s_a_8h_1a15641bfd22500dde6b99b72553905df3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_MAX_PREPROVISIONED_KEYS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="955" refid="_crypto_key_key_store___p_s_a_8h_1a92ce73a489af978faee98abe2bc1dcbc" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEY_VALID_LIFETIME<sp/><sp/><sp/>0xAAAA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956" refid="_crypto_key_key_store___p_s_a_8h_1a5cc084a55ab9aebfa1e5f9b7238fc685" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEY_INVALID_LIFETIME<sp/>0x8888</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="964" refid="_crypto_key_key_store___p_s_a_8h_1a2cd486fcd3f741025f63a21039b62e85" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEY_ID_MAX<sp/>0x40</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965" refid="_crypto_key_key_store___p_s_a_8h_1aad00aefd28ed4e03648992bfbc25b17e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEY_ID_MIN<sp/>0x21</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966" refid="_crypto_key_key_store___p_s_a_8h_1aad309e9f08c40995e6222673539045bd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_CERTIFICATE_ID_MAX<sp/>\</highlight></codeline>
<codeline lineno="967"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(KEYSTORE_PSA_PRE_PROVISIONED_KEY_ID_MAX<sp/>|<sp/>KEYSTORE_PSA_KEY_ID_CERTIFICATE_BIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968" refid="_crypto_key_key_store___p_s_a_8h_1a237605d50e08764c92760358defa2bc4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_CERTIFICATE_ID_MIN<sp/>\</highlight></codeline>
<codeline lineno="969"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(KEYSTORE_PSA_PRE_PROVISIONED_KEY_ID_MIN<sp/>|<sp/>KEYSTORE_PSA_KEY_ID_CERTIFICATE_BIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="977" refid="_crypto_key_key_store___p_s_a_8h_1a13bd3ebc73ba1f39736b29c5dfe3041f" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_ATTESTATION_PUB_KEY_ID<sp/>0x40</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978" refid="_crypto_key_key_store___p_s_a_8h_1ac86d898831bcac8a80ea22f88056c86e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_ATTESTATION_PRI_KEY_ID<sp/>0X3F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979" refid="_crypto_key_key_store___p_s_a_8h_1ab1097b5502ca4dc978f874555ee14f47" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PRE_PROVISIONED_ATTESTATION_CERTIFICATE_ID<sp/>\</highlight></codeline>
<codeline lineno="980"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(KEYSTORE_PSA_PRE_PROVISIONED_ATTESTATION_PUB_KEY_ID<sp/>|<sp/>KEYSTORE_PSA_KEY_ID_CERTIFICATE_BIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="992" refid="struct_key_store___pre_provisioned_key_meta_data" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal">{</highlight></codeline>
<codeline lineno="994" refid="struct_key_store___pre_provisioned_key_meta_data_1a882d55ab436499d9eaf25ad1aad0cafb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>header[<ref refid="_crypto_key_key_store___p_s_a_8h_1a5cb43a1c16726e4c59419a8ee76cf1f6" kindref="member">KEYSTORE_PSA_PRE_PROVISIONED_KEY_MAGIC_HEADER_LENGTH</ref>];</highlight></codeline>
<codeline lineno="995" refid="struct_key_store___pre_provisioned_key_meta_data_1a82537cfd4a262d6f1042578f12628b0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_key_store___pre_provisioned_key_meta_data_1a82537cfd4a262d6f1042578f12628b0f" kindref="member">lifetime</ref>;</highlight></codeline>
<codeline lineno="996" refid="struct_key_store___pre_provisioned_key_meta_data_1a93f2bae79ee72865a0f8f64b17f8e282" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>KeyStore_PSA_KeyFileId<sp/><ref refid="struct_key_store___pre_provisioned_key_meta_data_1a93f2bae79ee72865a0f8f64b17f8e282" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="997" refid="struct_key_store___pre_provisioned_key_meta_data_1ac858d3accf7d10c8ad85fe3500f07c60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_key_store___pre_provisioned_key_meta_data_1ac858d3accf7d10c8ad85fe3500f07c60" kindref="member">export</ref>;</highlight></codeline>
<codeline lineno="998" refid="struct_key_store___pre_provisioned_key_meta_data_1a757d1f3581c3e982929a95c5814ec5e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>KeyStore_PSA_Algorithm<sp/><ref refid="struct_key_store___pre_provisioned_key_meta_data_1a757d1f3581c3e982929a95c5814ec5e2" kindref="member">alg</ref>;</highlight></codeline>
<codeline lineno="999" refid="struct_key_store___pre_provisioned_key_meta_data_1a945b98f23fe6cc0d6b034afc4ce153b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>KeyStore_PSA_KeyUsage<sp/><ref refid="struct_key_store___pre_provisioned_key_meta_data_1a945b98f23fe6cc0d6b034afc4ce153b1" kindref="member">usage</ref>;</highlight></codeline>
<codeline lineno="1000" refid="struct_key_store___pre_provisioned_key_meta_data_1a4b253aa2fa88bf3a030a899d373fa203" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_key_store___pre_provisioned_key_meta_data_1a4b253aa2fa88bf3a030a899d373fa203" kindref="member">keyLength</ref>;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">}<sp/><ref refid="struct_key_store___pre_provisioned_key_meta_data" kindref="compound">KeyStore_PreProvisionedKeyMetaData</ref>;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006" refid="_crypto_key_key_store___p_s_a_8h_1a5e969b597ac5700d3ce3ebeff6a0bb09" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PRE_PROVISIONED_KEY_METADATA_SIZE<sp/>sizeof(KeyStore_PreProvisionedKeyMetaData)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015" refid="struct_key_store__pre_provisioned_key_storage_format" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1017" refid="struct_key_store__pre_provisioned_key_storage_format_1a4e15ea147f2b5a3937f8b73520f8493c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_key_store___pre_provisioned_key_meta_data" kindref="compound">KeyStore_PreProvisionedKeyMetaData</ref><sp/><ref refid="struct_key_store__pre_provisioned_key_storage_format_1a4e15ea147f2b5a3937f8b73520f8493c" kindref="member">meta</ref>;</highlight></codeline>
<codeline lineno="1018" refid="struct_key_store__pre_provisioned_key_storage_format_1ab429e9761c8188a48b36c136088a6341" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_key_store__pre_provisioned_key_storage_format_1ab429e9761c8188a48b36c136088a6341" kindref="member">keyMaterial</ref>;</highlight></codeline>
<codeline lineno="1019" refid="struct_key_store__pre_provisioned_key_storage_format_1aeb05929a178f826ea902dac2996661b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_key_store__pre_provisioned_key_storage_format_1aeb05929a178f826ea902dac2996661b1" kindref="member">fletcher</ref>;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">}<sp/><ref refid="struct_key_store__pre_provisioned_key_storage_format" kindref="compound">KeyStore_preProvisionedKeyStorageFormat</ref>;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025" refid="_crypto_key_key_store___p_s_a_8h_1a0b120f9d13294e90446089429bd417ed" refkind="member"><highlight class="preprocessor">#define<sp/>KEYSTORE_PSA_PREPROVISIONED_KEY_FORMAT_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1026"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1027"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEY_MAGIC_HEADER,<sp/>0,<sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEY_EXPORT_FLAG,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="1028"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEYSTORE_PSA_PRE_PROVISIONED_KEYS_END,<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1029"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043" refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1045" refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds_1a166e20d09a9901eed14a408f5e314784" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds_1a166e20d09a9901eed14a408f5e314784" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="1046" refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds_1a1c4b6ce2d6cf5829d227a8b983a6aedf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>KeyStore_PSA_KeyFileId<sp/><ref refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds_1a1c4b6ce2d6cf5829d227a8b983a6aedf" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="1047" refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds_1a79fc97216c2ab71fea74316707a2b699" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>KeyStore_PSA_Algorithm<sp/><ref refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds_1a79fc97216c2ab71fea74316707a2b699" kindref="member">alg</ref>;</highlight></codeline>
<codeline lineno="1048" refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds_1aa46c410a945782b0ebbb54881e706274" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>KeyStore_PSA_KeyUsage<sp/><ref refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds_1aa46c410a945782b0ebbb54881e706274" kindref="member">usage</ref>;</highlight></codeline>
<codeline lineno="1049" refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds_1a8ca5995e42f7b231a22b431a94375fef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds_1a8ca5995e42f7b231a22b431a94375fef" kindref="member">export</ref>;</highlight></codeline>
<codeline lineno="1050" refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds_1a0194d0560da66c810542d9dcf47eedeb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds_1a0194d0560da66c810542d9dcf47eedeb" kindref="member">keyLength</ref>;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}<sp/><ref refid="struct_key_store___p_s_a__pre_provisioned_key_i_ds" kindref="compound">KeyStore_PSA_preProvisionedKeyIDs</ref>;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1aa39deef86055b0c230c8f6f3a1c833ef" kindref="member">KeyStore_PSA_setKeyId</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes,<sp/>KeyStore_PSA_KeyFileId<sp/>key);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a7b2babf52d14d2711a83b99bb2d02d1b" kindref="member">KeyStore_PSA_setKeyLifetime</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes,<sp/>KeyStore_PSA_KeyLifetime<sp/>lifetime);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal">KeyStore_PSA_KeyFileId<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1ad3bc2b0c06134db54dc023f4407a3c16" kindref="member">KeyStore_PSA_getKeyId</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal">KeyStore_PSA_KeyLifetime<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a20a8474a6b0c24e1a4d2aa095204e946" kindref="member">KeyStore_PSA_getKeyLifetime</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a9355a2890799fe9255e8ef92c4e52e61" kindref="member">KeyStore_PSA_setKeyUsageFlags</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes,<sp/>KeyStore_PSA_KeyUsage<sp/>usage_flags);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal">KeyStore_PSA_KeyUsage<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1af15020c653aecdfb33990c6cc30185ab" kindref="member">KeyStore_PSA_getKeyUsageFlags</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a31ded95ae232e8b6fae4414fd8be8f46" kindref="member">KeyStore_PSA_setKeyAlgorithm</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes,<sp/>KeyStore_PSA_Algorithm<sp/>alg);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal">KeyStore_PSA_Algorithm<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a7bd37a6f0aa7c856f2eb18b2cd7f6431" kindref="member">KeyStore_PSA_getKeyAlgorithm</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a4d6a1462d50186c8a726894a4f7b2dbf" kindref="member">KeyStore_PSA_setKeyType</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes,<sp/>KeyStore_PSA_KeyType<sp/>type);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a5bf5666e2ec6334bc9ff5c098c968c18" kindref="member">KeyStore_PSA_setKeyBits</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bits);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal">KeyStore_PSA_KeyType<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1ab76e66f5212c2aeea3576a6d670cf933" kindref="member">KeyStore_PSA_getKeyType</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a2f514bb3bbd55b337e21d68fe6246c47" kindref="member">KeyStore_PSA_getKeyBits</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1ac03c56458848dc47da2c07f36a2797f6" kindref="member">KeyStore_PSA_resetKeyAttributes</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a27ac03844a5cb0899f68e3cf1bc266de" kindref="member">KeyStore_PSA_exportCertificate</ref>(KeyStore_PSA_KeyFileId<sp/>key,</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*data,</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dataSize,</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*dataLength);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a918428f2b07212d0412afc9c5298df4c" kindref="member">KeyStore_PSA_exportPublicKey</ref>(KeyStore_PSA_KeyFileId<sp/>key,</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*data,</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dataSize,</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*dataLength);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1acaf3de92ced3940ebaca0e179ac38768" kindref="member">KeyStore_PSA_exportKey</ref>(KeyStore_PSA_KeyFileId<sp/>key,<sp/>uint8_t<sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dataSize,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*dataLength);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1a59a557ed9bd4f24c710db17d53a6a319" kindref="member">KeyStore_PSA_importCertificate</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes,</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KeyStore_PSA_KeyFileId<sp/>*key,</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*data,</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dataLength);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1aa9425eeaa708cf28b9101c34a152ec36" kindref="member">KeyStore_PSA_importKey</ref>(KeyStore_PSA_KeyAttributes<sp/>*attributes,</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*data,</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dataLength,</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KeyStore_PSA_KeyFileId<sp/>*key);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1ae8fe5bcd8dd9c72f4a801660dd6333b5" kindref="member">KeyStore_PSA_getKeyAttributes</ref>(KeyStore_PSA_KeyFileId<sp/>key,<sp/>KeyStore_PSA_KeyAttributes<sp/>*attributes);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1ae30b5ec1aabc664aa97b01c9b6c6a459" kindref="member">KeyStore_PSA_purgeKey</ref>(KeyStore_PSA_KeyFileId<sp/>key);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1abe79a1483bbf619c54f4d4ded92bea03" kindref="member">KeyStore_PSA_destroyCertificate</ref>(KeyStore_PSA_KeyFileId<sp/>key);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal">int_fast16_t<sp/><ref refid="_crypto_key_key_store___p_s_a_8h_1ab31d2f98590286a0035caf322d230e3c" kindref="member">KeyStore_PSA_destroyKey</ref>(KeyStore_PSA_KeyFileId<sp/>key);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_KeyStore_PSA__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/cryptoutils/cryptokey/CryptoKeyKeyStore_PSA.h"/>
  </compounddef>
</doxygen>
