<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_i2_c_c_c26_x_x_8h" kind="file" language="C++">
    <compoundname>I2CCC26XX.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="_i2_c_8h" local="no">ti/drivers/I2C.h</includes>
    <includes refid="_power_8h" local="no">ti/drivers/Power.h</includes>
    <includes local="no">ti/drivers/dpl/SwiP.h</includes>
    <incdepgraph>
      <node id="955">
        <label>stdbool.h</label>
      </node>
      <node id="954">
        <label>stdint.h</label>
      </node>
      <node id="959">
        <label>stddef.h</label>
      </node>
      <node id="956">
        <label>ti/drivers/I2C.h</label>
        <link refid="_i2_c_8h"/>
      </node>
      <node id="960">
        <label>ti/drivers/dpl/SwiP.h</label>
      </node>
      <node id="953">
        <label>I2CCC26XX.h</label>
        <link refid="_i2_c_c_c26_x_x_8h"/>
        <childnode refid="954" relation="include">
        </childnode>
        <childnode refid="955" relation="include">
        </childnode>
        <childnode refid="956" relation="include">
        </childnode>
        <childnode refid="957" relation="include">
        </childnode>
        <childnode refid="960" relation="include">
        </childnode>
      </node>
      <node id="957">
        <label>ti/drivers/Power.h</label>
        <link refid="_power_8h"/>
        <childnode refid="958" relation="include">
        </childnode>
      </node>
      <node id="958">
        <label>ti/drivers/utils/List.h</label>
        <link refid="_list_8h"/>
        <childnode refid="954" relation="include">
        </childnode>
        <childnode refid="955" relation="include">
        </childnode>
        <childnode refid="959" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_i2_c_c_c26_x_x___i2_c_pin_cfg" prot="public">I2CCC26XX_I2CPinCfg</innerclass>
    <innerclass refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1" prot="public">I2CCC26XX_HWAttrsV1</innerclass>
    <innerclass refid="struct_i2_c_c_c26_x_x___object" prot="public">I2CCC26XX_Object</innerclass>
    <briefdescription>
<para>I2C driver implementation for a CC26XX I2C controller. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><heading level="1">Driver Include</heading>
</para><para>The I2C header file should be included in an application as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/I2C.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/i2c/I2CCC26XX.h&gt;</highlight></codeline>
</programlisting></para><para>Refer to <ref refid="_i2_c_8h" kindref="compound">I2C.h</ref> for a complete description of APIs.</para><para><heading level="1">Overview</heading>
</para><para>The general I2C API is normally used in application code, e.g. <ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref> is used instead of I2CCC26XX_open(). The board file will define the device specific config, and casting in the general API will ensure that the correct device specific functions are called. This is also reflected in the example code in <ref refid="_i2_c_c_c26_x_x_8h_1I2C_USE_CASES" kindref="member">Use Cases</ref>.</para><para><heading level="2">General Behavior</heading>
</para><para>Before using the I2C in CC26XX:<itemizedlist>
<listitem><para>The I2C driver is initialized by calling <ref refid="_i2_c_8h_1a9ff51ddf1d325776fef90cce0223772b" kindref="member">I2C_init()</ref>.</para></listitem><listitem><para>The I2C HW is configured and system dependencies are declared (e.g. IOs, power, etc.) by calling <ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref>.</para></listitem></itemizedlist>
The following is true for receive operation:<itemizedlist>
<listitem><para>RX is enabled by calling <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref>. The readCount of the <ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> must be set to a non-zero value.</para></listitem><listitem><para>If the <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> succeeds, the I2C remains enabled.</para></listitem><listitem><para>The application must check the return value from <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> to verify that the transfer succeeded.</para></listitem></itemizedlist>
The following apply for transmit operation:<itemizedlist>
<listitem><para>TX is enabled by calling <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref>. The writeCount of the <ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> must be set to a non-zero value.</para></listitem><listitem><para>If the <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> succeeds, the I2C remains enabled.</para></listitem><listitem><para>The application must check the return value from <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> to verify that the transfer succeeded.</para></listitem></itemizedlist>
After I2C operation has ended:<itemizedlist>
<listitem><para>Release system dependencies for I2C by calling <ref refid="_i2_c_8h_1a12c86d89a687f2ee1eb980d99c32326d" kindref="member">I2C_close()</ref>.</para></listitem></itemizedlist>
</para><para><heading level="3">Known Issue</heading>
</para><para><simplesect kind="warning"><para>The I2C will transmit a single data byte in the event that the I2C target address is not acknowledged (NACK&apos;d). This is due to a known hardware bug.</para></simplesect>
<heading level="2">Error handling</heading>
</para><para>If an error occurs during operation:<itemizedlist>
<listitem><para>The I2C Controller transmits a stop bit and remains enabled.</para></listitem></itemizedlist>
<heading level="2">Power Management</heading>
</para><para>The I2CCC26XX driver sets a power constraint during transactions to keep the device out of standby; so when all tasks are blocked, the device will enter idle mode instead of standby. When the transactions have finished, the power constraint to prohibit standby is released. The following statements are valid:<itemizedlist>
<listitem><para>After <ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref> call: I2C is enabled, there are no active I2C transactions, the device can enter standby.</para></listitem><listitem><para>After <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> call: active I2C transactions exist, the device might enter idle, but not standby.</para></listitem><listitem><para>When <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> completes, either after success or error, I2C remains enabled, and the device can enter standby.</para></listitem><listitem><para>After <ref refid="_i2_c_8h_1a12c86d89a687f2ee1eb980d99c32326d" kindref="member">I2C_close()</ref> call: I2C is disabled</para></listitem><listitem><para>If the device goes into idle during a transaction, the state of SDA is undefined in the time between the transaction completing and the device waking up. SCL will go low until the device wakes up and starts another transaction or releases the bus. If this is a problem for another device on the I2C bus, you can set a power constraint for <ref refid="_power_c_c26_x_x_8h_1ab80d8e6de86d3acfa903ceab156da031" kindref="member">PowerCC26XX_DISALLOW_IDLE</ref> before the transaction and release it when the transaction completes.</para></listitem></itemizedlist>
</para><para><heading level="2">Supported Functions</heading>
</para><para><table rows="5" cols="3"><row>
<entry thead="yes"><para>Generic API Function </para></entry><entry thead="yes"><para>API Function </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_i2_c_8h_1a9ff51ddf1d325776fef90cce0223772b" kindref="member">I2C_init()</ref> </para></entry><entry thead="no"><para>I2CCC26XX_init() </para></entry><entry thead="no"><para>Initialize I2C driver </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_i2_c_8h_1a2db3461e1e956d9b86af414da2fb05f6" kindref="member">I2C_open()</ref> </para></entry><entry thead="no"><para>I2CCC26XX_open() </para></entry><entry thead="no"><para>Initialize I2C HW and set system dependencies </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_i2_c_8h_1a12c86d89a687f2ee1eb980d99c32326d" kindref="member">I2C_close()</ref> </para></entry><entry thead="no"><para>I2CCC26XX_close() </para></entry><entry thead="no"><para>Disable I2C HW and release system dependencies </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> </para></entry><entry thead="no"><para>I2CCC26XX_transfer() </para></entry><entry thead="no"><para>Start I2C transfer </para></entry></row>
</table>
<simplesect kind="note"><para>All calls should go through the generic API.</para></simplesect>
<heading level="2">Supported Bit Rates</heading>
</para><para><itemizedlist>
<listitem><para><ref refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea966fd2df13b3a9825615c50335cf1987" kindref="member">I2C_100kHz</ref></para></listitem><listitem><para><ref refid="_i2_c_8h_1ac954e3197f04c50293db466c4abb6fbea83cc3750242e6ae9194cd7ed94f764d9" kindref="member">I2C_400kHz</ref></para></listitem></itemizedlist>
</para><para><heading level="2">Unsupported Functionality</heading>
</para><para>The CC26XX I2C driver currently does not support:<itemizedlist>
<listitem><para>Multi-controller mode</para></listitem><listitem><para>I2C target mode</para></listitem></itemizedlist>
</para><para><heading level="2">Use Cases<anchor id="_i2_c_c_c26_x_x_8h_1I2C_USE_CASES"/></heading>
</para><para><heading level="3">Basic Receive</heading>
</para><para>Receive 10 bytes over I2C in <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26abe065350be2a0ae5c9beb24624626c75" kindref="member">I2C_MODE_BLOCKING</ref>. <programlisting><codeline><highlight class="normal">//<sp/>Locals</highlight></codeline>
<codeline><highlight class="normal">I2C_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">I2C_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">I2C_Transaction<sp/>i2cTrans;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>rxBuf[32];<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Receive<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>txBuf[32];<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Transmit<sp/>buffer</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Configure<sp/>I2C<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal">I2C_Params_init(&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>I2C<sp/>transaction<sp/>structure</highlight></codeline>
<codeline><highlight class="normal">i2cTrans.writeCount<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">i2cTrans.writeBuf<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>txBuf;</highlight></codeline>
<codeline><highlight class="normal">i2cTrans.readCount<sp/><sp/><sp/><sp/><sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal">i2cTrans.readBuf<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rxBuf;</highlight></codeline>
<codeline><highlight class="normal">i2cTrans.targetAddress<sp/>=<sp/>0x3C;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>I2C</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>I2C_open(CONFIG_I2C,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Do<sp/>I2C<sp/>transfer<sp/>receive</highlight></codeline>
<codeline><highlight class="normal">I2C_transfer(handle,<sp/>&amp;i2cTrans);</highlight></codeline>
</programlisting></para><para><heading level="3">Basic Transmit</heading>
</para><para>Transmit 16 bytes over I2C in <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" kindref="member">I2C_MODE_CALLBACK</ref>. <programlisting><codeline><highlight class="normal">uint8_t<sp/>rxBuffer[32];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Receive<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>txBuffer[32];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Transmit<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>transferDone<sp/>=<sp/>false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>transferCallback(I2C_Handle<sp/>handle,<sp/>I2C_Transaction<sp/>*transac,<sp/>bool<sp/>result)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>length<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(result)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transferDone<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Transaction<sp/>failed,<sp/>act<sp/>accordingly...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>taskFxn(uintptr_t<sp/>a0,<sp/>uintptr_t<sp/>a1)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Locals</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_Transaction<sp/>i2cTrans;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Configure<sp/>I2C<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.transferMode<sp/>=<sp/>I2C_MODE_CALLBACK;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.transferCallbackFxn<sp/>=<sp/>transferCallback;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prepare<sp/>data<sp/>to<sp/>send,<sp/>send<sp/>0x00,<sp/>0x01,<sp/>0x02,<sp/>...0xFF,<sp/>0x00,<sp/>0x01...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numTxBytes;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txBuffer[i]<sp/>=<sp/>(uint8_t)<sp/>i;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>I2C<sp/>transaction<sp/>structure</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans.writeCount<sp/><sp/><sp/><sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans.writeBuf<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>txBuffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans.readCount<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans.readBuf<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rxBuffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans.targetAddress<sp/>=<sp/>0x3C;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Open<sp/>I2C</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>I2C_open(CONFIG_I2C,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>I2C<sp/>transfer<sp/>(in<sp/>callback<sp/>mode)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_transfer(handle,<sp/>&amp;i2cTrans);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>other<sp/>stuff<sp/>while<sp/>I2C<sp/>is<sp/>handling<sp/>the<sp/>transfer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>if<sp/>I2C<sp/>transfer<sp/>is<sp/>finished</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(transferDone)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="3">Chained Transactions</heading>
</para><para>Transmit 10 bytes and then 32 bytes over I2C in <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" kindref="member">I2C_MODE_CALLBACK</ref>. <programlisting><codeline><highlight class="normal">uint8_t<sp/>rxBuffer[32];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Receive<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>txBuffer[32];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Transmit<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>rxBuffer2[64];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Receive<sp/>buffer<sp/>2</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>txBuffer2[64];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Transmit<sp/>buffer<sp/>2</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>transferDone<sp/>=<sp/>false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>writeCallbackDefault(I2C_Handle<sp/>handle,<sp/>I2C_Transaction<sp/>*transac,<sp/>bool<sp/>result)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>length<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(result)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transferDone<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Transaction<sp/>failed,<sp/>act<sp/>accordingly...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>taskFxn(uintptr_t<sp/>a0,<sp/>uintptr_t<sp/>a1)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Locals</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_Transaction<sp/>i2cTrans;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_Transaction<sp/>i2cTrans2;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Configure<sp/>I2C<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.transferMode<sp/>=<sp/>I2C_MODE_CALLBACK;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.transferCallbackFxn<sp/>=<sp/>writeCallbackDefault;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prepare<sp/>data<sp/>to<sp/>send,<sp/>send<sp/>0x00,<sp/>0x01,<sp/>0x02,<sp/>...0xFF,<sp/>0x00,<sp/>0x01...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numTxBytes;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txBuffer[i]<sp/>=<sp/>(uint8_t)<sp/>i;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>first<sp/>I2C<sp/>transaction<sp/>structure</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans.writeCount<sp/><sp/><sp/><sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans.writeBuf<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>txBuffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans.readCount<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans.readBuf<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rxBuffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans.targetAddress<sp/>=<sp/>0x3C;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Second<sp/>transaction</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans2.writeCount<sp/><sp/><sp/><sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans2.writeBuf<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>txBuffer2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans2.readCount<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans2.readBuf<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rxBuffer2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2cTrans2.targetAddress<sp/>=<sp/>0x2E;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Open<sp/>I2C</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>I2C_open(CONFIG_I2C,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>chained<sp/>I2C<sp/>transfers<sp/>(in<sp/>callback<sp/>mode).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_transfer(handle,<sp/>&amp;i2cTrans);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_transfer(handle,<sp/>&amp;i2cTrans2);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>other<sp/>stuff<sp/>while<sp/>I2C<sp/>is<sp/>handling<sp/>the<sp/>transfers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>if<sp/>I2C<sp/>transfers<sp/>are<sp/>finished</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(transferDone)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="1">Instrumentation</heading>
</para><para>The I2C driver interface produces log statements if instrumentation is enabled.</para><para><table rows="3" cols="2"><row>
<entry thead="yes"><para>Diagnostics Mask </para></entry><entry thead="yes"><para>Log details  </para></entry></row>
<row>
<entry thead="no"><para>Diags_USER1 </para></entry><entry thead="no"><para>basic I2C operations performed </para></entry></row>
<row>
<entry thead="no"><para>Diags_USER2 </para></entry><entry thead="no"><para>detailed I2C operations performed </para></entry></row>
</table>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2023,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2CCC26XX.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>I2C<sp/>driver<sp/>implementation<sp/>for<sp/>a<sp/>CC26XX<sp/>I2C<sp/>controller.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Driver<sp/>Include<sp/>#</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>I2C<sp/>header<sp/>file<sp/>should<sp/>be<sp/>included<sp/>in<sp/>an<sp/>application<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/I2C.h&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/i2c/I2CCC26XX.h&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>@ref<sp/>I2C.h<sp/>for<sp/>a<sp/>complete<sp/>description<sp/>of<sp/>APIs.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>#<sp/>Overview<sp/>#</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>The<sp/>general<sp/>I2C<sp/>API<sp/>is<sp/>normally<sp/>used<sp/>in<sp/>application<sp/>code,<sp/>e.g.<sp/>I2C_open()</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>is<sp/>used<sp/>instead<sp/>of<sp/>I2CCC26XX_open().<sp/>The<sp/>board<sp/>file<sp/>will<sp/>define<sp/>the<sp/>device</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>specific<sp/>config,<sp/>and<sp/>casting<sp/>in<sp/>the<sp/>general<sp/>API<sp/>will<sp/>ensure<sp/>that<sp/>the<sp/>correct</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>device<sp/>specific<sp/>functions<sp/>are<sp/>called.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>also<sp/>reflected<sp/>in<sp/>the<sp/>example<sp/>code<sp/>in<sp/>[Use<sp/>Cases](@ref<sp/>I2C_USE_CASES).</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>##<sp/>General<sp/>Behavior<sp/>#</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>Before<sp/>using<sp/>the<sp/>I2C<sp/>in<sp/>CC26XX:</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>The<sp/>I2C<sp/>driver<sp/>is<sp/>initialized<sp/>by<sp/>calling<sp/>I2C_init().</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>The<sp/>I2C<sp/>HW<sp/>is<sp/>configured<sp/>and<sp/>system<sp/>dependencies<sp/>are<sp/>declared<sp/>(e.g.<sp/>IOs,</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>power,<sp/>etc.)<sp/>by<sp/>calling<sp/>I2C_open().</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>is<sp/>true<sp/>for<sp/>receive<sp/>operation:</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>RX<sp/>is<sp/>enabled<sp/>by<sp/>calling<sp/>I2C_transfer().</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>The<sp/>readCount<sp/>of<sp/>the<sp/>::I2C_Transaction<sp/>must<sp/>be<sp/>set<sp/>to<sp/>a<sp/>non-zero<sp/>value.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>the<sp/>I2C_transfer()<sp/>succeeds,<sp/>the<sp/>I2C<sp/>remains<sp/>enabled.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>The<sp/>application<sp/>must<sp/>check<sp/>the<sp/>return<sp/>value<sp/>from<sp/>I2C_transfer()</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>to<sp/>verify<sp/>that<sp/>the<sp/>transfer<sp/>succeeded.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>apply<sp/>for<sp/>transmit<sp/>operation:</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>TX<sp/>is<sp/>enabled<sp/>by<sp/>calling<sp/>I2C_transfer().</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>The<sp/>writeCount<sp/>of<sp/>the<sp/>::I2C_Transaction<sp/>must<sp/>be<sp/>set<sp/>to<sp/>a<sp/>non-zero<sp/>value.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>If<sp/>the<sp/>I2C_transfer()<sp/>succeeds,<sp/>the<sp/>I2C<sp/>remains<sp/>enabled.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>The<sp/>application<sp/>must<sp/>check<sp/>the<sp/>return<sp/>value<sp/>from<sp/>I2C_transfer()</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>to<sp/>verify<sp/>that<sp/>the<sp/>transfer<sp/>succeeded.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>After<sp/>I2C<sp/>operation<sp/>has<sp/>ended:</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>Release<sp/>system<sp/>dependencies<sp/>for<sp/>I2C<sp/>by<sp/>calling<sp/>I2C_close().</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>###<sp/>Known<sp/>Issue<sp/>#</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>@warning<sp/>The<sp/>I2C<sp/>will<sp/>transmit<sp/>a<sp/>single<sp/>data<sp/>byte<sp/>in<sp/>the<sp/>event<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>I2C<sp/>target<sp/>address<sp/>is<sp/>not<sp/>acknowledged<sp/>(NACK&apos;d).<sp/>This<sp/>is<sp/>due<sp/>to<sp/>a<sp/>known</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>hardware<sp/>bug.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>##<sp/>Error<sp/>handling<sp/>#</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>If<sp/>an<sp/>error<sp/>occurs<sp/>during<sp/>operation:</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/>-<sp/>The<sp/>I2C<sp/>Controller<sp/>transmits<sp/>a<sp/>stop<sp/>bit<sp/>and<sp/>remains<sp/>enabled.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>##<sp/>Power<sp/>Management<sp/>#</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>I2CCC26XX<sp/>driver<sp/>sets<sp/>a<sp/>power<sp/>constraint<sp/>during<sp/>transactions<sp/>to<sp/>keep</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>device<sp/>out<sp/>of<sp/>standby;<sp/>so<sp/>when<sp/>all<sp/>tasks<sp/>are<sp/>blocked,<sp/>the<sp/>device<sp/>will</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/>enter<sp/>idle<sp/>mode<sp/>instead<sp/>of<sp/>standby.<sp/><sp/>When<sp/>the<sp/>transactions<sp/>have<sp/>finished,</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>power<sp/>constraint<sp/>to<sp/>prohibit<sp/>standby<sp/>is<sp/>released.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>following<sp/>statements<sp/>are<sp/>valid:</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>After<sp/>I2C_open()<sp/>call:<sp/>I2C<sp/>is<sp/>enabled,<sp/>there<sp/>are<sp/>no<sp/>active<sp/>I2C</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>transactions,<sp/>the<sp/>device<sp/>can<sp/>enter<sp/>standby.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>After<sp/>I2C_transfer()<sp/>call:<sp/>active<sp/>I2C<sp/>transactions<sp/>exist,<sp/>the<sp/>device</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>might<sp/>enter<sp/>idle,<sp/>but<sp/>not<sp/>standby.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>When<sp/>I2C_transfer()<sp/>completes,<sp/>either<sp/>after<sp/>success<sp/>or<sp/>error,<sp/>I2C</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>remains<sp/>enabled,<sp/>and<sp/>the<sp/>device<sp/>can<sp/>enter<sp/>standby.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>After<sp/>I2C_close()<sp/>call:<sp/>I2C<sp/>is<sp/>disabled</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>If<sp/>the<sp/>device<sp/>goes<sp/>into<sp/>idle<sp/>during<sp/>a<sp/>transaction,<sp/>the<sp/>state<sp/>of</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>SDA<sp/>is<sp/>undefined<sp/>in<sp/>the<sp/>time<sp/>between<sp/>the<sp/>transaction<sp/>completing<sp/>and</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>device<sp/>waking<sp/>up.<sp/>SCL<sp/>will<sp/>go<sp/>low<sp/>until<sp/>the<sp/>device<sp/>wakes<sp/>up<sp/>and</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>starts<sp/>another<sp/>transaction<sp/>or<sp/>releases<sp/>the<sp/>bus.<sp/>If<sp/>this<sp/>is<sp/>a<sp/>problem</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>another<sp/>device<sp/>on<sp/>the<sp/>I2C<sp/>bus,<sp/>you<sp/>can<sp/>set<sp/>a<sp/>power<sp/>constraint<sp/>for</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>#PowerCC26XX_DISALLOW_IDLE<sp/>before<sp/>the<sp/>transaction<sp/>and<sp/>release<sp/>it</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>the<sp/>transaction<sp/>completes.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>##<sp/>Supported<sp/>Functions<sp/>##</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>Generic<sp/>API<sp/>Function<sp/>|<sp/>API<sp/>Function<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>|---------------------<sp/>|-------------------------<sp/>|---------------------------------------------------|</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>I2C_init()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>I2CCC26XX_init()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Initialize<sp/>I2C<sp/>driver<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>I2C_open()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>I2CCC26XX_open()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Initialize<sp/>I2C<sp/>HW<sp/>and<sp/>set<sp/>system<sp/>dependencies<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>I2C_close()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>I2CCC26XX_close()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Disable<sp/>I2C<sp/>HW<sp/>and<sp/>release<sp/>system<sp/>dependencies<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>I2C_transfer()<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>I2CCC26XX_transfer()<sp/><sp/><sp/><sp/><sp/>|<sp/>Start<sp/>I2C<sp/>transfer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>All<sp/>calls<sp/>should<sp/>go<sp/>through<sp/>the<sp/>generic<sp/>API.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Supported<sp/>Bit<sp/>Rates<sp/>##</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>#I2C_100kHz</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>#I2C_400kHz</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Unsupported<sp/>Functionality<sp/>#</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>CC26XX<sp/>I2C<sp/>driver<sp/>currently<sp/>does<sp/>not<sp/>support:</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Multi-controller<sp/>mode</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>I2C<sp/>target<sp/>mode</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>##<sp/>Use<sp/>Cases<sp/>@anchor<sp/>I2C_USE_CASES<sp/>##</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>###<sp/>Basic<sp/>Receive<sp/>#</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/>Receive<sp/>10<sp/>bytes<sp/>over<sp/>I2C<sp/>in<sp/>::I2C_MODE_BLOCKING.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Locals</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>I2C_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>I2C_Params<sp/>params;</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>I2C_Transaction<sp/>i2cTrans;</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>rxBuf[32];<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Receive<sp/>buffer</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>txBuf[32];<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Transmit<sp/>buffer</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Configure<sp/>I2C<sp/>parameters.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/>I2C_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Initialize<sp/>I2C<sp/>transaction<sp/>structure</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/>i2cTrans.writeCount<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>i2cTrans.writeBuf<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>txBuf;</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/>i2cTrans.readCount<sp/><sp/><sp/><sp/><sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/>i2cTrans.readBuf<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rxBuf;</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/><sp/>i2cTrans.targetAddress<sp/>=<sp/>0x3C;</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Open<sp/>I2C</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>handle<sp/>=<sp/>I2C_open(CONFIG_I2C,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>Do<sp/>I2C<sp/>transfer<sp/>receive</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/>I2C_transfer(handle,<sp/>&amp;i2cTrans);</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>###<sp/>Basic<sp/>Transmit<sp/>#</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/>Transmit<sp/>16<sp/>bytes<sp/>over<sp/>I2C<sp/>in<sp/>::I2C_MODE_CALLBACK.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>rxBuffer[32];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Receive<sp/>buffer</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>txBuffer[32];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Transmit<sp/>buffer</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/>bool<sp/>transferDone<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>transferCallback(I2C_Handle<sp/>handle,<sp/>I2C_Transaction<sp/>*transac,<sp/>bool<sp/>result)</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>length<sp/>bytes</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(result)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transferDone<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Transaction<sp/>failed,<sp/>act<sp/>accordingly...</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>taskFxn(uintptr_t<sp/>a0,<sp/>uintptr_t<sp/>a1)</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Locals</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_Params<sp/>params;</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_Transaction<sp/>i2cTrans;</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Configure<sp/>I2C<sp/>parameters.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>params.transferMode<sp/>=<sp/>I2C_MODE_CALLBACK;</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>params.transferCallbackFxn<sp/>=<sp/>transferCallback;</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Prepare<sp/>data<sp/>to<sp/>send,<sp/>send<sp/>0x00,<sp/>0x01,<sp/>0x02,<sp/>...0xFF,<sp/>0x00,<sp/>0x01...</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>for(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numTxBytes;<sp/>i++)</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txBuffer[i]<sp/>=<sp/>(uint8_t)<sp/>i;</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>I2C<sp/>transaction<sp/>structure</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans.writeCount<sp/><sp/><sp/><sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans.writeBuf<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>txBuffer;</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans.readCount<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans.readBuf<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rxBuffer;</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans.targetAddress<sp/>=<sp/>0x3C;</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Open<sp/>I2C</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>I2C_open(CONFIG_I2C,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>I2C<sp/>transfer<sp/>(in<sp/>callback<sp/>mode)</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_transfer(handle,<sp/>&amp;i2cTrans);</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>other<sp/>stuff<sp/>while<sp/>I2C<sp/>is<sp/>handling<sp/>the<sp/>transfer</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>if<sp/>I2C<sp/>transfer<sp/>is<sp/>finished</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if(transferDone)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Continue...</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>###<sp/>Chained<sp/>Transactions<sp/>#</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/><sp/>Transmit<sp/>10<sp/>bytes<sp/>and<sp/>then<sp/>32<sp/>bytes<sp/>over<sp/>I2C<sp/>in<sp/>::I2C_MODE_CALLBACK.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>rxBuffer[32];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Receive<sp/>buffer</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>txBuffer[32];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Transmit<sp/>buffer</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>rxBuffer2[64];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Receive<sp/>buffer<sp/>2</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/><sp/>uint8_t<sp/>txBuffer2[64];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Transmit<sp/>buffer<sp/>2</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/><sp/>bool<sp/>transferDone<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>writeCallbackDefault(I2C_Handle<sp/>handle,<sp/>I2C_Transaction<sp/>*transac,<sp/>bool<sp/>result)</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>length<sp/>bytes</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(result)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transferDone<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Transaction<sp/>failed,<sp/>act<sp/>accordingly...</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>taskFxn(uintptr_t<sp/>a0,<sp/>uintptr_t<sp/>a1)</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Locals</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_Handle<sp/>handle;</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_Params<sp/>params;</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_Transaction<sp/>i2cTrans;</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_Transaction<sp/>i2cTrans2;</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Configure<sp/>I2C<sp/>parameters.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_Params_init(&amp;params);</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>params.transferMode<sp/>=<sp/>I2C_MODE_CALLBACK;</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>params.transferCallbackFxn<sp/>=<sp/>writeCallbackDefault;</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Prepare<sp/>data<sp/>to<sp/>send,<sp/>send<sp/>0x00,<sp/>0x01,<sp/>0x02,<sp/>...0xFF,<sp/>0x00,<sp/>0x01...</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>for(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numTxBytes;<sp/>i++)</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txBuffer[i]<sp/>=<sp/>(uint8_t)<sp/>i;</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>first<sp/>I2C<sp/>transaction<sp/>structure</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans.writeCount<sp/><sp/><sp/><sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans.writeBuf<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>txBuffer;</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans.readCount<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans.readBuf<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rxBuffer;</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans.targetAddress<sp/>=<sp/>0x3C;</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Second<sp/>transaction</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans2.writeCount<sp/><sp/><sp/><sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans2.writeBuf<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>txBuffer2;</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans2.readCount<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans2.readBuf<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rxBuffer2;</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2cTrans2.targetAddress<sp/>=<sp/>0x2E;</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Open<sp/>I2C</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>I2C_open(CONFIG_I2C,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>chained<sp/>I2C<sp/>transfers<sp/>(in<sp/>callback<sp/>mode).</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_transfer(handle,<sp/>&amp;i2cTrans);</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2C_transfer(handle,<sp/>&amp;i2cTrans2);</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>other<sp/>stuff<sp/>while<sp/>I2C<sp/>is<sp/>handling<sp/>the<sp/>transfers</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>if<sp/>I2C<sp/>transfers<sp/>are<sp/>finished</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if(transferDone)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Continue...</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Instrumentation<sp/>#</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>I2C<sp/>driver<sp/>interface<sp/>produces<sp/>log<sp/>statements<sp/>if<sp/>instrumentation<sp/>is</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/><sp/>enabled.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/><sp/>Diagnostics<sp/>Mask<sp/>|<sp/>Log<sp/>details<sp/>|</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/><sp/>----------------<sp/>|<sp/>-----------<sp/>|</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/><sp/>Diags_USER1<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>basic<sp/>I2C<sp/>operations<sp/>performed<sp/>|</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/><sp/>Diags_USER2<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>detailed<sp/>I2C<sp/>operations<sp/>performed<sp/>|</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>******************************************************************************</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_i2c_I2CCC26XX__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_i2c_I2CCC26XX__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_i2_c_8h" kindref="compound">ti/drivers/I2C.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_power_8h" kindref="compound">ti/drivers/Power.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/dpl/SwiP.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="struct_i2_c_c_c26_x_x___i2_c_pin_cfg" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343" refid="struct_i2_c_c_c26_x_x___i2_c_pin_cfg_1a07155d4bf6fac9ed7181eca65563e2c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_i2_c_c_c26_x_x___i2_c_pin_cfg_1a07155d4bf6fac9ed7181eca65563e2c9" kindref="member">pinSDA</ref>;</highlight></codeline>
<codeline lineno="344" refid="struct_i2_c_c_c26_x_x___i2_c_pin_cfg_1af6a6d421ac74746b80065a3e9de338d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_i2_c_c_c26_x_x___i2_c_pin_cfg_1af6a6d421ac74746b80065a3e9de338d6" kindref="member">pinSCL</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}<sp/><ref refid="struct_i2_c_c_c26_x_x___i2_c_pin_cfg" kindref="compound">I2CCC26XX_I2CPinCfg</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_BASE_HWATTRS</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>I2C<sp/>peripheral&apos;s<sp/>Power<sp/>driver<sp/>ID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1_1a190fdbeec1e873422be9731116f9cb6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1_1a190fdbeec1e873422be9731116f9cb6e" kindref="member">powerMngrId</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>I2C<sp/>Swi<sp/>priority.</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>The<sp/>higher<sp/>the<sp/>number,<sp/>the<sp/>higher<sp/>the<sp/>priority.</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>The<sp/>minimum<sp/>is<sp/>0<sp/>and<sp/>the<sp/>maximum<sp/>is<sp/>15<sp/>by<sp/>default.</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>The<sp/>maximum<sp/>can<sp/>be<sp/>reduced<sp/>to<sp/>save<sp/>RAM<sp/>by<sp/>adding<sp/>or<sp/>modifying</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Swi.numPriorities<sp/>in<sp/>the<sp/>kernel<sp/>configuration<sp/>file.</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1_1af6dcf5a19b94fa39e89a1435c78f0d61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1_1af6dcf5a19b94fa39e89a1435c78f0d61" kindref="member">swiPriority</ref>;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SDA<sp/>pin<sp/>index<sp/>and<sp/>mux<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1_1a3387c3315d2b4f62fedf70563fd55931" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1_1a3387c3315d2b4f62fedf70563fd55931" kindref="member">sdaPin</ref>;</highlight></codeline>
<codeline lineno="408" refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1_1abb38e56c76f4124593b8f46f5f7f0ae9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1_1abb38e56c76f4124593b8f46f5f7f0ae9" kindref="member">sdaPinMux</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SCL<sp/>pin<sp/>index<sp/>and<sp/>mux<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1_1a0c0d7cba4b01ece784f35192fdc91b0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1_1a0c0d7cba4b01ece784f35192fdc91b0a" kindref="member">sclPin</ref>;</highlight></codeline>
<codeline lineno="411" refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1_1ae69f01753f387c3e9a00b32ea5587659" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1_1ae69f01753f387c3e9a00b32ea5587659" kindref="member">sclPinMux</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}<sp/><ref refid="struct_i2_c_c_c26_x_x___h_w_attrs_v1" kindref="compound">I2CCC26XX_HWAttrsV1</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="struct_i2_c_c_c26_x_x___object" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_BASE_OBJECT</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Swi<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="struct_i2_c_c_c26_x_x___object_1a7aa91c1e26de28c30650aa69411c254c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>SwiP_Struct<sp/><ref refid="struct_i2_c_c_c26_x_x___object_1a7aa91c1e26de28c30650aa69411c254c" kindref="member">swi</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bitrate<sp/>of<sp/>the<sp/>I2C<sp/>module<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="struct_i2_c_c_c26_x_x___object_1a8544e07d83b25c67b957c58a9a0e4317" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_i2_c_c_c26_x_x___object_1a8544e07d83b25c67b957c58a9a0e4317" kindref="member">bitRate</ref>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pin<sp/>indexes.<sp/>We<sp/>need<sp/>to<sp/>cache<sp/>these<sp/>because<sp/>we<sp/>might<sp/>have<sp/>custom<sp/>pins<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="struct_i2_c_c_c26_x_x___object_1a5adeba8eacda56c22231cd1efd786042" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_i2_c_c_c26_x_x___object_1a5adeba8eacda56c22231cd1efd786042" kindref="member">sdaPin</ref>;</highlight></codeline>
<codeline lineno="431" refid="struct_i2_c_c_c26_x_x___object_1a104795a3f2476169c7800fe7f9584368" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_i2_c_c_c26_x_x___object_1a104795a3f2476169c7800fe7f9584368" kindref="member">sclPin</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>I2C<sp/>power<sp/>notification<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="struct_i2_c_c_c26_x_x___object_1a6a7aaccb2b2b05d9fd9230924acf9e96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_i2_c_c_c26_x_x___object_1a6a7aaccb2b2b05d9fd9230924acf9e96" kindref="member">i2cPostFxn</ref>;</highlight></codeline>
<codeline lineno="435" refid="struct_i2_c_c_c26_x_x___object_1a2b16c813ec8f21896de5eecf03ed4178" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_power___notify_obj" kindref="compound">Power_NotifyObj</ref><sp/><ref refid="struct_i2_c_c_c26_x_x___object_1a2b16c813ec8f21896de5eecf03ed4178" kindref="member">i2cPostObj</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}<sp/><ref refid="struct_i2_c_c_c26_x_x___object" kindref="compound">I2CCC26XX_Object</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_i2c_I2CCC26XX__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="source/ti/drivers/i2c/I2CCC26XX.h"/>
  </compounddef>
</doxygen>
