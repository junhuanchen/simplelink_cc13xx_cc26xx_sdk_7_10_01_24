.. _sec-rtos-overview-tasks:

Tasks
-----

TI-RTOS *Tasks* are equivalent to independent threads that conceptually execute
functions in parallel within a single C program. In reality, switching the
processor from one task to another helps achieve concurrency. Each Task is
always in one of the following modes of execution:

- **Running**: task is currently running

- **Ready**: task is scheduled for execution

- **Blocked**: task is suspended from execution

- **Terminated**: task is terminated from execution

- **Inactive**: task is on inactive list

One (and only one) task is always running, even if it is only the Idle Task (see
:numref:`tirtos_threads`). The current running task can be blocked from
execution by calling certain Task module functions, as well as functions
provided by other modules like Semaphores. The current task can also terminate
itself. In either case, the processor is switched to the highest priority task
that is ready to run. See the Task module in the package ti.sysbios.knl section
of the |TI-RTOS_UG| for more information on these functions.

Numeric priorities are assigned to tasks, and multiple tasks can have the same
priority. Tasks are readied to execute by highest to lowest priority level;
tasks of the same priority are scheduled in order of arrival. The priority of
the currently running task is never lower than the priority of any ready task.
The running task is preempted and rescheduled to execute when there is a ready
task of higher priority.


In the simple\_peripheral application, the Bluetooth Low Energy protocol
stack task is given the highest priority (5) and the application task is
given the lowest priority (1).


.. _sec-rtos-overview-initializing-a-task:

Initializing a Task
^^^^^^^^^^^^^^^^^^^

When a task is initialized, it has its own runtime stack for storing local
variables as well as further nesting of function calls. All tasks executing
within a single program share a common set of global variables, accessed
according to the standard rules of scope for C functions. This set of memory is
the context of the task. The following is an example of the application task
being constructed.

.. _creating-task-listing:
.. code-block:: c
    :linenos:
    :caption: A TI-RTOS task
    :emphasize-lines: 12-29, 41

    #include <xdc/std.h>
    #include <ti/sysbios/BIOS.h>
    #include <ti/sysbios/knl/Task.h>

    /* Task's stack */
    uint8_t sbcTaskStack[TASK_STACK_SIZE];

    /* Task object (to be constructed) */
    Task_Struct task0;

    /* Task function */
    void taskFunction(UArg arg0, UArg arg1)
    {
        /* Local variables. Variables here go onto task stack!! */

        /* Run one-time code when task starts */

        while (1) /* Run loop forever (unless terminated) */
        {
            /*
             * Block on a signal or for a duration. Examples:
             *  ``Sempahore_pend()``
             *  ``Event_pend()``
             *  ``Task_sleep()``
             *
             * "Process data"
             */
        }
    }

    int main() {

        Task_Params taskParams;

        // Configure task
        Task_Params_init(&taskParams);
        taskParams.stack = sbcTaskStack;
        taskParams.stackSize = TASK_STACK_SIZE;
        taskParams.priority = TASK_PRIORITY;

        Task_construct(&task0, taskFunction, &taskParams, NULL);

        BIOS_start();
    }

The task creation is done in the main() function, before the TI-RTOS Kernel's
scheduler is started by ``BIOS_start()``. The task executes at its assigned
priority level after the scheduler is started.

TI recommends using an existing application task for application-specific
processing.

.. ifconfig:: device in ['cc13x0', 'cc2640']

    When adding an additional task to the application project, the
    priority of the task must be assigned a priority within the TI-RTOS
    priority-level range, defined in the TI-RTOS configuration file (``.cfg``).

    .. tip::
        Reduce the number of Task priority levels to gain additional RAM savings
        in the TI-RTOS configuration file (``.cfg``)::

            Task.numPriorities = 6;

.. ifconfig:: device == 'cc13xx_cc26xx'

    When adding an additional task to the application project, 
    its priority must be assigned within the |TIRTOS| priority-level range,
    configured via SysConfig inside ``TI-RTOS`` |rarr| ``Core Kernel`` |rarr|
    ``Task`` |rarr| ``Number of Task Priorities``.

    .. tip::
        Reduce the number of Task priority levels to gain additional RAM savings
        via SysConfig by modifying ``Number of Task Priorities``.

Do not add a task with a priority equal to or higher than the Bluetooth low
energy protocol stack task and related supporting tasks. See :ref:`sec-inc-architecture-standard-project-task-hierarchy`
for details on the system task hierarchy.

Ensure the task has a minimum task stack size of 512 bytes of predefined
memory. At a minimum, each stack must be large enough to handle normal
subroutine calls and one task preemption context. A task preemption context is
the context that is saved when one task preempts another as a result of an
interrupt thread readying a higher priority task. Using the TI-RTOS profiling
tools of the IDE, the task can be analyzed to determine the peak task stack
usage.

.. note::
    The term *created* describes the instantiation of a task. The actual
    TI-RTOS method is to construct the task. See :ref:`create_vs_construct` for
    details on constructing TI-RTOS objects.


A Task Function
^^^^^^^^^^^^^^^

When a task is initialized, a function pointer to a task function is passed to
the ``Task_construct`` function. When the task first gets a chance to process,
this is the function which the TI-RTOS runs. :numref:`creating-task-listing`
shows the general topology of this Task function.

In typical use cases, the task spends most of its time in the blocked state,
where it calls a ``_pend()`` API such as ``Semaphore_pend()``. Often, high
priority threads such as Hwis or Swis unblock the task with a ``_post()`` API
such as ``Semaphore_post()``.
