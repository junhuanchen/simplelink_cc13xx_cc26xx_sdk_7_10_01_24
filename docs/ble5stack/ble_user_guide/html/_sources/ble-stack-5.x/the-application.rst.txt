.. _the_application:

Introduction
============

This section describes the application portion of the
simple\_peripheral project, which includes the following:

-  :ref:`start-up-in-main`

-  :ref:`icall`

-  :ref:`sbp_task`

-  :ref:`intertask_messages`

.. _start-up-in-main:

Main initialization
===================

The ``main`` function is contained in source file main.c located in the
IDE Start-up folder. This function is the starting point at run time.
The purpose of main is to bring up the target with interrupts disabled,
drivers initialized, power management on, TI-RTOS7 tasks created or
constructed, and start the SYS/BIOS kernel scheduler with interrupts enabled.
The ``main`` function does not return. Main.c exists in the application
project; in other words main.c will be allocated within flash reserved for
the application.

  .. code-block:: c
    :caption: A basic main function.
    :linenos:

    int main()
    {
        /* Register Application callback to trap asserts raised in the Stack */
        RegisterAssertCback(AssertHandler);

        Board_initGeneral();

        // Enable iCache prefetching
        VIMSConfigure(VIMS_BASE, TRUE, TRUE);
        // Enable cache
        VIMSModeSet(VIMS_BASE, VIMS_MODE_ENABLED);

        #if !defined( POWER_SAVING )
        /* Set constraints for Standby, powerdown and idle mode */
        // PowerCC26XX_SB_DISALLOW may be redundant
        Power_setConstraint(PowerCC26XX_SB_DISALLOW);
        Power_setConstraint(PowerCC26XX_IDLE_PD_DISALLOW);
        #endif // POWER_SAVING

        /* Update User Configuration of the stack */
        user0Cfg.appServiceInfo->timerTickPeriod = Clock_tickPeriod;
        user0Cfg.appServiceInfo->timerMaxMillisecond  = ICall_getMaxMSecs();

        /* Initialize ICall module */
        ICall_init();

        /* Start tasks of external images - Priority 5 */
        ICall_createRemoteTasks();

        SimplePeripheral_createTask();

        /* enable interrupts and start SYS/BIOS */
        BIOS_start();

        return 0;
    }

See :ref:`sec-tirtos-overview` for how the application is
constructed through TI-RTOS7.

.. note::
    The ICall module must be initialized by :ble_api:`ICall_init` and the
    stack task is created via :ble_api:`ICall_createRemoteTasks`.

.. _icall:

ICall
=====

Introduction
------------

Indirect Call Framework (ICall) is a module that provides a
mechanism for the application to interface with the Bluetooth low
energy protocol stack services (that is, |STACK| APIs) as well as certain
primitive services provided by TI-RTOS7 (for example, thread synchronization).
ICall allows the application and protocol stack to operate efficiently,
communicate, and share resources in a unified TI-RTOS7 environment.

The central component of the ICall architecture is the API translation,
which facilitates the application program interface between the
application and the |STACK|. Although most ICall interactions are abstracted
within the |STACK| APIs (for example, GAP, HCI, and so forth), the application
developer must understand the underlying architecture for the |STACK|
to operate properly in the multithreaded RTOS environment.

The ICall module source code is provided in the ICall and ICall
BLE IDE folders in the application project. The figure below shows an example
of the application calling the stack API ``GATT_Notification``.

.. ditaa::
    :--no-separation:

    /------------------------------\  +-----------------------+
    | GATT_Notification(...)       |  |       Application     |
    \------------------------------/  |        c0BC           |
                                      +-----------------------+
                                      |       ICall           |
                                      |        cEEE           |
                                      +---+-------------------+
    /------------------------------\      |              ^
    | icall_directAPI(...)         |      |              |
    |   o ICall_sendServiceMsg(...)|      |              |
    |   o ICall_waitMatch(...)     |      |              |
    |   o Event_pend(...)          |      |              |
    \------------------------------/      |     App      |
                                      ----+--------------+-----
                                          |    Stack     |      /---------------+---------------\
                                          |              |      | ble_dispatch_liteProcess(...) |
                                          |              |      |   o osal_msg_receive(...)     |
                                          |              |      |   o icall_liteTranslation(...)|
                                          |              |      |   o sendLiteCmdStatus(...)    |
                                          |              |      \-------------------------------/
                                          V              |
                                      +------------------+----+
                                      |    API Translation    |
                                      |      cEEE             |
                                      +-----------------------+
                                      |       Stack  c900     |
                                      |                       |
                                      +-----------------------+

ICall |STACK| Protocol Service
---------------------------------

As the figure above shows, the ICall core use case involves messaging
between a server entity (that is, the |STACK|
task) and a client entity (for example, the application task).

.. note::
    The ICall framework is not the GATT server and client
    architecture, as defined by the Bluetooth Low Energy protocol.

The reasoning for this architecture is as follows:

-  To enable independent updating of the application and Bluetooth Low
   Energy protocol stack

-  To maintain API consistency as software is ported from legacy
   platforms (that is, OSAL for the CC254x) to TI-RTOS7 of the |DEVICE|.

The ICall |STACK| service serves as the application interface to |STACK| APIs.
When a |STACK| API is called by the application internally, the ICall module
routes (that is, dispatches) the command to the |STACK| and routes
messages from the |STACK| to the application when appropriate.

Because the ICall module is part of the application project, the
application task can access ICall with direct function calls.
Because the |STACK| executes at the highest priority, the application task
blocks until the response is received. Certain protocol stack APIs may
respond immediately, but the application thread blocks as the API is
dispatched to the |STACK| through ICall. Other |STACK| APIs may also
respond asynchronously to the application through ICall
(for example, event updates) with the response sent to the event handler of
the application task.

ICall Primitive Service
-----------------------

ICall includes a primitive service that abstracts various operating
system-related functions. Due to shared resources and to maintain
interprocess communication, the application must use the following
ICall primitive service functions:

-  Messaging and Thread Synchronization

-  Heap Allocation and Management

Some of these are abstracted to Util functions (see the relevant
module in :ref:`sec-tirtos-overview`). The ICall primitive service is
implemented as part of ``icall.c``.

Messaging and Thread Synchronization
------------------------------------

The Messaging and Thread Synchronization functions provided by ICall
enable an application to communicate with the |STACK| in the
multithreaded TI-RTOS7 environment.

In ICall, messaging between two tasks occurs by sending a block of
message from one thread to the other through a message queue. The
sender allocates a memory block, writes the content of the message
into the memory block, and then sends (that is, enqueues) the memory
block to the recipient. Notification of message delivery occurs
using an event flag. The receiver wakes up on the event flag post,
copies the message memory block (or blocks), processes the message,
and returns (frees) the memory block to the heap.

The stack uses ICall for notifying and sending messages to the
application. ICall delivers these service messages, the application
task receives them, and the messages are processed in the context
of the application.

Heap Allocation and Management
------------------------------

ICall provides the application with global heap APIs for dynamic
memory allocation. See :ref:`dynamic_memory_allocation` for more details on
managing dynamic memory. ICall uses this heap for all protocol stack messaging
and to obtain memory for other ICall services. TI recommends that the
application uses these ICall APIs to allocate dynamic memory.

.. _the-application-icall-initialization-and-registration:

ICall Initialization and Registration
-------------------------------------

To instantiate and initialize the ICall service, the application
must call the functions in in the snippet below in main() before starting the
TI-RTOS7 kernel scheduler:

  .. code-block:: c
    :caption: Required code to utilize ICall.
    :linenos:

    /* Initialize ICall module */
    ICall_init();

    /* Start tasks of external images - Priority 5 */
    ICall_createRemoteTasks();

Calling :ble_api:`ICall_init` initializes the ICall primitive service (for
example, heap manager) and framework. Calling
:ble_api:`ICall_createRemoteTasks` creates but does not start the |STACK|
task. Before using ICall protocol
services, the server and client must enroll and register with ICall.
The server enrolls a service, which is defined at build time.
Service function handler registration uses a globally defined unique
identifier for each service. For example, Bluetooth Low Energy uses
:c:type:`ICALL_SERVICE_CLASS_BLE` for receiving |STACK| task messages through
ICall.

To enroll the |STACK| service (server) with ICall in osal\_icall\_ble.c,
see the snippet below:

  .. code-block:: c
    :caption: ICall Enrollment
    :linenos:

    /* Enroll the service that this stack represents */
    ICall_enrollService(ICALL_SERVICE_CLASS_BLE, NULL, &entity, &syncHandle);

The registration mechanism is used by the client to send and/or
receive messages through the ICall dispatcher.

For a client (for example, application task) to use the |STACK| APIs,
the client must first register its task with
ICall. This registration usually occurs in the task initialization
function of the application. The snippet below is an example
from ``SimplePeripheral_init`` in simple\_peripheral.c

  .. code-block:: c
    :caption: ICall Registration
    :linenos:

    // Register the current thread as an ICall dispatcher application
    // so that the application can send and receive messages.
    ICall_registerApp(&selfEntity, &syncEvent);

The application supplies the selfEntity and syncEvent inputs. These inputs
are initialized for the task of the client (for example,
application) when the :ble_api:`ICall_registerApp` returns are initialized.
These objects are subsequently used by ICall to facilitate messaging
between the application and server tasks. The syncEvent argument
represents the Events Module handle for signaling and the selfEntity represents
the destination message queue of the task. Each task registering
with ICall has unique syncEvent and selfEntity identifiers.

.. note::
    |STACK| APIs defined in ``icall_ble_api.h`` and other ICall primitive
    services are not available before ICall registration.

.. _sec-the-application-icall-thread-sync:

ICall Thread Synchronization
----------------------------

The ICall module uses TI-RTOS7 Events Module for thread synchronization
instead of Semaphores.

To allow a client or a server thread to block until it receives a message,
ICall provides the API functions which blocks until the semaphore
associated with the caller TI-RTOS7 thread is posted.

.. _icall_blocking:

  .. code-block:: c
    :caption: ICall Blocking/Pending Calls
    :linenos:

    UInt Event_pend(Event_Handle handle, UInt andMask, UInt orMask, UInt32 timeout);

``handle`` is the constructed Event_Handle instance. ``andMask`` and
``orMask`` are for the user to select which Event flags to block/
pend on. ``timeout`` is a time-out period in milliseconds. If not
already returned after this time-out period, the function returns with
events consumed.

``Event_pend`` blocks the current task until the desired Events
are posted. Allowing an application or a server thread to block/yield
the processor resource to other lower priority threads or conserve
energy by shutting down power and/or clock domains when possible.

There are a total of 32 events. These can be defined for application
specific purposes. Note that there is an event specifically for ICall
Messages and Queues.

The Event associated with a TI-RTOS7 thread is signaled/posted by when
``Event_post`` is called with the desired flags.

``Event_post`` is used so an application or a server can add
its own event to unblock ``Event_pend`` and synchronize the
thread with appropriate flags. ``Event_post`` constructed
Event_Handle instance, as well as an eventFlag mask to select the
desired flags.

.. _icall_signal:

  .. code-block:: c
    :caption: ICall Signaling/Posting Call
    :linenos:

    Void Event_post(Event_Handle handle, UInt eventMask);

The Event handle associated with the thread is obtained through
either :ble_api:`ICall_enrollService` call or :ble_api:`ICall_registerApp` call.

.. warning::
    Do not call an ICall function from a stack callback. This
    action can cause ICall to abort (with :ble_api:`ICall_abort`) and break the
    system.


For more information on the TI-RTOS7 Events Module, see
:ref:`sec-rtos-overview-event`.

Example ICall Usage
-------------------

:numref:`icall_messaging_example` shows an example command being sent from the
application to the |STACK| through the ICall framework with a corresponding
return value passed back to the application.

:ble_api:`ICall_init` initializes the ICall module instance and
:ble_api:`ICall_createRemoteTasks` creates a task per external image with an
entry function at a known address.

After initializing ICall, the application task registers with ICall
through :ble_api:`ICall_registerApp`.

After the SYS/BIOS scheduler starts and the application task runs,
the application sends a protocol command defined in ``ble_dispatch_JT.c``
such as :ble_api:`GAP_GetParamValue`.

.. warning::
    Although the protocol command is declared in ``gap.h`` and defined
    on the |STACK| side via ``ble_dispatch_JT.c``, the declaration
    **MUST** be overridden by ``icall_api.h``.

The protocol command is not executed in the thread of the application
but is encapsulated in an ICall message and routed to the |STACK| task
via the ICall framework. This command
is sent to the ICall dispatcher where it is dispatched and executed
in the |STACK| context. The application thread
meanwhile blocks until the corresponding command status message is received.
The |STACK| finishes executing the command,
then sends a command status message response is through ICall back to
the application thread. An example diagram of this exchange can be seen
in :numref:`icall_messaging_example`

.. _icall_messaging_example:
.. uml::
    :caption: ICall Messaging Example
    :align: center

    @startuml
    participant App
    participant "ICall"
    participant "BLE Stack"
      App -> "ICall" : ICall_Init
      App -> "ICall" : ICall_createRemoteTasks
      App -> "ICall" : ICall_registerApp
      App -> "ICall" : GAP_GetParamValue
      ICall -> ICall : icall_directAPI(...)

      ICall -> "BLE Stack" : ICall_sendServiceMsg\n(BLE Primitive Service)

    rnote over "BLE Stack"
        Stack Executes
        GAP_GetParamValue
    end note

    activate App

    rnote over App
       App Task Blocks
    end note

      "BLE Stack" -> "ICall" : osal_service_complete(sendGapCmdStatus)

    deactivate "App"

      ICall -> App : return

    @enduml


    ICall Messaging Example

.. _sec-the-application-icall-lite:

ICall Translation and Include
-----------------------------

Effectively, ``icall_ble_api.h`` defines all the ICall/Stack API
while keeping their original function prototypes. This redefinition is done to
utilize a different message format for the dispatcher to handle.

In order for the redefinition to take effect correctly,
``icall_ble_api.h`` **MUST** be the last file to be included in
the source file. This ensures that the redefinition correctly occurs.
If ``icall_ble_api.h`` is not the last file to be included, it's possible
that original definitions could be used due to ``gapbondmgr.h``,
``gapgattserver.h``, or any other ICall/Stack API being included in
another header file.

.. warning::
    For any source file utilizing ICall/Stack API, ``#include "icall_ble_api.h"``
    must be the last include statement. Erratic runtime behavior or
    link time errors may result.

The ICall translation layer is where the stack parses API calls from the app,
defined in ``icall_lite_translation.c`` in the |STACK| project.
All messages will be processed with ``icall_liteTranslation`` in the
BLE-Stack context.

.. warning::
    Only Tasks/Threads registered with ICall via
    :ble_api:`ICall_registerApp` should use ICall/Stack API.

    Application will abort if an unknown task uses ICall/Stack API.

**APIs that are not in ``icall_ble_api.h`` should not be called by the
application. This file should be treated as the high level stack header
definition**

.. _sbp_task:

Simple Peripheral Task
======================

Simple Peripheral Task, or the application task, is the lowest priority task in
the system. The code for this task is in simple\_peripheral.c and
simple\_peripheral in the Application IDE folder.

Application Initialization Function
-----------------------------------

:ref:`sec-tirtos-overview` describes how a task is constructed. After the task
is constructed and the SYS/BIOS kernel scheduler is started, the function that
was passed during task construction is run when the task is ready (for example,
``SimplePeripheral_taskFxn``). This function must first call an application
initialization function.

.. _sbp_general_task:

  .. code-block:: c
    :caption: simple\_peripheral Task Function Pseudocode
    :linenos:

    static void SimplePeripheral_taskFxn(UArg a0, UArg a1)
    {
      // Initialize application
      SimplePeripheral_init();

      //Application main loop
      for (;;)
      {

      }
    }

This initialization function (``SimplePeripheral_init``) configures
several services for the task and sets several hardware and software
configuration settings and parameters. The following list contains
some common examples:

-  Initializing the GATT client

-  Registering for callbacks in various profiles

-  Setting up the Bond Manager

-  Setting up the GAP layer

-  Configuring hardware modules such as LCD or SPI.

For more information on these examples, see their respective
sections in this guide.

.. note::
    In the application initialization function,
    :ble_api:`ICall_registerApp` must be called before any stack API is called.

Event Processing in the Task Function
-------------------------------------

simple\_peripheral implements an event driven task function.
The task function enters an infinite loop so that it
continuously processes as an independent task and does not run to
completion. In this infinite loop, the task remains blocked and
waits until proper events flags signal a new reason for processing:

.. _icall_pend_wait_example:

  .. code-block:: c
    :caption: ICall task remains blocked and waits until signaled for processing.
    :linenos:

    // Waits for an event to be posted associated with the calling thread.
    // Note that an event associated with a thread is posted when a
    // message is queued to the message receive queue of the thread
    events = Event_pend(syncEvent, Event_Id_NONE, SBP_ALL_EVENTS,
                        ICALL_TIMEOUT_FOREVER);

When an event or other stimulus occurs and is processed, the task
waits for event flags and remains in a blocked state until there
is another reason to process.

.. _sec-creating-custom-ble-application-creating-additional-tasks:

Creating Additional ICall Enabled Tasks
=======================================

The objective of this section is to familiarize the programmer with the
process of adding an RTOS task that can communicate with the |STACK|. Tasks that
call functions within the |STACK| must follow a few additional steps
to register with ICall. These details are covered below:

1. Follow all the steps detailed in :ref:`sec-rtos-overview-tasks` to create a 
   TI-RTOS task.

2. Open SysConfig -> BLE -> Advanced Settings -> ICALL and add one to the "Max 
   Number of Icall Enabled Tasks" entry.

3. Modify the task's init function to register with ICall
   (explained in :ref:`the-application-icall-initialization-and-registration`)

  .. code-block:: c
    :linenos:
    :caption: ICall Registration for custom task

    // ******************************************************************
    // N0 STACK API CALLS CAN OCCUR BEFORE THIS CALL TO ICall_registerApp
    // ******************************************************************
    // Register the current thread as an ICall dispatcher application
    // so that the application can send and receive messages.
    ICall_registerApp(&selfEntity, &syncEvent);

4. Modify the task's main function to pend on ``syncEvent``
   (explained in :ref:`sec-the-application-icall-thread-sync`)

  .. code-block:: c
    :linenos:
    :caption: ICall Wait

    static void NotificationTask_taskFxn(UArg a0, UArg a1)
    {
      // Initialize application
      NotificationTask_init();

      // Application main loop
      for (;;)
      {
          // Waits for an event to be posted associated with the calling thread.
          // Note that an event associated with a thread is posted when a
          // message is queued to the message receive queue of the thread
          events = Event_pend(syncEvent, Event_Id_NONE, SP_ALL_EVENTS, ICALL_TIMEOUT_FOREVER);

          //...
      }
      // ...
    }

.. _intertask_messages:

Intertask Messages
==================

These messages are passed from another task (such as the |STACK| Service)
through ICall to the application task.

Some possible examples are as follows:

- A confirmation sent from the protocol stack in acknowledgment of a
  successful over-the-air indication

- An event corresponding to an HCI command (see :ref:`ble_api_reference` for
  HCI command documentation and corresponding events)

- A response to a GATT client operation (see :ref:`using_the_gatt_layer_directly`)

Using TI-RTOS7 Events Module
----------------------------

All |STACKVER| projects use the TI-RTOS7 Event module acquire ICall stack
message event. Usage is described in
:ref:`sec-the-application-icall-thread-sync` and more documentation on the
Event module can be found in the |TI-RTOS_UG|.

Processing Queued Application Messages
--------------------------------------

Application messages enqueued using the :ble_api:`Util_enqueueMsg` function are
dequeued for processing in the order in which they occurred. The application
should dequeue and free messages when ``UTIL_QUEUE_EVENT_ID`` events are posted.

The code snippet below shows how simple\_peripheral
processes application messages.

  .. code-block:: c
      :caption: Queued messages are processed in the order they occurred.
      :linenos:
      :emphasize-lines: 1, 4, 6, 8, 15

      #define SBP_QUEUE_EVT   UTIL_QUEUE_EVENT_ID // Event_Id_30

      // If TI-RTOS7 queue is not empty, process app message.
      if (events & SBP_QUEUE_EVT)
      {
          while (!Queue_empty(appMsgQueue))
          {
              sbpEvt_t *pMsg = (sbpEvt_t *)Util_dequeueMsg(appMsgQueue);
              if (pMsg)
              {
                  // Process message.
                  SimpleBLEPeripheral_processAppMsg(pMsg);

                  // Free the space from the message.
                  ICall_free(pMsg);
              }
          }
      }

.. warning::

    Messages originating from the application message queue should be free'd
    using ``ICall_free()``.


Processing Stack Events from the ICall Message Queue
----------------------------------------------------

The the stack will often asynchronously signal the application by placing a
message the application's ICall message queue. This includes event types
defined in ``bcomdef.h`` under "BLE OSAL GAP GLOBAL Events".

The application thread receives these messages as below:

  .. code-block:: c
      :caption: App receives event from ICall message queue.
      :linenos:
      :emphasize-lines: 34, 37

      static void SimplePeripheral_taskFxn(UArg a0, UArg a1)
      {
        // Initialize application
        SimplePeripheral_init();

        // Application main loop
        for (;;)
        {
          uint32_t events;

          // Waits for an event to be posted associated with the calling thread.
          // Note that an event associated with a thread is posted when a
          // message is queued to the message receive queue of the thread
          events = Event_pend(syncEvent, Event_Id_NONE, SP_ALL_EVENTS,
                              ICALL_TIMEOUT_FOREVER);

          if (events)
          {
            ICall_EntityID dest;
            ICall_ServiceEnum src;
            ICall_HciExtEvt *pMsg = NULL;

            // Fetch any available messages that might have been sent from the stack
            if (ICall_fetchServiceMsg(&src, &dest,
                                      (void **)&pMsg) == ICALL_ERRNO_SUCCESS)
            {
              uint8 safeToDealloc = TRUE;

              if ((src == ICALL_SERVICE_CLASS_BLE) && (dest == selfEntity))
              {
                ICall_Stack_Event *pEvt = (ICall_Stack_Event *)pMsg;

                // Check for BLE stack events first
                if (pEvt->signature != 0xffff)
                {
                  // Process inter-task message
                  safeToDealloc = SimplePeripheral_processStackMsg((ICall_Hdr *)pMsg);
                }
              }
            }
        }
        // ...
      }

This message is consumed by the application's ``_processStackMsg(...)``
function. Ususally this involves building a case statement based on message
type and processing based on that. An example is shown below:

  .. code-block:: c
      :caption: Processing message from stack
      :linenos:

      static uint8_t SimplePeripheral_processStackMsg(ICall_Hdr *pMsg)
      {
          switch (pMsg->event)
          {
              case GAP_MSG_EVENT:
              // Process GAP_MSG_EVENT
              break;

              case GATT_MSG_EVENT:
              // Process GATT message
              break;

              case HCI_GAP_EVENT_EVENT:
              // Process HCI message
              break;

              default:
              // do nothing
              break;
          }

          // ...
      }

Messages **that originate from the ICall Message Queue** should be free'd
using ``ICall_freeMsg()``. Messages coming from the ICall message queue
are received using ``ICall_fetchServiceMsg``.

.. warning::

    Using ``ICall_freeMsg()`` on messages that are not from the ICall message
    queue can cause memory corruption. Only use ``ICall_freeMsg()`` on
    messages that have be fetched using ``ICall_fetchServiceMsg``.

Callbacks
---------

The application code also includes various callbacks to protocol
stack layers, profiles, and TI-RTO7S modules. To ensure thread safety,
processing must be minimized in the actual callback and the bulk of
the processing should occur in the application context. Two
functions are defined per callback. One is the callback itself, which
is called upon by another module or task. The second is the function
to handle the event generated by the callback in the application context.
Consider the characteristic change callback, which is called when a
characteristic change occurs.

.. warning::
    No blocking TI-RTOS7 function calls or protocol stack APIs
    should be performed in a callback function. Such function calls may
    result in an abort or undefined behavior. Always perform protocol
    stack and TI-RTOS7 blocking calls from the application task context.

.. Note::
    All callbacks are called in the context of the calling task or module
    (for example, the stack task). To minimize processing in the calling
    context, this function should enqueue an event that the application pends on.

  .. code-block:: c
    :caption: simple_peripheral char value change callback.
    :linenos:

    static void SimplePeripheral_charValueChangeCB(uint8_t paramId)
    {
      SimplePeripheral_enqueueMsg(SP_CHAR_CHANGE_EVT, pValue);
    }

The code snippet above shows the callback function that is sent to
the application via ``SimplePeripheral_simpleProfileCBs`` and
``SimpleProfile_RegisterAppCBs``. The callback simply places a message in the
queue to signal the application to wake up. Once the callback's context returns
and its parent task goes to sleep, the application wakes up due to the enqueue
from the callback. The code snippet below is called when the event is popped
from the application queue and processed.

  .. code-block:: c
    :caption: simple_peripheral char value change event.
    :linenos:

    static void SimplePeripheral_processCharValueChangeEvt(uint8_t paramId)
    {
      //...
    }
