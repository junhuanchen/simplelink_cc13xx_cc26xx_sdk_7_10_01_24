.. _optimizing-ble-memory-usage:

Optimizing Bluetooth Low Energy Stack Memory Usage
--------------------------------------------------

Configuration of the Bluetooth Low Energy protocol stack is
essential for maximizing the amount of RAM and flash memory
available for the application. Refer to :ref:`stack_features_configuration`
to configure parameters that impact runtime RAM usage, such as the maximum
allowable size and number of PDUs. The TI Bluetooth Low Energy
protocol stack is implemented to use a small RAM footprint, and
allow the application to control the behavior of the stack by using
the runtime ICall heap. For example, an application that only sends
one GATT notification per connection event must store only one PDU
in the heap, whereas as an application that must send multiple
notifications must enqueue multiple PDUs in the heap.

To increase the available flash memory allocated to the application
project, minimize the flash usage of the protocol stack by including
only Bluetooth Low Energy features required to implement the defined
role of the device. The available protocol stack configurable
features are described in :ref:`stack_features_configuration`.
Adding additional features to the protocol stack has the net effect
of reducing the amount of flash memory to the application.


Flash optimization
^^^^^^^^^^^^^^^^^^

The following tips may be useful for reducing the footprint of the |STACK|.
In general, there is a feature vs. flash footprint trade-off. Each of the
improvements below offer a cost in terms of feature removal.

* Verify that your application uses the *optimize for flash size* compiler
  optimization settings (default for TI projects).

* Use only one page of SNV.

* Remove or exclude debug DISPLAY, Two button menu or other unused drivers from
  your project.

* Use the stack library options defined in ``build_config.opt`` to pull in
  the smallest part possible of the library for the given use case. In general,
  this means a library that implements only one role (e.g. peripheral) with no
  additional features enabled (i.e. L2CAP CoC). See
  :ref:`stack_features_configuration`.

* Remove HAL Asserts by removing the ``EXT_HAL_ASSERT`` define

RAM optimization
^^^^^^^^^^^^^^^^

The following tips may be useful for reducing the RAM footprint of the |STACK|.
It is important to remember that often removing RAM results in reduced
throughput or features, the tradeoffs listed below should be evaluated
carefully.

* If using L2CAP CoC, reference :ref:`l2cap-ram` for defines that may configure
  L2CAP CoC functionality and their RAM implications

* Set ``MAX_NUM_PDU`` and ``MAX_PDU_SIZE`` to reduce the amount of packets
  that can be queued up by the stack at a time. This will reduce heap
  consumption.

* Disable LE Secure Connections pairing if not needed. See :ref:`lesc-intro`
  on how to do this. This will save
  ``ECCROMCC26XX_NIST_P256_WORKZONE_LEN_IN_BYTES`` during pairing.
  Removing LESC also removes the requirement of having ``MAX_PDU_SIZE`` set to
  69, this can be overriden in ``ble_user_config.h`` to as low as 27.

* The LE Data Length Extension feature will default to an RX size of 251.
  If the peer device also supports DLE and a ``connMaxRxOctets`` value is
  negotiated > 27 (default) then the controller will allocate
  connMaxRxOctets*4. 4 is the number of receive buffers in the
  controller and is a fixed parameter of the stack. However, connMaxRxOctets
  can be limited by either disabling Data Length Extension or limiting the
  max of TX and RX octets. Trimming the values of TX and RX is covered in
  :ref:`sec-ram-considerations-dle`.

* Carefully set ``MAX_NUM_BLE_CONNS``. This define has a large affect on the
  amount of dynamic memory used by the stack. Below is a list of structures
  that the stack will alloc on initialization based on number of Connections.
  Each structure is multiplied by ``MAX_NUM_BLE_CONNS``. 

    - ``sizeof(linkDBItem_t)`` : Link data base entry for each connection
    - ``sizeof( l2capChannel_t )`` : At least one signaling channel for each connection
    - ``sizeOfLlConnState`` : Structure to hold connection state
    - ``sizeOfAllExtConnParam``: Structure to hold connection parameters
    - ``sizeof(dataQ_t)`` : Each connection's TX data queue
    - ``linkParam_t`` : Central and Peripheral parameters for each connection
    - ``llCte_t`` : CTE for each connection if RTLS is used
    - ``ble5OpCmd_t`` : Radio operation command for connection

* Check for heap failures by checking ``heapmgrMemFail`` from
  :ref:`sec-heap-debugging`. If heap failures are occurring, attempt to tune
  stack build configuration using the features and defines above.
  See :ref:`stack_features_configuration` for options that can be configured
  in the stack.

* If heap failures still  occur after optimizing the BLE-Stack build,
  the size of the heap can be increased by reducing the size of static
  allocation. Static allocation (.bss, .data) includes globally defined
  buffers, runtime task stacks, and other structures that are instantiated
  without the use of malloc.

    - Trim task stack sizes by inspecting them using Task --> Detailed view in
      :ref:`sec-rov`. If there is unused space their size can be decreased.
    - The system stack can be reduced in a similar way, its usage is shown
      under HWI --> Module view in ROV. Changing the system stack size is
      covered in :ref:`sec-memory-management-system-stack`.

.. warning::

    The above RAM estimations may vary by release, and are not an exhaustive
    list. It is intended as a way to allow the developer to profile the RAM
    requirements based on the desired settings. The best way to estimate RAM
    usage is to measure it in the field using the techniques covered in
    :ref:`sec-heap-debugging`

See :ref:`development-and-debugging-check-system-flash-and-ram-usage-with-map-file` for
the procedure to check the size of the configured protocol stack.

Decrease flash consumption of the examples project
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The guidelines provided here are based on the simple_peripheral example
but can be adapted to any example.

Remove the two buttons menu and display
"""""""""""""""""""""""""""""""""""""""

By removing the two_btn_menu and the display from your project,
you can significantly increase the remaining memory available
on the device. The guidelines are provided for the simple_peripheral
project but this is possible for all examples that use TBM and display.

Here are the guidelines:

1. Import the simple_peripheral project

#. Change the IO Capabilities (used for pairing/bonding) of your device.
   Using SysConfig, go to ``BLE`` > ``Bond Manager`` > ``IO Capabilities``.
   Change ``IO Capabilities`` in *No Display or Input Device*

   .. _fig_SysConfig_Change_BLE_IO_capabilities.png:
   .. figure:: resources/SysConfig_Change_BLE_IO_capabilities.png
       :align: center

       Change the IO capabilities of your device

#. Modify ``main.c``, ``simple_peripheral.c`` and ``simple_peripheral.h``
   in order to not use the tbm (*two buttons menu*) and the display:

   * ``main.c``

     - remove the #include of ``Display.h``
     - remove the (extern) declaration of ``dispHandle``
     - modify the ``AssertHandler()`` function in order to only spinlock

   * ``simple_peripheral.c``

     - remove the #include of ``Display.h``, ``board_key.h``,
       ``two_btn_menu.h``, ``simple_peripheral_menu.h``
     - remove the declaration of ``dispHandle`` and all the code
       using it (especially the calls to ``Display_printf()``,
       ``Display_clearLine()`` and ``Display_clearLines()``)
     - remove the functions ``SimplePeripheral_keyChangeHandler()``,
       ``SimplePeripheral_handleKeys()`` and
       ``SimplePeripheral_menuSwitchCb()``. Remove their call too.
     - remove all the calls to ``tbm_initTwoBtnMenu()``,
       ``tbm_setItemStatus()``, ``tbm_goTo()``

   * ``simple_peripheral.h``

     - remove the declaration of the functions 
       ``SimplePeripheral_doSelectConn()``,
       ``SimplePeripheral_doAutoConnect()`` and
       ``SimplePeripheral_doSetConnPhy()``

   .. container:: toggle

       .. container:: header
            
            Here are the diff files (based on SDK 4.10), click the arrow
            to see all the changes:

       * ``main.c``

         .. literalinclude:: resources/simple_peripheral_optimization/main_display_removed.diff
             :language: diff

       * ``simple_peripheral.c``

         .. literalinclude:: resources/simple_peripheral_optimization/simple_peripheral_display_removed.diff
             :language: diff

       * ``simple_peripheral.h``

         .. literalinclude:: resources/simple_peripheral_optimization/simple_peripheral_h_display_removed.diff
             :language: diff

#. [Optional] The following files can be removed from the Application
   folder:

       - ``board_key.c``
       - ``board_key.h``
       - ``simple_peripheral_menu.c``
       - ``simple_peripheral_menu.h``
       - ``two_btn_menu.c``
       - ``two_btn_menu.h``

#. Test your code. It should still compile and work smoothly!
   *It means you can still advertise, join a connection,
   pair with another device, etc...*

Remove the #2 (long range) advertisement
""""""""""""""""""""""""""""""""""""""""

By removing the secondary advertisement (sometimes called "long range"
advertisement) from the simple_peripheral example you can significantly
save power. The power consumption due to the secondary advertisement
(generally long range advertisement) can represent up to 80% of the
power consumption of the advertisement period. In addition, this
helps you to save memory.

Here are the guidelines:

1. Import the simple_peripheral project

#. Using SysConfig, reduce the number of Advertisement Set to only 1
   (this must be done in BLE > Broadcaster Configuration).
   This will raise a warning saying we need to update the application
   code... this is what we are going to do now :)

   .. figure:: resources/sysCfg_changeAdvSetNumber.png
       :align: center

       Change the number of advertisement sets of your device

   *Note: It is perfectly normal and expected if the compilation of
   your project fails after this step… be patient and go to the next
   steps.*

#. Modify ``simple_peripheral.c`` to remove the code related to
   the #2 advertisement.

     - remove the declaration of the variable ``advHandleLongRange``
     - remove all the code referencing the variable ``advHandleLongRange``
     - remove all the code referencing the table ``advData2``

    .. container:: toggle

       .. container:: header

            Here is ``simple_peripheral.c`` diff file (based on SDK 4.10),
            click the arrow to see the changes:

       .. literalinclude:: resources/simple_peripheral_optimization/simple_peripheral_adv_2_removed.diff
             :language: diff

#. Build and test your project... You might have a warning due to
   SysConfig (this warning only appears if SysConfig is run, i.e. if
   you modify the content of the SysConfig file or if you "Rebuild" the
   project). Apart from that, no warning or error should be raised at build
   time and the project should still work smoothly!
   *It means you can still advertise (legacy advertisement only),
   join a connection, pair with another device, etc...*

Remove the auto-PHY update
""""""""""""""""""""""""""

The *auto-PHY update* is a feature provided by the application
and consisting in dynamically change the PHY used by the BLE stack
to handle a connection.
The PHY is selected based on the RSSI measured. The better the RSSI,
the faster the PHY selected is (e.g. if the RSSI is -25, then the
2M PHY will be selected, if the RSSI is -65 then the S8 PHY will be
selected).
This functionality is available in the simple_peripheral project
and has to be activated using the two buttons menu. Other projects
provide this functionality too.

This modification should free up some FLASH and some CPU time.
The amount of stack required by the example should be decreased too.
The goal is to remove the code responsible for the auto-PHY update.
As the auto-PHY update is based on RSSI, we are also going to remove
the code responsible to read the RSSI of the connection.

Here are the guidelines:

1. Import the simple_peripheral project

#. Modify ``simple_peripheral.c`` and ``simple_peripheral_menu.c``:

   * In ``simple_peripheral.c``:

     - Remove the function ``SimplePeripheral_processCmdCompleteEvt``
       and its calls

     - Remove the function ``SimplePeripheral_initPHYRSSIArray()``
       and its calls

     - Remove the function ``SimplePeripheral_startAutoPhyChange()``
       and its calls. 

     - Remove the function ``SimplePeripheral_stopAutoPhyChange()``
       and its calls

     - Remove the function ``SimplePeripheral_updatePHYStat()``
       and its calls

     - Modify the function ``SimplePeripheral_doSetConnPhy()``
       in order to remove the support of the ``AUTO_PHY_UPDATE``

     - Remove the callback function ``SimplePeripheral_connEvtCB()``

     - Remove the RSSI thresholds defined (this does not save any FLASH
       or RAM but it these defines are useless now). Same remark for 
       ``SP_MAX_RSSI_STORE_DEPTH``, ``SP_RSSI_TRACK_CHNLS``. 
       You can also remove all the define related to auto-phy update:
       ``SP_PHY_NONE``, ``SP_INVALID_HANDLE`` and ``AUTO_PHY_UPDATE``

     - Modify the ``spConnRec_t`` structure. We don't need any more the
       RSSI related elements (``rssiArr``, ``rssiCntr``, ``rssiAvg``)
       and the PHY change related (``currPhy``, ``rqPhy``, ``phyCngRq``,
       ``phyRqFailCnt``, ``isAutoPHYEnable``).
       Remove all the code referring to these elements.

   * In ``simple_peripheral_menu.c``:

    - In the "ConnPhy" menu, remove the ``MENU_ITEM_ACTION`` associated
      with the auto-PHY update.

    - In the corresponding ``MENU_OBJ``, modify the number of available
      items.

   .. container:: toggle

       .. container:: header

            Here are the diff files (based on SDK 4.10),
            click the arrow to see the changes:

       * ``simple_peripheral.c``

         .. literalinclude:: resources/simple_peripheral_optimization/simple_peripheral_auto_phy_update_removed.diff
             :language: diff

       * ``simple_peripheral_menu.c``

         .. literalinclude:: resources/simple_peripheral_optimization/simple_peripheral_menu_auto_phy_update_removed.diff
             :language: diff

#. Test your code. It should still compile and work smoothly!
   *It means you can still advertise, join a connection,
   pair with another device, change the Phy, etc...*

Remove the connection parameters update
"""""""""""""""""""""""""""""""""""""""

Once a connection has been formed, one of the two devices might want to
modify the connection parameters (connection interval, slave latency,
connection timeout). This can be done using a connection parameters
update request.

By default, some of the examples provided (e.g. simple_peripheral) send a
connection parameters update request right after being connected.
By default, the examples are also able to accept a connection update.
Let's see how to not send connection update request and to deny the
incoming connection updates. Note that you can choose to apply only one
of the two modifications or both of them.
The goal is to save flash space and CPU time.

1. Import the simple_peripheral project

#. Modify the code to deny all the connection parameters update requests

    * Using SysConfig, set "Parameter Updates Request Decision" to 
      "Deny All". This must be done in BLE > Peripheral Configuration

         .. figure:: resources/SysConfig_deny_conn_update.png
            :align: center

            Deny all the connection parameters update requests

      Note: If your project is not using SysConfig, you have to modify the
      call to ``GAP_SetParamValue(GAP_PARAM_LINK_UPDATE_DECISION, paramUpdateDecision)``
      to ensure that the second parameter (i.e. ``paramUpdateDecision``)
      is set to ``GAP_UPDATE_REQ_DENY_ALL``

    * In ``simple_peripheral.c``, remove all the code executed when a
      ``GAP_UPDATE_LINK_PARAM_REQ_EVENT`` is received. 
      A ``GAP_UPDATE_LINK_PARAM_REQ_EVENT`` is triggered at the reception
      of a connection parameters update requests.

      .. container:: toggle

         .. container:: header

              Here is ``simple_peripheral.c`` diff file (based on SDK 4.10),
              click the arrow to see the changes:

         .. literalinclude:: resources/simple_peripheral_optimization/simple_peripheral_conn_update_deny.diff
               :language: diff

3. Modify ``simple_peripheral.c`` in order to remove the code related
   to connection update:

    * Remove the treatment of the ``GAP_LINK_PARAM_UPDATE_EVENT``
      (this event is posted when a connection updated has been attempted)

    * Remove the ``SimplePeripheral_processParamUpdate()`` function

    * Remove the treatments of ``SP_SEND_PARAM_UPDATE_EVT``

    * In ``SimplePeripheral_addConn()``, remove the code corresponding to
      connection parameters update.

    * Modify the ``spConnRec_t`` structure to remove the elements
      ``pParamUpdateEventData`` and ``pUpdateClock``.
      Remove the code using those elements too

    * Remove the list ``paramUpdateList`` (and the code referring to).

    * Remove the function ``SimplePeripheral_clearPendingParamUpdate()``

      .. container:: toggle

         .. container:: header

              Here is ``simple_peripheral.c`` diff file (based on SDK 4.10),
              click the arrow to see the changes:

         .. literalinclude:: resources/simple_peripheral_optimization/simple_peripheral_not_send_conn_update.diff
               :language: diff

#. Test your code. It should still compile and work smoothly!
   *It means you can still advertise, join a connection,
   pair with another device, change the Phy, etc...*

Remove the pairing capabilities
"""""""""""""""""""""""""""""""

Pairing is the process of generating and exchanging keys (not to be confused
with forming or establishing a BLE connection between two devices). 
The pairing capability is included in many examples provided in your SDK.

As bonding consists in storing the keys generated during the pairing process
in nonvolatile memory to use for the next encryption sequence, this
functionality will be removed too.

This modification should free up some FLASH and some CPU time.

1. Import the simple_peripheral project

#. Using SysConfig, disable pairing and bonding capabilities.
   This must be done in BLE > Bond Manager

    .. figure:: resources/SysConfig_disable_pairing_bonding.png
      :align: center

      Disable pairing and bonding capabilities

#. In ``simple_peripheral.c``, remove the code related to pairing and bonding.
   
    * Remove the callback-functions ``SimplePeripheral_passcodeCb()`` and
      ``SimplePeripheral_pairStateCb()``

    * Remove the structure ``SimplePeripheral_BondMgrCBs``.

    * Remove the call to the function ``GAPBondMgr_Register()``

    * Remove the function ``SimplePeripheral_processPairState()`` and its calls.

    * Remove the function ``SimplePeripheral_processPasscode()`` and its calls.

      .. container:: toggle

         .. container:: header

              Here is ``simple_peripheral.c`` diff file (based on SDK 4.10),
              click the arrow to see the changes:

         .. literalinclude:: resources/simple_peripheral_optimization/simple_peripheral_remove_pairing.diff
               :language: diff

#. Rebuild your project.

#. The Flash consumption can be even more decreased by not linking and/or
   compiling any of the code related to pairing and/or pairing.
   To do so, the pre-defined symbol ``GAP_BOND_MGR`` must not be declared.

   **If your project is using SysConfig:**
   By default ``GAP_BOND_MGR`` is declared in the file ``ti_build_config.opt``
   (in the folder Debug/syscfg of your project). The file ``ti_build_config.opt``
   cannot be directly altered as it is generated by SysConfig.

     - :ref:`sysconfig-disable` and remove the declaration of the
       symbol ``GAP_BOND_MGR`` in the file ``ti_build_config.opt``.

     **OR**

     - Change the way SysConfig is generating the ti_build_config.opt file.
       SysConfig is using a template that can be modified. The
       template to be considered is in the SDK in
       ``source\ti\ble5stack\.meta\templates\build_config.opt.xdt``.
       Remove the declaration of the symbol ``GAP_BOND_MGR`` in the file
       ``build_config.opt.xdt``.

   **If your project is not using SysConfig:**
   In general ``GAP_BOND_MGR`` is declared in the file build_config.opt.
   Remove the declaration of the symbol in the appropriate file.

#. Rebuild and test your code. It should still build and work smoothly!
   *It means you can still advertise, join a connection,
   change the Phy, etc...*

Remove the Resolvable Private Address (RPA) functionality
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""

(Random) Resolvable Private Address or RPA is a functionality helping
to preserve privacy. It consists in changing the device address over time.
The address can be matched, or resolved, to an Identity Address for
tracking by trusted peers.

This functionality is provided in several examples and can be removed
in order to save memory and CPU time.

1. Import the simple_peripheral project

#. Using SysConfig, go to *BLE > General Configuration > Address Mode* and
   verify you are not using an RPA. Chose, for example "Random Static Address".
   Specify the random static address you want.

    .. figure:: resources/SysConfig_disable_RPA.png
      :align: center

      Select a non-RPA address mode

#. In ``simple_peripheral.c``, remove the code related to RPA.

    * Remove the function ``SimplePeripheral_updateRPA()`` and all its calls

    * Remove the global variable ``argRpaRead`` and all the code using it

    * Remove the clock structure ``clkRpaRead`` and all the code using it

    * Remove the code handling the ``SP_READ_RPA_EVT`` events

    * Remove the global variable ``rpa[]`` (and all the code using it if
      some is remaining)

      .. container:: toggle

         .. container:: header

              Here is ``simple_peripheral.c`` diff file (based on SDK 4.10),
              click the arrow to see the changes:

         .. literalinclude:: resources/simple_peripheral_optimization/simple_peripheral_remove_rpa.diff
               :language: diff

#. Test your code. It should still compile and work smoothly!
   *It means you can still advertise, join a connection,
   pair with another device, change the Phy, etc...*

.. _creating-a-custom-ble-app_directed_advertisements:

Remove the GATT Client functionality
""""""""""""""""""""""""""""""""""""

Depending on your design, GATT client features may not
be required and thus can be disabled. 

The implication of disabling the GATT client is that the GAP bond manager
will not query the Central Address Resolution characteristic of the remote
device. As a result, directed advertisements cannot be used.
For more information, see :ref:`central-address-resolution`.

By default, sample applications such as simple\_peripheral does not define
``GATT_NO_CLIENT`` but initializes the GATT Client as shown below:

  .. code-block:: c

      /*
       * Initialize GATT Client, used by GAPBondMgr to look for RPAO
       * characteristic for network privacy
       */
      GATT_InitClient();

To remove GATT client support, you can add the ``GATT_NO_CLIENT``
predefined symbol to your project and remove the initialization shown above.

Optimize TI drivers for your project
""""""""""""""""""""""""""""""""""""

In order to have easy-to-use and portable code, the TI drivers handle a lot
of different configurations. Most of the time, a specific application does
not require all those configurations. By optimizing the TI drivers for your
own application you can save RAM, FLASH and processor time.

A good example of this is the Power driver (but you can analyze any
TI driver in order to optimize it using a similar process).
The Power driver is a pretty complex driver. A lot of different
combinations of crystals can be used and it handles all of them.

Let's see how to optimize the Power driver:

1. Force CCS or IAR to not use the compiled sources for the Power driver.
   
     * [CCS] Right click on your project and click "Add Files..."
       Add the files PowerCC26X2.c and PowerCC26X2.h to your project.
       *(The TI drivers files are stored in <Your SDK>/source/ti/drivers)*

       It is recommended to select *Copy Files* and not *Link to files*.

       Verify if the linker is considering the files you added by checking
       the "MODULE SUMMARY" section of the .map file. 
       You should find a line presenting the memory consumed by
       ``PowerCC26X2.obj``.

    |

     * [IAR] Right click on your project, then chose "Add" and
       "Add Files...".
       Add the files PowerCC26X2.c and PowerCC26X2.h to your project.
       *(The TI drivers files are stored in <Your SDK>/source/ti/drivers)*

|

2. Review the configuration of your project (for the Power driver,
   the crystal configuration is the most important). To do so, use
   ``SysConfig`` and/or consult the file ``ti_devices_config.c``.
   If ``SysConfig`` is not used, consult the file ``ccfg.c``.

|

3. Optimize the code! The goal here is to find the variables that
   are not seen as constant by the code optimizer but that are
   constant in practice.

    a- Expressions returning always the same value for a given configuration:

      * ``CCFGRead_DIS_GPRAM()``
      * ``CCFGRead_SCLK_LF_OPTION()``
      * ``CCFGRead_XOSC_FREQ()``
      * ``OSCClockSourceGet(OSC_SRC_CLK_LF)``
      * ``OSCClockSourceGet(OSC_SRC_CLK_HF)``

      Those expressions can be replaced by their constant value. This will
      allow the code optimizer to generate a simpler code.

    b- Variable that won't be used (or that will always the same value).

      * Function pointer never set (i.e. always pointing on NULL).
        In this case no need to test if the function is not NULL,
        just remove the corresponding code. A good example of this case
        in the Power driver is ``PowerCC26X2_config.enableTCXOFxn``. By
        it points on NULL and it is wasting time and FLASH to test this
        at each execution.
      * Variable with a constant value set only once at driver opening.
        (*The Power driver does not contain any example of this case*.)

4. That's it! Once again, these guidelines can be adapted to all the
   drivers used. It is important to test properly your code once optimized
   to be sure that no unexpected behavior occurs.